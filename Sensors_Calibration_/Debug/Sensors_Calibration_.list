
Sensors_Calibration_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006ba8  08006ba8  00007ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006e18  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000078  08006e90  00008078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006e90  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8c5  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  0001396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00015318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  00015d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216a0  00000000  00000000  00016540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcc7  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb79e  00000000  00000000  000458a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  00111088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00114188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006b90 	.word	0x08006b90

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08006b90 	.word	0x08006b90

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec4:	b09e      	sub	sp, #120	@ 0x78
 8000ec6:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 	HAL_Init();
 8000ec8:	f001 fc92 	bl	80027f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ecc:	f000 f8ea 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ed0:	f000 f9b2 	bl	8001238 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ed4:	f000 f986 	bl	80011e4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000ed8:	f000 f956 	bl	8001188 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	initHMC5883L();
 8000edc:	f000 fe2c 	bl	8001b38 <initHMC5883L>
	initMPU6050();
 8000ee0:	f000 fa18 	bl	8001314 <initMPU6050>
	CalibrationGyro(&offsetGyroX, &offsetGyroY, &offsetGyroZ);
 8000ee4:	4a60      	ldr	r2, [pc, #384]	@ (8001068 <main+0x1a8>)
 8000ee6:	4961      	ldr	r1, [pc, #388]	@ (800106c <main+0x1ac>)
 8000ee8:	4861      	ldr	r0, [pc, #388]	@ (8001070 <main+0x1b0>)
 8000eea:	f000 fadf 	bl	80014ac <CalibrationGyro>
	CalibrationAccel(&scaleCorrectionFactorAccelX, &scaleCorrectionFactorAccelY,
 8000eee:	4b61      	ldr	r3, [pc, #388]	@ (8001074 <main+0x1b4>)
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	4b61      	ldr	r3, [pc, #388]	@ (8001078 <main+0x1b8>)
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4b61      	ldr	r3, [pc, #388]	@ (800107c <main+0x1bc>)
 8000ef8:	4a61      	ldr	r2, [pc, #388]	@ (8001080 <main+0x1c0>)
 8000efa:	4962      	ldr	r1, [pc, #392]	@ (8001084 <main+0x1c4>)
 8000efc:	4862      	ldr	r0, [pc, #392]	@ (8001088 <main+0x1c8>)
 8000efe:	f000 fb8d 	bl	800161c <CalibrationAccel>
		int16_t rawMagX, rawMagY, rawMagZ;          // Ham manyetometre verileri
		float calibratedMagX, calibratedMagY, calibratedMagZ; // Kalibre edilmiş manyetometre verileri

		double rollRad, pitchRad, yawRad;

		readAccelMPU6050(&rawAccelX, &rawAccelY, &rawAccelZ);
 8000f02:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8000f06:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000f0a:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fa50 	bl	80013b4 <readAccelMPU6050>

		readGyroMPU6050(&rawGyroX, &rawGyroY, &rawGyroZ);
 8000f14:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 8000f18:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000f1c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fa85 	bl	8001430 <readGyroMPU6050>

		getCalibratedAccel(rawAccelX, rawAccelY, rawAccelZ, &calibratedAccelX,
 8000f26:	f9b7 0056 	ldrsh.w	r0, [r7, #86]	@ 0x56
 8000f2a:	f9b7 1054 	ldrsh.w	r1, [r7, #84]	@ 0x54
 8000f2e:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	@ 0x52
 8000f32:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000f36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	4623      	mov	r3, r4
 8000f44:	f000 fda2 	bl	8001a8c <getCalibratedAccel>
				&calibratedAccelY, &calibratedAccelZ);
		getCalibratedGyro(rawGyroX, rawGyroY, rawGyroZ, &calibratedGyroX,
 8000f48:	f9b7 0042 	ldrsh.w	r0, [r7, #66]	@ 0x42
 8000f4c:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	@ 0x40
 8000f50:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8000f54:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000f58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4623      	mov	r3, r4
 8000f66:	f000 fb0b 	bl	8001580 <getCalibratedGyro>
				&calibratedGyroY, &calibratedGyroZ);

		// HMC5883L manyetometre verilerini oku
		readHMC5883L(&rawMagX, &rawMagY, &rawMagZ);
 8000f6a:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8000f6e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000f72:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fe2e 	bl	8001bd8 <readHMC5883L>

		// Kalibrasyon verilerini güncelle
		updateCalibrationMag(rawMagX, rawMagY, rawMagZ, &minMagX, &maxMagX,
 8000f7c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8000f80:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8000f84:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8000f88:	4b40      	ldr	r3, [pc, #256]	@ (800108c <main+0x1cc>)
 8000f8a:	9304      	str	r3, [sp, #16]
 8000f8c:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <main+0x1d0>)
 8000f8e:	9303      	str	r3, [sp, #12]
 8000f90:	4b40      	ldr	r3, [pc, #256]	@ (8001094 <main+0x1d4>)
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <main+0x1d8>)
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	4b40      	ldr	r3, [pc, #256]	@ (800109c <main+0x1dc>)
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4b40      	ldr	r3, [pc, #256]	@ (80010a0 <main+0x1e0>)
 8000f9e:	f000 fe59 	bl	8001c54 <updateCalibrationMag>
				&minMagY, &maxMagY, &minMagZ, &maxMagZ);

		// Kalibre edilmiş değerleri hesapla
		getCalibratedMag(rawMagX, rawMagY, rawMagZ, minMagX, maxMagX, minMagY,
 8000fa2:	f9b7 602e 	ldrsh.w	r6, [r7, #46]	@ 0x2e
 8000fa6:	f9b7 c02c 	ldrsh.w	ip, [r7, #44]	@ 0x2c
 8000faa:	f9b7 e02a 	ldrsh.w	lr, [r7, #42]	@ 0x2a
 8000fae:	4b3c      	ldr	r3, [pc, #240]	@ (80010a0 <main+0x1e0>)
 8000fb0:	f9b3 8000 	ldrsh.w	r8, [r3]
 8000fb4:	4b39      	ldr	r3, [pc, #228]	@ (800109c <main+0x1dc>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	4a37      	ldr	r2, [pc, #220]	@ (8001098 <main+0x1d8>)
 8000fbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fc0:	4934      	ldr	r1, [pc, #208]	@ (8001094 <main+0x1d4>)
 8000fc2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000fc6:	4832      	ldr	r0, [pc, #200]	@ (8001090 <main+0x1d0>)
 8000fc8:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000fcc:	4c2f      	ldr	r4, [pc, #188]	@ (800108c <main+0x1cc>)
 8000fce:	f9b4 4000 	ldrsh.w	r4, [r4]
 8000fd2:	f107 051c 	add.w	r5, r7, #28
 8000fd6:	9507      	str	r5, [sp, #28]
 8000fd8:	f107 0520 	add.w	r5, r7, #32
 8000fdc:	9506      	str	r5, [sp, #24]
 8000fde:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8000fe2:	9505      	str	r5, [sp, #20]
 8000fe4:	9404      	str	r4, [sp, #16]
 8000fe6:	9003      	str	r0, [sp, #12]
 8000fe8:	9102      	str	r1, [sp, #8]
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	4643      	mov	r3, r8
 8000ff0:	4672      	mov	r2, lr
 8000ff2:	4661      	mov	r1, ip
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	f000 fe79 	bl	8001cec <getCalibratedMag>
				maxMagY, minMagZ, maxMagZ, &calibratedMagX, &calibratedMagY,
				&calibratedMagZ);

		calculateRollPitchYaw(calibratedAccelX, calibratedAccelY,
 8000ffa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000ffe:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001002:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001006:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800100a:	edd7 5a07 	vldr	s11, [r7, #28]
 800100e:	ed97 5a08 	vldr	s10, [r7, #32]
 8001012:	463a      	mov	r2, r7
 8001014:	f107 0108 	add.w	r1, r7, #8
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	eef0 2a45 	vmov.f32	s5, s10
 8001022:	eeb0 2a65 	vmov.f32	s4, s11
 8001026:	eef0 1a46 	vmov.f32	s3, s12
 800102a:	eeb0 1a66 	vmov.f32	s2, s13
 800102e:	eef0 0a47 	vmov.f32	s1, s14
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	f000 ff63 	bl	8001f00 <calculateRollPitchYaw>
				calibratedAccelZ, calibratedMagX, calibratedMagZ,
				calibratedMagY, &rollRad, &pitchRad, &yawRad);

		eularToQuaternion(rollRad, pitchRad, yawRad);
 800103a:	ed97 7b04 	vldr	d7, [r7, #16]
 800103e:	ed97 6b02 	vldr	d6, [r7, #8]
 8001042:	ed97 5b00 	vldr	d5, [r7]
 8001046:	eeb0 2a45 	vmov.f32	s4, s10
 800104a:	eef0 2a65 	vmov.f32	s5, s11
 800104e:	eeb0 1a46 	vmov.f32	s2, s12
 8001052:	eef0 1a66 	vmov.f32	s3, s13
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	eef0 0a67 	vmov.f32	s1, s15
 800105e:	f001 f969 	bl	8002334 <eularToQuaternion>
	while (1) {
 8001062:	bf00      	nop
 8001064:	e74d      	b.n	8000f02 <main+0x42>
 8001066:	bf00      	nop
 8001068:	20000138 	.word	0x20000138
 800106c:	20000134 	.word	0x20000134
 8001070:	20000130 	.word	0x20000130
 8001074:	20000150 	.word	0x20000150
 8001078:	2000014c 	.word	0x2000014c
 800107c:	20000148 	.word	0x20000148
 8001080:	20000144 	.word	0x20000144
 8001084:	20000140 	.word	0x20000140
 8001088:	2000013c 	.word	0x2000013c
 800108c:	2000000a 	.word	0x2000000a
 8001090:	20000008 	.word	0x20000008
 8001094:	20000006 	.word	0x20000006
 8001098:	20000004 	.word	0x20000004
 800109c:	20000002 	.word	0x20000002
 80010a0:	20000000 	.word	0x20000000

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	@ 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2234      	movs	r2, #52	@ 0x34
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f94c 	bl	8005350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <SystemClock_Config+0xdc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001180 <SystemClock_Config+0xdc>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <SystemClock_Config+0xdc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <SystemClock_Config+0xe0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <SystemClock_Config+0xe0>)
 80010ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <SystemClock_Config+0xe0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001104:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001108:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001118:	23b4      	movs	r3, #180	@ 0xb4
 800111a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fbad 	bl	800488c <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x98>
		Error_Handler();
 8001138:	f001 fa30 	bl	800259c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800113c:	f003 f80c 	bl	8004158 <HAL_PWREx_EnableOverDrive>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xa6>
		Error_Handler();
 8001146:	f001 fa29 	bl	800259c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001156:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800115a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001160:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2105      	movs	r1, #5
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f845 	bl	80041f8 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xd4>
		Error_Handler();
 8001174:	f001 fa12 	bl	800259c <Error_Handler>
	}
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	@ 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f001 fe3d 	bl	8002e44 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011d0:	f001 f9e4 	bl	800259c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000094 	.word	0x20000094
 80011dc:	40005400 	.word	0x40005400
 80011e0:	00061a80 	.word	0x00061a80

080011e4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f003 fdd4 	bl	8004dc8 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001226:	f001 f9b9 	bl	800259c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000e8 	.word	0x200000e8
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a2c      	ldr	r2, [pc, #176]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_GPIO_Init+0xd0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	4812      	ldr	r0, [pc, #72]	@ (800130c <MX_GPIO_Init+0xd4>)
 80012c4:	f001 fda4 	bl	8002e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_GPIO_Init+0xd8>)
 80012e0:	f001 fc02 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80012e4:	2320      	movs	r3, #32
 80012e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_GPIO_Init+0xd4>)
 80012fc:	f001 fbf4 	bl	8002ae8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020800 	.word	0x40020800

08001314 <initMPU6050>:

/* USER CODE BEGIN 4 */
void initMPU6050(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af04      	add	r7, sp, #16
	//int eror = 0;
	uint8_t buffer;
	//MPU6050 Uyku modundan çık ve başlat
	buffer = 0x00;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, PWR_MGMT_1_REG, 1, &buffer,
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	226b      	movs	r2, #107	@ 0x6b
 8001330:	21d0      	movs	r1, #208	@ 0xd0
 8001332:	481e      	ldr	r0, [pc, #120]	@ (80013ac <initMPU6050+0x98>)
 8001334:	f002 f9fa 	bl	800372c <HAL_I2C_Mem_Write>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <initMPU6050+0x34>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <initMPU6050+0x9c>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001344:	f001 f92a 	bl	800259c <Error_Handler>
	}

	// GYRO CNFG --> +-500 derece/saniye -->08
	buffer = 0x08;
 8001348:	2308      	movs	r3, #8
 800134a:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, GYRO_CNFG_REG, 1, &buffer,
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	221b      	movs	r2, #27
 800135e:	21d0      	movs	r1, #208	@ 0xd0
 8001360:	4812      	ldr	r0, [pc, #72]	@ (80013ac <initMPU6050+0x98>)
 8001362:	f002 f9e3 	bl	800372c <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <initMPU6050+0x62>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 2;
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <initMPU6050+0x9c>)
 800136e:	2202      	movs	r2, #2
 8001370:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001372:	f001 f913 	bl	800259c <Error_Handler>
	}

	// ACC CNFG --> +-8g -->10
	buffer = 0x10;
 8001376:	2310      	movs	r3, #16
 8001378:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, ACC_CNFG_REG, 1, &buffer,
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2301      	movs	r3, #1
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	221c      	movs	r2, #28
 800138c:	21d0      	movs	r1, #208	@ 0xd0
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <initMPU6050+0x98>)
 8001390:	f002 f9cc 	bl	800372c <HAL_I2C_Mem_Write>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <initMPU6050+0x90>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 3;
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <initMPU6050+0x9c>)
 800139c:	2203      	movs	r2, #3
 800139e:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80013a0:	f001 f8fc 	bl	800259c <Error_Handler>
	}

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000094 	.word	0x20000094
 80013b0:	200001a8 	.word	0x200001a8

080013b4 <readAccelMPU6050>:
void readAccelMPU6050(int16_t *rawAccelX, int16_t *rawAccelY,
		int16_t *rawAccelZ) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]

	uint8_t bufferAccel[6];
	// belirttiğim adresten itibaren veri bana gönder emri
	bufferAccel[0] = 0x3B;
 80013c0:	233b      	movs	r3, #59	@ 0x3b
 80013c2:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, bufferAccel, 1,
 80013c4:	f107 0210 	add.w	r2, r7, #16
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	21d0      	movs	r1, #208	@ 0xd0
 80013d2:	4816      	ldr	r0, [pc, #88]	@ (800142c <readAccelMPU6050+0x78>)
 80013d4:	f001 fe7a 	bl	80030cc <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	// 6 tane byte al
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR << 1, bufferAccel, 6,
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2306      	movs	r3, #6
 80013e4:	21d0      	movs	r1, #208	@ 0xd0
 80013e6:	4811      	ldr	r0, [pc, #68]	@ (800142c <readAccelMPU6050+0x78>)
 80013e8:	f001 ff6e 	bl	80032c8 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);

	*rawAccelX = (bufferAccel[0] << 8 | bufferAccel[1]);
 80013ec:	7c3b      	ldrb	r3, [r7, #16]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7c7b      	ldrb	r3, [r7, #17]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	801a      	strh	r2, [r3, #0]
	*rawAccelY = (bufferAccel[2] << 8 | bufferAccel[3]);
 80013fe:	7cbb      	ldrb	r3, [r7, #18]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7cfb      	ldrb	r3, [r7, #19]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	801a      	strh	r2, [r3, #0]
	*rawAccelZ = (bufferAccel[4] << 8 | bufferAccel[5]);
 8001410:	7d3b      	ldrb	r3, [r7, #20]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	801a      	strh	r2, [r3, #0]

}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000094 	.word	0x20000094

08001430 <readGyroMPU6050>:
void readGyroMPU6050(int16_t *rawGyroX, int16_t *rawGyroY, int16_t *rawGyroZ) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	// belirttiğim adresten itibaren veri bana gönder emri
	uint8_t bufferGyro[6];
	bufferGyro[0] = 0x43;
 800143c:	2343      	movs	r3, #67	@ 0x43
 800143e:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, bufferGyro, 1,
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	21d0      	movs	r1, #208	@ 0xd0
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <readGyroMPU6050+0x78>)
 8001450:	f001 fe3c 	bl	80030cc <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	// 6 tane byte al
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR << 1, bufferGyro, 6,
 8001454:	f107 0210 	add.w	r2, r7, #16
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2306      	movs	r3, #6
 8001460:	21d0      	movs	r1, #208	@ 0xd0
 8001462:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <readGyroMPU6050+0x78>)
 8001464:	f001 ff30 	bl	80032c8 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);

	*rawGyroX = (bufferGyro[0] << 8 | bufferGyro[1]);
 8001468:	7c3b      	ldrb	r3, [r7, #16]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	7c7b      	ldrb	r3, [r7, #17]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21a      	sxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	801a      	strh	r2, [r3, #0]
	*rawGyroY = (bufferGyro[2] << 8 | bufferGyro[3]);
 800147a:	7cbb      	ldrb	r3, [r7, #18]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21a      	sxth	r2, r3
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21a      	sxth	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	801a      	strh	r2, [r3, #0]
	*rawGyroZ = (bufferGyro[4] << 8 | bufferGyro[5]);
 800148c:	7d3b      	ldrb	r3, [r7, #20]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	801a      	strh	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000094 	.word	0x20000094

080014ac <CalibrationGyro>:

void CalibrationGyro(float *offsetGyroX, float *offsetGyroY, float *offsetGyroZ) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]

	int16_t rawGyroX, rawGyroY, rawGyroZ;
	for (int i = 0; i < 4000; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e038      	b.n	8001530 <CalibrationGyro+0x84>

		readGyroMPU6050(&rawGyroX, &rawGyroY, &rawGyroZ);
 80014be:	f107 0216 	add.w	r2, r7, #22
 80014c2:	f107 0118 	add.w	r1, r7, #24
 80014c6:	f107 031a 	add.w	r3, r7, #26
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffb0 	bl	8001430 <readGyroMPU6050>
		*offsetGyroX += rawGyroX;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	edc3 7a00 	vstr	s15, [r3]
		*offsetGyroY += rawGyroY;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	edc3 7a00 	vstr	s15, [r3]
		*offsetGyroZ += rawGyroZ;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f001 f9d5 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001536:	dbc2      	blt.n	80014be <CalibrationGyro+0x12>
	}
	*offsetGyroX /= 4000.0;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800157c <CalibrationGyro+0xd0>
 8001542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	edc3 7a00 	vstr	s15, [r3]
	*offsetGyroY /= 4000.0;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	ed93 7a00 	vldr	s14, [r3]
 8001552:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800157c <CalibrationGyro+0xd0>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	edc3 7a00 	vstr	s15, [r3]
	*offsetGyroZ /= 4000.0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800157c <CalibrationGyro+0xd0>
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	edc3 7a00 	vstr	s15, [r3]
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	457a0000 	.word	0x457a0000

08001580 <getCalibratedGyro>:
void getCalibratedGyro(int16_t rawGyroX, int16_t rawGyroY, int16_t rawGyroZ,
		float *calibratedGyroX, float *calibratedGyroY, float *calibratedGyroZ) {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4603      	mov	r3, r0
 800158a:	81fb      	strh	r3, [r7, #14]
 800158c:	460b      	mov	r3, r1
 800158e:	81bb      	strh	r3, [r7, #12]
 8001590:	4613      	mov	r3, r2
 8001592:	817b      	strh	r3, [r7, #10]

	*calibratedGyroX = (rawGyroX - offsetGyroX) / 65.5f; // /65.5 derece/saniye cinsinden dönüşümü için gerekli adım
 8001594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <getCalibratedGyro+0x8c>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015aa:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001610 <getCalibratedGyro+0x90>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	edc3 7a00 	vstr	s15, [r3]
	*calibratedGyroY = (rawGyroY - offsetGyroY) / 65.5f;
 80015b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <getCalibratedGyro+0x94>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ce:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001610 <getCalibratedGyro+0x90>
 80015d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
	*calibratedGyroZ = (rawGyroZ - offsetGyroZ) / 65.5f;
 80015dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <getCalibratedGyro+0x98>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001610 <getCalibratedGyro+0x90>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	edc3 7a00 	vstr	s15, [r3]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000130 	.word	0x20000130
 8001610:	42830000 	.word	0x42830000
 8001614:	20000134 	.word	0x20000134
 8001618:	20000138 	.word	0x20000138

0800161c <CalibrationAccel>:
void CalibrationAccel(float *scaleCorrectionFactorX,
		float *scaleCorrectionFactorY, float *scaleCorrectionFactorZ,
		float *offsetX, float *offsetY, float *offsetZ) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	@ 0x50
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]

	// Zamanlama
	uint32_t LoopTimer;

	int16_t minAccelX = 32767, maxAccelX = -32768;
 800162a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800162e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001636:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t minAccelY = 32767, maxAccelY = -32768;
 800163a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800163e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001646:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	int16_t minAccelZ = 32767, maxAccelZ = -32768;
 800164a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800164e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001656:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	int16_t rawX, rawY, rawZ;
	LoopTimer = HAL_GetTick();
 800165a:	f001 f92f 	bl	80028bc <HAL_GetTick>
 800165e:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 1;
 8001660:	4b99      	ldr	r3, [pc, #612]	@ (80018c8 <CalibrationAccel+0x2ac>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
	while (HAL_GetTick() - LoopTimer < 4000)
 8001666:	bf00      	nop
 8001668:	f001 f928 	bl	80028bc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001676:	d3f7      	bcc.n	8001668 <CalibrationAccel+0x4c>
		;  // Bekle
	state = 2;
 8001678:	4b93      	ldr	r3, [pc, #588]	@ (80018c8 <CalibrationAccel+0x2ac>)
 800167a:	2202      	movs	r2, #2
 800167c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 4000; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	@ 0x40
 8001682:	e020      	b.n	80016c6 <CalibrationAccel+0xaa>
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 8001684:	f107 0212 	add.w	r2, r7, #18
 8001688:	f107 0114 	add.w	r1, r7, #20
 800168c:	f107 0316 	add.w	r3, r7, #22
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe8f 	bl	80013b4 <readAccelMPU6050>
		if (rawX > maxAccelX)
 8001696:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800169a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800169e:	429a      	cmp	r2, r3
 80016a0:	da02      	bge.n	80016a8 <CalibrationAccel+0x8c>
			maxAccelX = rawX;
 80016a2:	8afb      	ldrh	r3, [r7, #22]
 80016a4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		if (rawX < minAccelX)
 80016a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ac:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dd02      	ble.n	80016ba <CalibrationAccel+0x9e>
			minAccelX = rawX;
 80016b4:	8afb      	ldrh	r3, [r7, #22]
 80016b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

		HAL_Delay(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f001 f90a 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 80016c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c2:	3301      	adds	r3, #1
 80016c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80016cc:	dbda      	blt.n	8001684 <CalibrationAccel+0x68>
	}
	LoopTimer = HAL_GetTick();
 80016ce:	f001 f8f5 	bl	80028bc <HAL_GetTick>
 80016d2:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 3;
 80016d4:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - LoopTimer < 4000)
 80016da:	bf00      	nop
 80016dc:	f001 f8ee 	bl	80028bc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80016ea:	d3f7      	bcc.n	80016dc <CalibrationAccel+0xc0>
		;  //Bekle
	state = 4;
 80016ec:	4b76      	ldr	r3, [pc, #472]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4000; i++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016f6:	e020      	b.n	800173a <CalibrationAccel+0x11e>
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 80016f8:	f107 0212 	add.w	r2, r7, #18
 80016fc:	f107 0114 	add.w	r1, r7, #20
 8001700:	f107 0316 	add.w	r3, r7, #22
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe55 	bl	80013b4 <readAccelMPU6050>
		if (rawX > maxAccelX)
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001712:	429a      	cmp	r2, r3
 8001714:	da02      	bge.n	800171c <CalibrationAccel+0x100>
			maxAccelX = rawX;
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		if (rawX < minAccelX)
 800171c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001720:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001724:	429a      	cmp	r2, r3
 8001726:	dd02      	ble.n	800172e <CalibrationAccel+0x112>
			minAccelX = rawX;
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

		HAL_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f001 f8d0 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 8001734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001736:	3301      	adds	r3, #1
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800173a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800173c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001740:	dbda      	blt.n	80016f8 <CalibrationAccel+0xdc>
	}
	LoopTimer = HAL_GetTick();
 8001742:	f001 f8bb 	bl	80028bc <HAL_GetTick>
 8001746:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 5;
 8001748:	4b5f      	ldr	r3, [pc, #380]	@ (80018c8 <CalibrationAccel+0x2ac>)
 800174a:	2205      	movs	r2, #5
 800174c:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - LoopTimer < 4000)
 800174e:	bf00      	nop
 8001750:	f001 f8b4 	bl	80028bc <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800175e:	d3f7      	bcc.n	8001750 <CalibrationAccel+0x134>
		;  //Bekle
	state = 6;
 8001760:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <CalibrationAccel+0x2ac>)
 8001762:	2206      	movs	r2, #6
 8001764:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4000; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800176a:	e020      	b.n	80017ae <CalibrationAccel+0x192>
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 800176c:	f107 0212 	add.w	r2, r7, #18
 8001770:	f107 0114 	add.w	r1, r7, #20
 8001774:	f107 0316 	add.w	r3, r7, #22
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fe1b 	bl	80013b4 <readAccelMPU6050>
		if (rawY > maxAccelY)
 800177e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001782:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001786:	429a      	cmp	r2, r3
 8001788:	da02      	bge.n	8001790 <CalibrationAccel+0x174>
			maxAccelY = rawY;
 800178a:	8abb      	ldrh	r3, [r7, #20]
 800178c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		if (rawY < minAccelY)
 8001790:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001794:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001798:	429a      	cmp	r2, r3
 800179a:	dd02      	ble.n	80017a2 <CalibrationAccel+0x186>
			minAccelY = rawY;
 800179c:	8abb      	ldrh	r3, [r7, #20]
 800179e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

		HAL_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f001 f896 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 80017a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017aa:	3301      	adds	r3, #1
 80017ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80017b4:	dbda      	blt.n	800176c <CalibrationAccel+0x150>
	}
	LoopTimer = HAL_GetTick();
 80017b6:	f001 f881 	bl	80028bc <HAL_GetTick>
 80017ba:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 7;
 80017bc:	4b42      	ldr	r3, [pc, #264]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80017be:	2207      	movs	r2, #7
 80017c0:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - LoopTimer < 4000)
 80017c2:	bf00      	nop
 80017c4:	f001 f87a 	bl	80028bc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80017d2:	d3f7      	bcc.n	80017c4 <CalibrationAccel+0x1a8>
		;  //Bekle
	state = 8;
 80017d4:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80017d6:	2208      	movs	r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4000; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017de:	e020      	b.n	8001822 <CalibrationAccel+0x206>
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 80017e0:	f107 0212 	add.w	r2, r7, #18
 80017e4:	f107 0114 	add.w	r1, r7, #20
 80017e8:	f107 0316 	add.w	r3, r7, #22
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fde1 	bl	80013b4 <readAccelMPU6050>
		if (rawY > maxAccelY)
 80017f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017f6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80017fa:	429a      	cmp	r2, r3
 80017fc:	da02      	bge.n	8001804 <CalibrationAccel+0x1e8>
			maxAccelY = rawY;
 80017fe:	8abb      	ldrh	r3, [r7, #20]
 8001800:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		if (rawY < minAccelY)
 8001804:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001808:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 800180c:	429a      	cmp	r2, r3
 800180e:	dd02      	ble.n	8001816 <CalibrationAccel+0x1fa>
			minAccelY = rawY;
 8001810:	8abb      	ldrh	r3, [r7, #20]
 8001812:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

		HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f001 f85c 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 800181c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181e:	3301      	adds	r3, #1
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
 8001822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001824:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001828:	dbda      	blt.n	80017e0 <CalibrationAccel+0x1c4>
	}
	LoopTimer = HAL_GetTick();
 800182a:	f001 f847 	bl	80028bc <HAL_GetTick>
 800182e:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 9;
 8001830:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <CalibrationAccel+0x2ac>)
 8001832:	2209      	movs	r2, #9
 8001834:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - LoopTimer < 4000)
 8001836:	bf00      	nop
 8001838:	f001 f840 	bl	80028bc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001846:	d3f7      	bcc.n	8001838 <CalibrationAccel+0x21c>
		;  //Bekle
	state = 10;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <CalibrationAccel+0x2ac>)
 800184a:	220a      	movs	r2, #10
 800184c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4000; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
 8001852:	e020      	b.n	8001896 <CalibrationAccel+0x27a>
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 8001854:	f107 0212 	add.w	r2, r7, #18
 8001858:	f107 0114 	add.w	r1, r7, #20
 800185c:	f107 0316 	add.w	r3, r7, #22
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fda7 	bl	80013b4 <readAccelMPU6050>
		if (rawZ > maxAccelZ)
 8001866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800186a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 800186e:	429a      	cmp	r2, r3
 8001870:	da02      	bge.n	8001878 <CalibrationAccel+0x25c>
			maxAccelZ = rawZ;
 8001872:	8a7b      	ldrh	r3, [r7, #18]
 8001874:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		if (rawZ < minAccelZ)
 8001878:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800187c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8001880:	429a      	cmp	r2, r3
 8001882:	dd02      	ble.n	800188a <CalibrationAccel+0x26e>
			minAccelZ = rawZ;
 8001884:	8a7b      	ldrh	r3, [r7, #18]
 8001886:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		HAL_Delay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f001 f822 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 8001890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001892:	3301      	adds	r3, #1
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
 8001896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001898:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800189c:	dbda      	blt.n	8001854 <CalibrationAccel+0x238>
	}
	LoopTimer = HAL_GetTick();
 800189e:	f001 f80d 	bl	80028bc <HAL_GetTick>
 80018a2:	62b8      	str	r0, [r7, #40]	@ 0x28
	state = 11;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80018a6:	220b      	movs	r2, #11
 80018a8:	601a      	str	r2, [r3, #0]

	while (HAL_GetTick() - LoopTimer < 4000)
 80018aa:	bf00      	nop
 80018ac:	f001 f806 	bl	80028bc <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80018ba:	d3f7      	bcc.n	80018ac <CalibrationAccel+0x290>
		;  //Bekle
	state = 12;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <CalibrationAccel+0x2ac>)
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4000; i++) {
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c6:	e022      	b.n	800190e <CalibrationAccel+0x2f2>
 80018c8:	200001ac 	.word	0x200001ac
		readAccelMPU6050(&rawX, &rawY, &rawZ);
 80018cc:	f107 0212 	add.w	r2, r7, #18
 80018d0:	f107 0114 	add.w	r1, r7, #20
 80018d4:	f107 0316 	add.w	r3, r7, #22
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd6b 	bl	80013b4 <readAccelMPU6050>
		if (rawZ > maxAccelZ)
 80018de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e2:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 80018e6:	429a      	cmp	r2, r3
 80018e8:	da02      	bge.n	80018f0 <CalibrationAccel+0x2d4>
			maxAccelZ = rawZ;
 80018ea:	8a7b      	ldrh	r3, [r7, #18]
 80018ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		if (rawZ < minAccelZ)
 80018f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dd02      	ble.n	8001902 <CalibrationAccel+0x2e6>
			minAccelZ = rawZ;
 80018fc:	8a7b      	ldrh	r3, [r7, #18]
 80018fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 ffe6 	bl	80028d4 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 8001908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190a:	3301      	adds	r3, #1
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001914:	dbda      	blt.n	80018cc <CalibrationAccel+0x2b0>
	}

	// Offset hesapla (Hard Iron Düzeltmesi)
	*offsetX = (maxAccelX + minAccelX) / 2.0;
 8001916:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800191a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800191e:	4413      	add	r3, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fdc3 	bl	80004ac <__aeabi_i2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800192e:	f7fe ff51 	bl	80007d4 <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f8f9 	bl	8000b30 <__aeabi_d2f>
 800193e:	4602      	mov	r2, r0
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	601a      	str	r2, [r3, #0]
	*offsetY = (maxAccelY + minAccelY) / 2.0;
 8001944:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001948:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800194c:	4413      	add	r3, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdac 	bl	80004ac <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800195c:	f7fe ff3a 	bl	80007d4 <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f8e2 	bl	8000b30 <__aeabi_d2f>
 800196c:	4602      	mov	r2, r0
 800196e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001970:	601a      	str	r2, [r3, #0]
	*offsetZ = (maxAccelZ + minAccelZ) / 2.0;
 8001972:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8001976:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800197a:	4413      	add	r3, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd95 	bl	80004ac <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800198a:	f7fe ff23 	bl	80007d4 <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f8cb 	bl	8000b30 <__aeabi_d2f>
 800199a:	4602      	mov	r2, r0
 800199c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800199e:	601a      	str	r2, [r3, #0]

	// Ölçek hesapla (Soft Iron Düzeltmesi)
	float scaleX = (maxAccelX - minAccelX) / 2.0;
 80019a0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 80019a4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd7e 	bl	80004ac <__aeabi_i2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b8:	f7fe ff0c 	bl	80007d4 <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f8b4 	bl	8000b30 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
	float scaleY = (maxAccelY - minAccelY) / 2.0;
 80019cc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80019d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd68 	bl	80004ac <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e4:	f7fe fef6 	bl	80007d4 <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f89e 	bl	8000b30 <__aeabi_d2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	623b      	str	r3, [r7, #32]
	float scaleZ = (maxAccelZ - minAccelZ) / 2.0;
 80019f8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 80019fc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd52 	bl	80004ac <__aeabi_i2d>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a10:	f7fe fee0 	bl	80007d4 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f888 	bl	8000b30 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	61fb      	str	r3, [r7, #28]
	float avgScale = (scaleX + scaleY + scaleZ) / 3.0;
 8001a24:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a38:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

	// ölçek düzeltme faktör değerleri hesapla
	*scaleCorrectionFactorX = avgScale / scaleX;
 8001a44:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a48:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	*scaleCorrectionFactorY = avgScale / scaleY;
 8001a56:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	edc3 7a00 	vstr	s15, [r3]
	*scaleCorrectionFactorZ = avgScale / scaleZ;
 8001a68:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	edc3 7a00 	vstr	s15, [r3]

	state = 0;
 8001a7a:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <CalibrationAccel+0x46c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

}
 8001a80:	bf00      	nop
 8001a82:	3750      	adds	r7, #80	@ 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200001ac 	.word	0x200001ac

08001a8c <getCalibratedAccel>:

// Kalibre edilmiş ivmeölçer değerlerini hesapla
void getCalibratedAccel(int16_t rawAccelX, int16_t rawAccelY, int16_t rawAccelZ,
		float *calibratedAccelX, float *calibratedAccelY,
		float *calibratedAccelZ) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	4603      	mov	r3, r0
 8001a96:	81fb      	strh	r3, [r7, #14]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	81bb      	strh	r3, [r7, #12]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	817b      	strh	r3, [r7, #10]

	// Kalibre edilmiş değerleri hesapla
	*calibratedAccelX = (rawAccelX - offsetAccelX)
 8001aa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <getCalibratedAccel+0x94>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelX;
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <getCalibratedAccel+0x98>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
	*calibratedAccelX = (rawAccelX - offsetAccelX)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
	*calibratedAccelY = (rawAccelY - offsetAccelY)
 8001ac6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <getCalibratedAccel+0x9c>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelY;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <getCalibratedAccel+0xa0>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
	*calibratedAccelY = (rawAccelY - offsetAccelY)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
	*calibratedAccelZ = (rawAccelZ - offsetAccelZ)
 8001aec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <getCalibratedAccel+0xa4>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelZ;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <getCalibratedAccel+0xa8>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
	*calibratedAccelZ = (rawAccelZ - offsetAccelZ)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	edc3 7a00 	vstr	s15, [r3]

}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000148 	.word	0x20000148
 8001b24:	2000013c 	.word	0x2000013c
 8001b28:	2000014c 	.word	0x2000014c
 8001b2c:	20000140 	.word	0x20000140
 8001b30:	20000150 	.word	0x20000150
 8001b34:	20000144 	.word	0x20000144

08001b38 <initHMC5883L>:

// // HMC5883L ayarları
void initHMC5883L(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af04      	add	r7, sp, #16

	//int eror = 0;
	uint8_t buffer;
	// Mag CNFG -->  Config A register adresi --> HMC5883L_REG_CONFIG_A ---- Örnekleme oranı: 8G range, 200Hz ölçüm modu -->  0x1C
	buffer = 0x1C;
 8001b3e:	231c      	movs	r3, #28
 8001b40:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS << 1, HMC5883L_REG_CONFIG_A, 1, &buffer, 1,
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	2200      	movs	r2, #0
 8001b54:	213c      	movs	r1, #60	@ 0x3c
 8001b56:	481e      	ldr	r0, [pc, #120]	@ (8001bd0 <initHMC5883L+0x98>)
 8001b58:	f001 fde8 	bl	800372c <HAL_I2C_Mem_Write>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <initHMC5883L+0x34>
	HAL_MAX_DELAY) != HAL_OK) {
		eror = 4;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <initHMC5883L+0x9c>)
 8001b64:	2204      	movs	r2, #4
 8001b66:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001b68:	f000 fd18 	bl	800259c <Error_Handler>
	}

	// Mag CNFG --> Config B register adresi --> HMC5883L_REG_CONFIG_B ---- Kazanç ayarı: ±1.3 Ga --> 0xA0
	buffer = 0xA0;
 8001b6c:	23a0      	movs	r3, #160	@ 0xa0
 8001b6e:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS << 1, HMC5883L_REG_CONFIG_B, 1, &buffer, 1,
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2301      	movs	r3, #1
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	2201      	movs	r2, #1
 8001b82:	213c      	movs	r1, #60	@ 0x3c
 8001b84:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <initHMC5883L+0x98>)
 8001b86:	f001 fdd1 	bl	800372c <HAL_I2C_Mem_Write>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <initHMC5883L+0x62>
	HAL_MAX_DELAY) != HAL_OK) {
		eror = 5;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <initHMC5883L+0x9c>)
 8001b92:	2205      	movs	r2, #5
 8001b94:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001b96:	f000 fd01 	bl	800259c <Error_Handler>
	}

	// Mag CNFG --> Mode register adresi --> HMC5883L_REG_MODE ---- Sürekli ölçüm modu --> 0x00
	buffer = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS << 1, HMC5883L_REG_MODE, 1, &buffer, 1,
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	2202      	movs	r2, #2
 8001bb0:	213c      	movs	r1, #60	@ 0x3c
 8001bb2:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <initHMC5883L+0x98>)
 8001bb4:	f001 fdba 	bl	800372c <HAL_I2C_Mem_Write>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <initHMC5883L+0x90>
	HAL_MAX_DELAY) != HAL_OK) {
		eror = 6;
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <initHMC5883L+0x9c>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001bc4:	f000 fcea 	bl	800259c <Error_Handler>
	}

}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000094 	.word	0x20000094
 8001bd4:	200001a8 	.word	0x200001a8

08001bd8 <readHMC5883L>:

// HMC5883L manyetometre verilerini oku
void readHMC5883L(int16_t *rawMagX, int16_t *rawMagY, int16_t *rawMagZ) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	// belirttiğim adresten itibaren veri bana gönder emri --- HMC5883L_REG_DATA_X_MSB = X ekseni MSB register adresi
	uint8_t bufferMag[6];
	bufferMag[0] = HMC5883L_REG_DATA_X_MSB;
 8001be4:	2303      	movs	r3, #3
 8001be6:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDRESS << 1, bufferMag, 1,
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	213c      	movs	r1, #60	@ 0x3c
 8001bf6:	4816      	ldr	r0, [pc, #88]	@ (8001c50 <readHMC5883L+0x78>)
 8001bf8:	f001 fa68 	bl	80030cc <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	// 6 tane byte al
	HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDRESS << 1, bufferMag, 6,
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2306      	movs	r3, #6
 8001c08:	213c      	movs	r1, #60	@ 0x3c
 8001c0a:	4811      	ldr	r0, [pc, #68]	@ (8001c50 <readHMC5883L+0x78>)
 8001c0c:	f001 fb5c 	bl	80032c8 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);

	*rawMagX = (bufferMag[0] << 8 | bufferMag[1]);
 8001c10:	7c3b      	ldrb	r3, [r7, #16]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7c7b      	ldrb	r3, [r7, #17]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	801a      	strh	r2, [r3, #0]
	*rawMagY = (bufferMag[2] << 8 | bufferMag[3]);
 8001c22:	7cbb      	ldrb	r3, [r7, #18]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	801a      	strh	r2, [r3, #0]
	*rawMagZ = (bufferMag[4] << 8 | bufferMag[5]);
 8001c34:	7d3b      	ldrb	r3, [r7, #20]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	7d7b      	ldrb	r3, [r7, #21]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	801a      	strh	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000094 	.word	0x20000094

08001c54 <updateCalibrationMag>:

//  manyetometre kalibrasyon verilerini güncelle
void updateCalibrationMag(int16_t rawMagX, int16_t rawMagY, int16_t rawMagZ,
		int16_t *minMagX, int16_t *maxMagX, int16_t *minMagY, int16_t *maxMagY,
		int16_t *minMagZ, int16_t *maxMagZ) {
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	460b      	mov	r3, r1
 8001c62:	81bb      	strh	r3, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	817b      	strh	r3, [r7, #10]
	if (rawMagX < *minMagX)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	da02      	bge.n	8001c7c <updateCalibrationMag+0x28>
		*minMagX = rawMagX;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	89fa      	ldrh	r2, [r7, #14]
 8001c7a:	801a      	strh	r2, [r3, #0]
	if (rawMagX > *maxMagX)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd02      	ble.n	8001c90 <updateCalibrationMag+0x3c>
		*maxMagX = rawMagX;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	89fa      	ldrh	r2, [r7, #14]
 8001c8e:	801a      	strh	r2, [r3, #0]
	if (rawMagY < *minMagY)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	da02      	bge.n	8001ca4 <updateCalibrationMag+0x50>
		*minMagY = rawMagY;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	89ba      	ldrh	r2, [r7, #12]
 8001ca2:	801a      	strh	r2, [r3, #0]
	if (rawMagY > *maxMagY)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dd02      	ble.n	8001cb8 <updateCalibrationMag+0x64>
		*maxMagY = rawMagY;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	89ba      	ldrh	r2, [r7, #12]
 8001cb6:	801a      	strh	r2, [r3, #0]
	if (rawMagZ < *minMagZ)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	da02      	bge.n	8001ccc <updateCalibrationMag+0x78>
		*minMagZ = rawMagZ;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	897a      	ldrh	r2, [r7, #10]
 8001cca:	801a      	strh	r2, [r3, #0]
	if (rawMagZ > *maxMagZ)
 8001ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dd02      	ble.n	8001ce0 <updateCalibrationMag+0x8c>
		*maxMagZ = rawMagZ;
 8001cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cdc:	897a      	ldrh	r2, [r7, #10]
 8001cde:	801a      	strh	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <getCalibratedMag>:

// Kalibre edilmiş Manyetometre değerlerini hesapla
void getCalibratedMag(int16_t rawMagX, int16_t rawMagY, int16_t rawMagZ,
		int16_t minMagX, int16_t maxMagX, int16_t minMagY, int16_t maxMagY,
		int16_t minMagZ, int16_t maxMagZ, float *calibratedMagX,
		float *calibratedMagY, float *calibratedMagZ) {
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	803b      	strh	r3, [r7, #0]
	// Offset hesapla (Hard Iron Düzeltmesi)
	offsetMagX = (maxMagX + minMagX) / 2.0;
 8001d0a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001d0e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d12:	4413      	add	r3, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fbc9 	bl	80004ac <__aeabi_i2d>
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d22:	f7fe fd57 	bl	80007d4 <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe feff 	bl	8000b30 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a6c      	ldr	r2, [pc, #432]	@ (8001ee8 <getCalibratedMag+0x1fc>)
 8001d36:	6013      	str	r3, [r2, #0]
	offsetMagY = (maxMagY + minMagY) / 2.0;
 8001d38:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8001d3c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001d40:	4413      	add	r3, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbb2 	bl	80004ac <__aeabi_i2d>
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d50:	f7fe fd40 	bl	80007d4 <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fee8 	bl	8000b30 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a62      	ldr	r2, [pc, #392]	@ (8001eec <getCalibratedMag+0x200>)
 8001d64:	6013      	str	r3, [r2, #0]
	offsetMagZ = (maxMagZ + minMagZ) / 2.0;
 8001d66:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001d6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001d6e:	4413      	add	r3, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb9b 	bl	80004ac <__aeabi_i2d>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d7e:	f7fe fd29 	bl	80007d4 <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fed1 	bl	8000b30 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <getCalibratedMag+0x204>)
 8001d92:	6013      	str	r3, [r2, #0]

	// Ölçek hesapla (Soft Iron Düzeltmesi)
	float scaleX = (maxMagX - minMagX) / 2.0;
 8001d94:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001d98:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fb84 	bl	80004ac <__aeabi_i2d>
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dac:	f7fe fd12 	bl	80007d4 <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe feba 	bl	8000b30 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]
	float scaleY = (maxMagY - minMagY) / 2.0;
 8001dc0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8001dc4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fb6e 	bl	80004ac <__aeabi_i2d>
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd8:	f7fe fcfc 	bl	80007d4 <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe fea4 	bl	8000b30 <__aeabi_d2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]
	float scaleZ = (maxMagZ - minMagZ) / 2.0;
 8001dec:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001df0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb58 	bl	80004ac <__aeabi_i2d>
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e04:	f7fe fce6 	bl	80007d4 <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe8e 	bl	8000b30 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]
	float avgScale = (scaleX + scaleY + scaleZ) / 3.0;
 8001e18:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e34:	edc7 7a02 	vstr	s15, [r7, #8]

	scaleCorrectionFactorMagX = (avgScale / scaleX);
 8001e38:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <getCalibratedMag+0x208>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]
	scaleCorrectionFactorMagY = (avgScale / scaleY);
 8001e4a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e56:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <getCalibratedMag+0x20c>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	scaleCorrectionFactorMagZ = (avgScale / scaleZ);
 8001e5c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e60:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <getCalibratedMag+0x210>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]

	// Kalibre edilmiş değerleri hesapla
	*calibratedMagX = (rawMagX - offsetMagX) * scaleCorrectionFactorMagX;
 8001e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <getCalibratedMag+0x1fc>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <getCalibratedMag+0x208>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e90:	edc3 7a00 	vstr	s15, [r3]
	*calibratedMagY = (rawMagY - offsetMagY) * scaleCorrectionFactorMagY;
 8001e94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <getCalibratedMag+0x200>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <getCalibratedMag+0x20c>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
	*calibratedMagZ = (rawMagZ - offsetMagZ) * scaleCorrectionFactorMagZ;
 8001eba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <getCalibratedMag+0x204>)
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <getCalibratedMag+0x210>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001edc:	edc3 7a00 	vstr	s15, [r3]

}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	20000160 	.word	0x20000160
 8001eec:	20000164 	.word	0x20000164
 8001ef0:	20000168 	.word	0x20000168
 8001ef4:	20000154 	.word	0x20000154
 8001ef8:	20000158 	.word	0x20000158
 8001efc:	2000015c 	.word	0x2000015c

08001f00 <calculateRollPitchYaw>:


// Eğim telafisi (Tilt Compensation), pitch, roll ve Yaw hesaplama
void calculateRollPitchYaw(float accelX, float accelY, float accelZ, float magX, float magY, float magZ, double *rollRad, double *pitchRad, double *yawRad) {
 8001f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f04:	b0a4      	sub	sp, #144	@ 0x90
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
 8001f0c:	edc7 0a0e 	vstr	s1, [r7, #56]	@ 0x38
 8001f10:	ed87 1a0d 	vstr	s2, [r7, #52]	@ 0x34
 8001f14:	edc7 1a0c 	vstr	s3, [r7, #48]	@ 0x30
 8001f18:	ed87 2a0b 	vstr	s4, [r7, #44]	@ 0x2c
 8001f1c:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f22:	6239      	str	r1, [r7, #32]
 8001f24:	61fa      	str	r2, [r7, #28]

	// değerleri normalleştir
	double normAccel =  sqrt(accelX*accelX + accelY*accelY + accelZ*accelZ);
 8001f26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f2a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f2e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001f32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f46:	ee17 0a90 	vmov	r0, s15
 8001f4a:	f7fe fac1 	bl	80004d0 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	ec43 2b10 	vmov	d0, r2, r3
 8001f56:	f003 fa2f 	bl	80053b8 <sqrt>
 8001f5a:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
	double	ax = accelX/normAccel;
 8001f5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f60:	f7fe fab6 	bl	80004d0 <__aeabi_f2d>
 8001f64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f68:	f7fe fc34 	bl	80007d4 <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double	ay = accelY/normAccel;
 8001f74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f76:	f7fe faab 	bl	80004d0 <__aeabi_f2d>
 8001f7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f7e:	f7fe fc29 	bl	80007d4 <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double	az = accelZ/normAccel;
 8001f8a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f8c:	f7fe faa0 	bl	80004d0 <__aeabi_f2d>
 8001f90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f94:	f7fe fc1e 	bl	80007d4 <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	double normMag =  sqrt(magX*magX + magY*magY + magZ*magZ);
 8001fa0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fa4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fa8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001fac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001fb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	ee17 0a90 	vmov	r0, s15
 8001fc4:	f7fe fa84 	bl	80004d0 <__aeabi_f2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	ec43 2b10 	vmov	d0, r2, r3
 8001fd0:	f003 f9f2 	bl	80053b8 <sqrt>
 8001fd4:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	double	mx = magX/normMag;
 8001fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fda:	f7fe fa79 	bl	80004d0 <__aeabi_f2d>
 8001fde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001fe2:	f7fe fbf7 	bl	80007d4 <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double	my = magY/normMag;
 8001fee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ff0:	f7fe fa6e 	bl	80004d0 <__aeabi_f2d>
 8001ff4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001ff8:	f7fe fbec 	bl	80007d4 <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double	mz = magZ/normMag;
 8002004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002006:	f7fe fa63 	bl	80004d0 <__aeabi_f2d>
 800200a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800200e:	f7fe fbe1 	bl	80007d4 <__aeabi_ddiv>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	/// Roll ve Pitch açılarını hesapla (Radyan)
	*rollRad = atan2(ay,sqrt(ax * ax + az * az));
 800201a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800201e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002022:	f7fe faad 	bl	8000580 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4614      	mov	r4, r2
 800202c:	461d      	mov	r5, r3
 800202e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002032:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002036:	f7fe faa3 	bl	8000580 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe f8e7 	bl	8000214 <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	ec43 2b17 	vmov	d7, r2, r3
 800204e:	eeb0 0a47 	vmov.f32	s0, s14
 8002052:	eef0 0a67 	vmov.f32	s1, s15
 8002056:	f003 f9af 	bl	80053b8 <sqrt>
 800205a:	eeb0 7a40 	vmov.f32	s14, s0
 800205e:	eef0 7a60 	vmov.f32	s15, s1
 8002062:	eeb0 1a47 	vmov.f32	s2, s14
 8002066:	eef0 1a67 	vmov.f32	s3, s15
 800206a:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 800206e:	f003 f9a1 	bl	80053b4 <atan2>
 8002072:	eeb0 7a40 	vmov.f32	s14, s0
 8002076:	eef0 7a60 	vmov.f32	s15, s1
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	ed83 7b00 	vstr	d7, [r3]
	*pitchRad = atan2(-ax,sqrt(ay * ay + az * az)); //radyan cinsinden
 8002080:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800208a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002094:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002098:	f7fe fa72 	bl	8000580 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	461d      	mov	r5, r3
 80020a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80020ac:	f7fe fa68 	bl	8000580 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe f8ac 	bl	8000214 <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	ec43 2b17 	vmov	d7, r2, r3
 80020c4:	eeb0 0a47 	vmov.f32	s0, s14
 80020c8:	eef0 0a67 	vmov.f32	s1, s15
 80020cc:	f003 f974 	bl	80053b8 <sqrt>
 80020d0:	eeb0 7a40 	vmov.f32	s14, s0
 80020d4:	eef0 7a60 	vmov.f32	s15, s1
 80020d8:	eeb0 1a47 	vmov.f32	s2, s14
 80020dc:	eef0 1a67 	vmov.f32	s3, s15
 80020e0:	ed97 0b04 	vldr	d0, [r7, #16]
 80020e4:	f003 f966 	bl	80053b4 <atan2>
 80020e8:	eeb0 7a40 	vmov.f32	s14, s0
 80020ec:	eef0 7a60 	vmov.f32	s15, s1
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	ed83 7b00 	vstr	d7, [r3]


	//Tilt Combinsation (Eğim telafisi hesapla)
	double bx = mx * cos(*pitchRad) + mz * sin(*pitchRad);
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	ed93 7b00 	vldr	d7, [r3]
 80020fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002100:	eef0 0a67 	vmov.f32	s1, s15
 8002104:	f003 f984 	bl	8005410 <cos>
 8002108:	ec51 0b10 	vmov	r0, r1, d0
 800210c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002110:	f7fe fa36 	bl	8000580 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4614      	mov	r4, r2
 800211a:	461d      	mov	r5, r3
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	ed93 7b00 	vldr	d7, [r3]
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	eef0 0a67 	vmov.f32	s1, s15
 800212a:	f003 f9c5 	bl	80054b8 <sin>
 800212e:	ec51 0b10 	vmov	r0, r1, d0
 8002132:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002136:	f7fe fa23 	bl	8000580 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe f867 	bl	8000214 <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double by = mx * sin(*rollRad) * sin(*pitchRad)+my * cos(*rollRad)-mz * sin(*rollRad) * cos(*pitchRad);
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	ed93 7b00 	vldr	d7, [r3]
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f003 f9ac 	bl	80054b8 <sin>
 8002160:	ec51 0b10 	vmov	r0, r1, d0
 8002164:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002168:	f7fe fa0a 	bl	8000580 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4614      	mov	r4, r2
 8002172:	461d      	mov	r5, r3
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	ed93 7b00 	vldr	d7, [r3]
 800217a:	eeb0 0a47 	vmov.f32	s0, s14
 800217e:	eef0 0a67 	vmov.f32	s1, s15
 8002182:	f003 f999 	bl	80054b8 <sin>
 8002186:	ec53 2b10 	vmov	r2, r3, d0
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f7fe f9f7 	bl	8000580 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4614      	mov	r4, r2
 8002198:	461d      	mov	r5, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	ed93 7b00 	vldr	d7, [r3]
 80021a0:	eeb0 0a47 	vmov.f32	s0, s14
 80021a4:	eef0 0a67 	vmov.f32	s1, s15
 80021a8:	f003 f932 	bl	8005410 <cos>
 80021ac:	ec51 0b10 	vmov	r0, r1, d0
 80021b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021b4:	f7fe f9e4 	bl	8000580 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe f828 	bl	8000214 <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	ed93 7b00 	vldr	d7, [r3]
 80021d2:	eeb0 0a47 	vmov.f32	s0, s14
 80021d6:	eef0 0a67 	vmov.f32	s1, s15
 80021da:	f003 f96d 	bl	80054b8 <sin>
 80021de:	ec51 0b10 	vmov	r0, r1, d0
 80021e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021e6:	f7fe f9cb 	bl	8000580 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	4699      	mov	r9, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	ed93 7b00 	vldr	d7, [r3]
 80021f8:	eeb0 0a47 	vmov.f32	s0, s14
 80021fc:	eef0 0a67 	vmov.f32	s1, s15
 8002200:	f003 f906 	bl	8005410 <cos>
 8002204:	ec53 2b10 	vmov	r2, r3, d0
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fe f9b8 	bl	8000580 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fd fffa 	bl	8000210 <__aeabi_dsub>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	//double bx = mx * cos(*rollRad) + sin(*rollRad)*(my * sin(*pitchRad) + mz * cos(*pitchRad));
	//double by = mz * sin(*pitchRad) - my * cos(*pitchRad);

	// X ve Y eksenlerinden Yaw (heading/azimut) açısını hesapla
	*yawRad = atan2(-by, -bx);
 8002224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002236:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	ed97 1b00 	vldr	d1, [r7]
 8002240:	ed97 0b02 	vldr	d0, [r7, #8]
 8002244:	f003 f8b6 	bl	80053b4 <atan2>
 8002248:	eeb0 7a40 	vmov.f32	s14, s0
 800224c:	eef0 7a60 	vmov.f32	s15, s1
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	ed83 7b00 	vstr	d7, [r3]

	roll = *rollRad* 180.0 / 3.141592654;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <calculateRollPitchYaw+0x420>)
 8002262:	f7fe f98d 	bl	8000580 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	a32a      	add	r3, pc, #168	@ (adr r3, 8002318 <calculateRollPitchYaw+0x418>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f7fe faae 	bl	80007d4 <__aeabi_ddiv>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4929      	ldr	r1, [pc, #164]	@ (8002324 <calculateRollPitchYaw+0x424>)
 800227e:	e9c1 2300 	strd	r2, r3, [r1]
	pitch = *pitchRad* 180.0 / 3.141592654;
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <calculateRollPitchYaw+0x420>)
 800228e:	f7fe f977 	bl	8000580 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a31f      	add	r3, pc, #124	@ (adr r3, 8002318 <calculateRollPitchYaw+0x418>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa98 	bl	80007d4 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	491f      	ldr	r1, [pc, #124]	@ (8002328 <calculateRollPitchYaw+0x428>)
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
	yaw = *yawRad* 180.0 / 3.141592654;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <calculateRollPitchYaw+0x420>)
 80022ba:	f7fe f961 	bl	8000580 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	a314      	add	r3, pc, #80	@ (adr r3, 8002318 <calculateRollPitchYaw+0x418>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe fa82 	bl	80007d4 <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4915      	ldr	r1, [pc, #84]	@ (800232c <calculateRollPitchYaw+0x42c>)
 80022d6:	e9c1 2300 	strd	r2, r3, [r1]
	if (yaw < 0)
 80022da:	4b14      	ldr	r3, [pc, #80]	@ (800232c <calculateRollPitchYaw+0x42c>)
 80022dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f7fe fbbc 	bl	8000a64 <__aeabi_dcmplt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <calculateRollPitchYaw+0x3f4>
		yaw += 360;  // 0-360 derece aralığına taşı
}
 80022f2:	e00c      	b.n	800230e <calculateRollPitchYaw+0x40e>
		yaw += 360;  // 0-360 derece aralığına taşı
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <calculateRollPitchYaw+0x42c>)
 80022f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <calculateRollPitchYaw+0x430>)
 8002300:	f7fd ff88 	bl	8000214 <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4908      	ldr	r1, [pc, #32]	@ (800232c <calculateRollPitchYaw+0x42c>)
 800230a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800230e:	bf00      	nop
 8002310:	3790      	adds	r7, #144	@ 0x90
 8002312:	46bd      	mov	sp, r7
 8002314:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002318:	54524550 	.word	0x54524550
 800231c:	400921fb 	.word	0x400921fb
 8002320:	40668000 	.word	0x40668000
 8002324:	20000170 	.word	0x20000170
 8002328:	20000178 	.word	0x20000178
 800232c:	20000180 	.word	0x20000180
 8002330:	40768000 	.word	0x40768000

08002334 <eularToQuaternion>:

void eularToQuaternion( double rollRad, double pitchRad, double yawRad){
 8002334:	b5b0      	push	{r4, r5, r7, lr}
 8002336:	b092      	sub	sp, #72	@ 0x48
 8002338:	af00      	add	r7, sp, #0
 800233a:	ed87 0b04 	vstr	d0, [r7, #16]
 800233e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002342:	ed87 2b00 	vstr	d2, [r7]

	double sinPitch2 = sin(rollRad/2.0);
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800234e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002352:	f7fe fa3f 	bl	80007d4 <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	ec43 2b17 	vmov	d7, r2, r3
 800235e:	eeb0 0a47 	vmov.f32	s0, s14
 8002362:	eef0 0a67 	vmov.f32	s1, s15
 8002366:	f003 f8a7 	bl	80054b8 <sin>
 800236a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	double sinRoll2 = sin(rollRad/2.0);
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237a:	f7fe fa2b 	bl	80007d4 <__aeabi_ddiv>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	ec43 2b17 	vmov	d7, r2, r3
 8002386:	eeb0 0a47 	vmov.f32	s0, s14
 800238a:	eef0 0a67 	vmov.f32	s1, s15
 800238e:	f003 f893 	bl	80054b8 <sin>
 8002392:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double sinYaw2 = sin(rollRad/2.0);
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800239e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023a2:	f7fe fa17 	bl	80007d4 <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	ec43 2b17 	vmov	d7, r2, r3
 80023ae:	eeb0 0a47 	vmov.f32	s0, s14
 80023b2:	eef0 0a67 	vmov.f32	s1, s15
 80023b6:	f003 f87f 	bl	80054b8 <sin>
 80023ba:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	double cosPitch2 = cos(rollRad/2.0);
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ca:	f7fe fa03 	bl	80007d4 <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ec43 2b17 	vmov	d7, r2, r3
 80023d6:	eeb0 0a47 	vmov.f32	s0, s14
 80023da:	eef0 0a67 	vmov.f32	s1, s15
 80023de:	f003 f817 	bl	8005410 <cos>
 80023e2:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double cosRoll2 = cos(rollRad/2.0);
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023f2:	f7fe f9ef 	bl	80007d4 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b17 	vmov	d7, r2, r3
 80023fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002402:	eef0 0a67 	vmov.f32	s1, s15
 8002406:	f003 f803 	bl	8005410 <cos>
 800240a:	ed87 0b08 	vstr	d0, [r7, #32]
	double cosYaw2 = cos(rollRad/2.0);
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002416:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800241a:	f7fe f9db 	bl	80007d4 <__aeabi_ddiv>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	ec43 2b17 	vmov	d7, r2, r3
 8002426:	eeb0 0a47 	vmov.f32	s0, s14
 800242a:	eef0 0a67 	vmov.f32	s1, s15
 800242e:	f002 ffef 	bl	8005410 <cos>
 8002432:	ed87 0b06 	vstr	d0, [r7, #24]

	q[0]= cosPitch2*cosRoll2*cosYaw2 + sinPitch2*sinRoll2*sinYaw2;
 8002436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800243e:	f7fe f89f 	bl	8000580 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244e:	f7fe f897 	bl	8000580 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4614      	mov	r4, r2
 8002458:	461d      	mov	r5, r3
 800245a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800245e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002462:	f7fe f88d 	bl	8000580 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002472:	f7fe f885 	bl	8000580 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd fec9 	bl	8000214 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4944      	ldr	r1, [pc, #272]	@ (8002598 <eularToQuaternion+0x264>)
 8002488:	e9c1 2300 	strd	r2, r3, [r1]
	q[1]= sinPitch2*cosRoll2*cosYaw2 - cosPitch2*sinRoll2*sinYaw2;
 800248c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002490:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002494:	f7fe f874 	bl	8000580 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a4:	f7fe f86c 	bl	8000580 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024b8:	f7fe f862 	bl	8000580 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80024c8:	f7fe f85a 	bl	8000580 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fe9c 	bl	8000210 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	492e      	ldr	r1, [pc, #184]	@ (8002598 <eularToQuaternion+0x264>)
 80024de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	q[2]= cosPitch2*sinRoll2*cosYaw2 + sinPitch2*cosRoll2*sinYaw2;
 80024e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024ea:	f7fe f849 	bl	8000580 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fa:	f7fe f841 	bl	8000580 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4614      	mov	r4, r2
 8002504:	461d      	mov	r5, r3
 8002506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800250a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800250e:	f7fe f837 	bl	8000580 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800251e:	f7fe f82f 	bl	8000580 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fd fe73 	bl	8000214 <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4919      	ldr	r1, [pc, #100]	@ (8002598 <eularToQuaternion+0x264>)
 8002534:	e9c1 2304 	strd	r2, r3, [r1, #16]
	q[3]= cosPitch2*cosRoll2*sinYaw2 - sinPitch2*sinRoll2*cosYaw2;
 8002538:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800253c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002540:	f7fe f81e 	bl	8000580 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002550:	f7fe f816 	bl	8000580 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002560:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002564:	f7fe f80c 	bl	8000580 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002574:	f7fe f804 	bl	8000580 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fe46 	bl	8000210 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4903      	ldr	r1, [pc, #12]	@ (8002598 <eularToQuaternion+0x264>)
 800258a:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 800258e:	bf00      	nop
 8002590:	3748      	adds	r7, #72	@ 0x48
 8002592:	46bd      	mov	sp, r7
 8002594:	bdb0      	pop	{r4, r5, r7, pc}
 8002596:	bf00      	nop
 8002598:	20000188 	.word	0x20000188

0800259c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <Error_Handler+0x8>

080025a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e6:	2007      	movs	r0, #7
 80025e8:	f000 fa4a 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_I2C_MspInit+0x84>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d12b      	bne.n	8002672 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002636:	23c0      	movs	r3, #192	@ 0xc0
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263a:	2312      	movs	r3, #18
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002646:	2304      	movs	r3, #4
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <HAL_I2C_MspInit+0x8c>)
 8002652:	f000 fa49 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 8002660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0x88>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3728      	adds	r7, #40	@ 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005400 	.word	0x40005400
 8002680:	40023800 	.word	0x40023800
 8002684:	40020400 	.word	0x40020400

08002688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_UART_MspInit+0x84>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d12b      	bne.n	8002702 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_UART_MspInit+0x88>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026e2:	230c      	movs	r3, #12
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f2:	2307      	movs	r3, #7
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	@ (8002714 <HAL_UART_MspInit+0x8c>)
 80026fe:	f000 f9f3 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	@ 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40004400 	.word	0x40004400
 8002710:	40023800 	.word	0x40023800
 8002714:	40020000 	.word	0x40020000

08002718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <NMI_Handler+0x4>

08002720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <HardFault_Handler+0x4>

08002728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <MemManage_Handler+0x4>

08002730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <UsageFault_Handler+0x4>

08002740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276e:	f000 f891 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027a0:	f7ff ffea 	bl	8002778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a6:	490d      	ldr	r1, [pc, #52]	@ (80027dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ac:	e002      	b.n	80027b4 <LoopCopyDataInit>

080027ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b2:	3304      	adds	r3, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b8:	d3f9      	bcc.n	80027ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027bc:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c0:	e001      	b.n	80027c6 <LoopFillZerobss>

080027c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c4:	3204      	adds	r2, #4

080027c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c8:	d3fb      	bcc.n	80027c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027ca:	f002 fdcf 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ce:	f7fe fb77 	bl	8000ec0 <main>
  bx  lr    
 80027d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027e0:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 80027e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027e8:	200002ec 	.word	0x200002ec

080027ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <ADC_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f931 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fec0 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f93b 	bl	8002ace <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 f911 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000014 	.word	0x20000014
 8002890:	20000010 	.word	0x20000010

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000014 	.word	0x20000014
 80028b8:	200001b0 	.word	0x200001b0

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200001b0 	.word	0x200001b0

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000014 	.word	0x20000014

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff8e 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff47 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff5c 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff8e 	bl	80029d4 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5d 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffb0 	bl	8002a3c <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e165      	b.n	8002dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8154 	bne.w	8002dca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80ae 	beq.w	8002dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_GPIO_Init+0x300>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	4a5c      	ldr	r2, [pc, #368]	@ (8002de8 <HAL_GPIO_Init+0x300>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002de8 <HAL_GPIO_Init+0x300>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <HAL_GPIO_Init+0x304>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002df0 <HAL_GPIO_Init+0x308>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8002df4 <HAL_GPIO_Init+0x30c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8002df8 <HAL_GPIO_Init+0x310>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8002dfc <HAL_GPIO_Init+0x314>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_GPIO_Init+0x318>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x206>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	@ (8002e08 <HAL_GPIO_Init+0x320>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x202>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	@ (8002dec <HAL_GPIO_Init+0x304>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b3a      	ldr	r3, [pc, #232]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a31      	ldr	r2, [pc, #196]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b25      	ldr	r3, [pc, #148]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a11      	ldr	r2, [pc, #68]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f ae96 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40013c00 	.word	0x40013c00

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fbc4 	bl	80025f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	@ 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f001 fa98 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	@ (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	@ (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	@ (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	@ (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fbec 	bl	80028bc <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80e0 	bne.w	80032b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	4970      	ldr	r1, [pc, #448]	@ (80032c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fdf4 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e0d3      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_I2C_Master_Transmit+0x50>
 8003118:	2302      	movs	r3, #2
 800311a:	e0cc      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d007      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2221      	movs	r2, #33	@ 0x21
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a50      	ldr	r2, [pc, #320]	@ (80032c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fbc8 	bl	8003920 <I2C_MasterRequestWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e08d      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b0:	e066      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 feb2 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06b      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d11b      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x188>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fea9 	bl	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d194      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	@ 0x30
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
 80032d8:	4613      	mov	r3, r2
 80032da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff faee 	bl	80028bc <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	f040 8217 	bne.w	800371e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	497c      	ldr	r1, [pc, #496]	@ (80034ec <HAL_I2C_Master_Receive+0x224>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fcf6 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e20a      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_I2C_Master_Receive+0x50>
 8003314:	2302      	movs	r3, #2
 8003316:	e203      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d007      	beq.n	800333e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2222      	movs	r2, #34	@ 0x22
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2210      	movs	r2, #16
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	893a      	ldrh	r2, [r7, #8]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a5c      	ldr	r2, [pc, #368]	@ (80034f0 <HAL_I2C_Master_Receive+0x228>)
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fb4c 	bl	8003a24 <I2C_MasterRequestRead>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1c4      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e198      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d11b      	bne.n	8003406 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e178      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340a:	2b02      	cmp	r3, #2
 800340c:	d11b      	bne.n	8003446 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	e158      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800346c:	e144      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	2b03      	cmp	r3, #3
 8003474:	f200 80f1 	bhi.w	800365a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d123      	bne.n	80034c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fddb 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e145      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034c6:	e117      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d14e      	bne.n	800356e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	2200      	movs	r2, #0
 80034d8:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <HAL_I2C_Master_Receive+0x22c>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fc06 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e11a      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
 80034ea:	bf00      	nop
 80034ec:	00100002 	.word	0x00100002
 80034f0:	ffff0000 	.word	0xffff0000
 80034f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800356c:	e0c4      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	496c      	ldr	r1, [pc, #432]	@ (8003728 <HAL_I2C_Master_Receive+0x460>)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fbb7 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cb      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	2200      	movs	r2, #0
 80035d2:	4955      	ldr	r1, [pc, #340]	@ (8003728 <HAL_I2C_Master_Receive+0x460>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fb89 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09d      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003658:	e04e      	b.n	80036f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fcee 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e058      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d124      	bne.n	80036f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f aeb6 	bne.w	800346e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00010004 	.word	0x00010004

0800372c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003746:	f7ff f8b9 	bl	80028bc <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	f040 80d9 	bne.w	800390c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	496d      	ldr	r1, [pc, #436]	@ (8003918 <HAL_I2C_Mem_Write+0x1ec>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fac1 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	e0cc      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Mem_Write+0x56>
 800377e:	2302      	movs	r3, #2
 8003780:	e0c5      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	@ 0x21
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a4d      	ldr	r2, [pc, #308]	@ (800391c <HAL_I2C_Mem_Write+0x1f0>)
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ea:	88f8      	ldrh	r0, [r7, #6]
 80037ec:	893a      	ldrh	r2, [r7, #8]
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f9e0 	bl	8003bc0 <I2C_RequestMemoryWrite>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d052      	beq.n	80038ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e081      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fb86 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06b      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d11b      	bne.n	80038ac <HAL_I2C_Mem_Write+0x180>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d017      	beq.n	80038ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1aa      	bne.n	800380a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb79 	bl	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d107      	bne.n	80038dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e016      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	00100002 	.word	0x00100002
 800391c:	ffff0000 	.word	0xffff0000

08003920 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d006      	beq.n	800394a <I2C_MasterRequestWrite+0x2a>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d003      	beq.n	800394a <I2C_MasterRequestWrite+0x2a>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003948:	d108      	bne.n	800395c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00b      	b.n	8003974 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	2b12      	cmp	r3, #18
 8003962:	d107      	bne.n	8003974 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f9b3 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399a:	d103      	bne.n	80039a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e035      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b0:	d108      	bne.n	80039c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039c0:	611a      	str	r2, [r3, #16]
 80039c2:	e01b      	b.n	80039fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c4:	897b      	ldrh	r3, [r7, #10]
 80039c6:	11db      	asrs	r3, r3, #7
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0306 	and.w	r3, r3, #6
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f063 030f 	orn	r3, r3, #15
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <I2C_MasterRequestWrite+0xfc>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f9fc 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e010      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <I2C_MasterRequestWrite+0x100>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f9ec 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	00010008 	.word	0x00010008
 8003a20:	00010002 	.word	0x00010002

08003a24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	460b      	mov	r3, r1
 8003a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d006      	beq.n	8003a5e <I2C_MasterRequestRead+0x3a>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d003      	beq.n	8003a5e <I2C_MasterRequestRead+0x3a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a5c:	d108      	bne.n	8003a70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00b      	b.n	8003a88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	2b11      	cmp	r3, #17
 8003a76:	d107      	bne.n	8003a88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f929 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aae:	d103      	bne.n	8003ab8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e079      	b.n	8003bb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac4:	d108      	bne.n	8003ad8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e05f      	b.n	8003b98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad8:	897b      	ldrh	r3, [r7, #10]
 8003ada:	11db      	asrs	r3, r3, #7
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0306 	and.w	r3, r3, #6
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f063 030f 	orn	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4930      	ldr	r1, [pc, #192]	@ (8003bb8 <I2C_MasterRequestRead+0x194>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f972 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e054      	b.n	8003bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4929      	ldr	r1, [pc, #164]	@ (8003bbc <I2C_MasterRequestRead+0x198>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f962 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e044      	b.n	8003bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f8c7 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b72:	d103      	bne.n	8003b7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e017      	b.n	8003bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b80:	897b      	ldrh	r3, [r7, #10]
 8003b82:	11db      	asrs	r3, r3, #7
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f063 030e 	orn	r3, r3, #14
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4907      	ldr	r1, [pc, #28]	@ (8003bbc <I2C_MasterRequestRead+0x198>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f91e 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	00010008 	.word	0x00010008
 8003bbc:	00010002 	.word	0x00010002

08003bc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f878 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c10:	d103      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e05f      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	492d      	ldr	r1, [pc, #180]	@ (8003ce8 <I2C_RequestMemoryWrite+0x128>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8d3 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04c      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f95e 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e02b      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8c:	893b      	ldrh	r3, [r7, #8]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]
 8003c96:	e021      	b.n	8003cdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	6a39      	ldr	r1, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f938 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d107      	bne.n	8003cce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e005      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd2:	893b      	ldrh	r3, [r7, #8]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	00010002 	.word	0x00010002

08003cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	e048      	b.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d044      	beq.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7fe fdd9 	bl	80028bc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d139      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10d      	bne.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	e00c      	b.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d116      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e023      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	e00c      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d093      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dee:	e071      	b.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfe:	d123      	bne.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e067      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d041      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fe fd34 	bl	80028bc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d136      	bne.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e021      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10c      	bne.n	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e00b      	b.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af6d 	bne.w	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2c:	e034      	b.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f8e3 	bl	80040fa <I2C_IsAcknowledgeFailed>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e034      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d028      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fe fcb9 	bl	80028bc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11d      	bne.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b80      	cmp	r3, #128	@ 0x80
 8003f68:	d016      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d1c3      	bne.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbc:	e034      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f89b 	bl	80040fa <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e034      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d028      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fe fc71 	bl	80028bc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11d      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d016      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d1c3      	bne.n	8003fbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404c:	e049      	b.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d119      	bne.n	8004090 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e030      	b.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fe fc14 	bl	80028bc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11d      	bne.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d016      	beq.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e007      	b.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d1ae      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d11b      	bne.n	800414a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800411a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	4a1f      	ldr	r2, [pc, #124]	@ (80041e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004170:	6413      	str	r3, [r2, #64]	@ 0x40
 8004172:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800417e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_PWREx_EnableOverDrive+0x94>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004184:	f7fe fb9a 	bl	80028bc <HAL_GetTick>
 8004188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800418a:	e009      	b.n	80041a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800418c:	f7fe fb96 	bl	80028bc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800419a:	d901      	bls.n	80041a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e01f      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041a0:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d1ee      	bne.n	800418c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041ae:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b4:	f7fe fb82 	bl	80028bc <HAL_GetTick>
 80041b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ba:	e009      	b.n	80041d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041bc:	f7fe fb7e 	bl	80028bc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041ca:	d901      	bls.n	80041d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e007      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041dc:	d1ee      	bne.n	80041bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	420e0040 	.word	0x420e0040
 80041f0:	40007000 	.word	0x40007000
 80041f4:	420e0044 	.word	0x420e0044

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe fae8 	bl	80028bc <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe fae4 	bl	80028bc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f855 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fa48 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08006ba8 	.word	0x08006ba8
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	20000010 	.word	0x20000010

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	@ (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08006bb8 	.word	0x08006bb8

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	@ (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08006bb8 	.word	0x08006bb8

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b0ae      	sub	sp, #184	@ 0xb8
 8004432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004452:	4bcb      	ldr	r3, [pc, #812]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b0c      	cmp	r3, #12
 800445c:	f200 8206 	bhi.w	800486c <HAL_RCC_GetSysClockFreq+0x440>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800449d 	.word	0x0800449d
 800446c:	0800486d 	.word	0x0800486d
 8004470:	0800486d 	.word	0x0800486d
 8004474:	0800486d 	.word	0x0800486d
 8004478:	080044a5 	.word	0x080044a5
 800447c:	0800486d 	.word	0x0800486d
 8004480:	0800486d 	.word	0x0800486d
 8004484:	0800486d 	.word	0x0800486d
 8004488:	080044ad 	.word	0x080044ad
 800448c:	0800486d 	.word	0x0800486d
 8004490:	0800486d 	.word	0x0800486d
 8004494:	0800486d 	.word	0x0800486d
 8004498:	0800469d 	.word	0x0800469d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4bb9      	ldr	r3, [pc, #740]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x358>)
 800449e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044a2:	e1e7      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004788 <HAL_RCC_GetSysClockFreq+0x35c>)
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044aa:	e1e3      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4bb4      	ldr	r3, [pc, #720]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b8:	4bb1      	ldr	r3, [pc, #708]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d071      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c4:	4bae      	ldr	r3, [pc, #696]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80044d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044ea:	4622      	mov	r2, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	0159      	lsls	r1, r3, #5
 80044f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044fc:	0150      	lsls	r0, r2, #5
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4621      	mov	r1, r4
 8004504:	1a51      	subs	r1, r2, r1
 8004506:	6439      	str	r1, [r7, #64]	@ 0x40
 8004508:	4629      	mov	r1, r5
 800450a:	eb63 0301 	sbc.w	r3, r3, r1
 800450e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800451c:	4649      	mov	r1, r9
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004526:	4641      	mov	r1, r8
 8004528:	018a      	lsls	r2, r1, #6
 800452a:	4641      	mov	r1, r8
 800452c:	1a51      	subs	r1, r2, r1
 800452e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004530:	4649      	mov	r1, r9
 8004532:	eb63 0301 	sbc.w	r3, r3, r1
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004544:	4649      	mov	r1, r9
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4641      	mov	r1, r8
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4622      	mov	r2, r4
 800455a:	189b      	adds	r3, r3, r2
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30
 800455e:	462b      	mov	r3, r5
 8004560:	460a      	mov	r2, r1
 8004562:	eb42 0303 	adc.w	r3, r2, r3
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004574:	4629      	mov	r1, r5
 8004576:	024b      	lsls	r3, r1, #9
 8004578:	4621      	mov	r1, r4
 800457a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800457e:	4621      	mov	r1, r4
 8004580:	024a      	lsls	r2, r1, #9
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004594:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004598:	f7fc fb1a 	bl	8000bd0 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a6:	e067      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a8:	4b75      	ldr	r3, [pc, #468]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80045b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045c2:	2300      	movs	r3, #0
 80045c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	0159      	lsls	r1, r3, #5
 80045d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045dc:	0150      	lsls	r0, r2, #5
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4621      	mov	r1, r4
 80045e4:	1a51      	subs	r1, r2, r1
 80045e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045e8:	4629      	mov	r1, r5
 80045ea:	eb63 0301 	sbc.w	r3, r3, r1
 80045ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80045fc:	4649      	mov	r1, r9
 80045fe:	018b      	lsls	r3, r1, #6
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004606:	4641      	mov	r1, r8
 8004608:	018a      	lsls	r2, r1, #6
 800460a:	4641      	mov	r1, r8
 800460c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004610:	4649      	mov	r1, r9
 8004612:	eb63 0b01 	sbc.w	fp, r3, r1
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004622:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462a:	4692      	mov	sl, r2
 800462c:	469b      	mov	fp, r3
 800462e:	4623      	mov	r3, r4
 8004630:	eb1a 0303 	adds.w	r3, sl, r3
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	462b      	mov	r3, r5
 8004638:	eb4b 0303 	adc.w	r3, fp, r3
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800464a:	4629      	mov	r1, r5
 800464c:	028b      	lsls	r3, r1, #10
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004654:	4621      	mov	r1, r4
 8004656:	028a      	lsls	r2, r1, #10
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004660:	2200      	movs	r2, #0
 8004662:	673b      	str	r3, [r7, #112]	@ 0x70
 8004664:	677a      	str	r2, [r7, #116]	@ 0x74
 8004666:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800466a:	f7fc fab1 	bl	8000bd0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4613      	mov	r3, r2
 8004674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004678:	4b41      	ldr	r3, [pc, #260]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800468a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800468e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800469a:	e0eb      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800469c:	4b38      	ldr	r3, [pc, #224]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046a8:	4b35      	ldr	r3, [pc, #212]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d06b      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b4:	4b32      	ldr	r3, [pc, #200]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	2200      	movs	r2, #0
 80046bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046c8:	2300      	movs	r3, #0
 80046ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80046cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e2:	0150      	lsls	r0, r2, #5
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4621      	mov	r1, r4
 80046ea:	1a51      	subs	r1, r2, r1
 80046ec:	61b9      	str	r1, [r7, #24]
 80046ee:	4629      	mov	r1, r5
 80046f0:	eb63 0301 	sbc.w	r3, r3, r1
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004702:	4659      	mov	r1, fp
 8004704:	018b      	lsls	r3, r1, #6
 8004706:	4651      	mov	r1, sl
 8004708:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800470c:	4651      	mov	r1, sl
 800470e:	018a      	lsls	r2, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ebb2 0801 	subs.w	r8, r2, r1
 8004716:	4659      	mov	r1, fp
 8004718:	eb63 0901 	sbc.w	r9, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004728:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800472c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004730:	4690      	mov	r8, r2
 8004732:	4699      	mov	r9, r3
 8004734:	4623      	mov	r3, r4
 8004736:	eb18 0303 	adds.w	r3, r8, r3
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	462b      	mov	r3, r5
 800473e:	eb49 0303 	adc.w	r3, r9, r3
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004750:	4629      	mov	r1, r5
 8004752:	024b      	lsls	r3, r1, #9
 8004754:	4621      	mov	r1, r4
 8004756:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800475a:	4621      	mov	r1, r4
 800475c:	024a      	lsls	r2, r1, #9
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004766:	2200      	movs	r2, #0
 8004768:	65bb      	str	r3, [r7, #88]	@ 0x58
 800476a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800476c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004770:	f7fc fa2e 	bl	8000bd0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800477e:	e065      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x420>
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
 8004788:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478c:	4b3d      	ldr	r3, [pc, #244]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x458>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	2200      	movs	r2, #0
 8004794:	4618      	mov	r0, r3
 8004796:	4611      	mov	r1, r2
 8004798:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800479c:	653b      	str	r3, [r7, #80]	@ 0x50
 800479e:	2300      	movs	r3, #0
 80047a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80047a6:	4642      	mov	r2, r8
 80047a8:	464b      	mov	r3, r9
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	0159      	lsls	r1, r3, #5
 80047b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b8:	0150      	lsls	r0, r2, #5
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4641      	mov	r1, r8
 80047c0:	1a51      	subs	r1, r2, r1
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	4649      	mov	r1, r9
 80047c6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047d8:	4659      	mov	r1, fp
 80047da:	018b      	lsls	r3, r1, #6
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e2:	4651      	mov	r1, sl
 80047e4:	018a      	lsls	r2, r1, #6
 80047e6:	4651      	mov	r1, sl
 80047e8:	1a54      	subs	r4, r2, r1
 80047ea:	4659      	mov	r1, fp
 80047ec:	eb63 0501 	sbc.w	r5, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	464b      	mov	r3, r9
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004834:	2200      	movs	r2, #0
 8004836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004838:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800483a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800483e:	f7fc f9c7 	bl	8000bd0 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4613      	mov	r3, r2
 8004848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800484c:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x458>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0f1b      	lsrs	r3, r3, #28
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800485a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800485e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800486a:	e003      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x45c>)
 800486e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004872:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004878:	4618      	mov	r0, r3
 800487a:	37b8      	adds	r7, #184	@ 0xb8
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400

0800488c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e28d      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8083 	beq.w	80049b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048ac:	4b94      	ldr	r3, [pc, #592]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d019      	beq.n	80048ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048b8:	4b91      	ldr	r3, [pc, #580]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d0:	d00c      	beq.n	80048ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b84      	ldr	r3, [pc, #528]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05b      	beq.n	80049b0 <HAL_RCC_OscConfig+0x124>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d157      	bne.n	80049b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e25a      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x90>
 800490e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7b      	ldr	r2, [pc, #492]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0xcc>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0xb4>
 8004926:	4b76      	ldr	r3, [pc, #472]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a75      	ldr	r2, [pc, #468]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b73      	ldr	r3, [pc, #460]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a72      	ldr	r2, [pc, #456]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0xcc>
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6e      	ldr	r2, [pc, #440]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6b      	ldr	r2, [pc, #428]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd ffac 	bl	80028bc <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fd ffa8 	bl	80028bc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e21f      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b61      	ldr	r3, [pc, #388]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0xdc>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd ff98 	bl	80028bc <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fd ff94 	bl	80028bc <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e20b      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	4b57      	ldr	r3, [pc, #348]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x104>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d06f      	beq.n	8004a9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049be:	4b50      	ldr	r3, [pc, #320]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d105      	bne.n	80049e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b47      	ldr	r3, [pc, #284]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b44      	ldr	r3, [pc, #272]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b41      	ldr	r3, [pc, #260]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x186>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1d3      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b3b      	ldr	r3, [pc, #236]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4937      	ldr	r1, [pc, #220]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <HAL_RCC_OscConfig+0x278>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd ff41 	bl	80028bc <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fd ff3d 	bl	80028bc <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1b4      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b2b      	ldr	r3, [pc, #172]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b28      	ldr	r3, [pc, #160]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4925      	ldr	r1, [pc, #148]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <HAL_RCC_OscConfig+0x278>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd ff20 	bl	80028bc <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fd ff1c 	bl	80028bc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e193      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d036      	beq.n	8004b18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd ff00 	bl	80028bc <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fefc 	bl	80028bc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e173      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x234>
 8004ade:	e01b      	b.n	8004b18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <HAL_RCC_OscConfig+0x27c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae6:	f7fd fee9 	bl	80028bc <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e00e      	b.n	8004b0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fd fee5 	bl	80028bc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d907      	bls.n	8004b0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e15c      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	42470000 	.word	0x42470000
 8004b08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ea      	bne.n	8004aee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8097 	beq.w	8004c54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b83      	ldr	r3, [pc, #524]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b46:	4b7c      	ldr	r3, [pc, #496]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b79      	ldr	r3, [pc, #484]	@ (8004d3c <HAL_RCC_OscConfig+0x4b0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d118      	bne.n	8004b94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <HAL_RCC_OscConfig+0x4b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a75      	ldr	r2, [pc, #468]	@ (8004d3c <HAL_RCC_OscConfig+0x4b0>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fea5 	bl	80028bc <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fd fea1 	bl	80028bc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e118      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	4b6c      	ldr	r3, [pc, #432]	@ (8004d3c <HAL_RCC_OscConfig+0x4b0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x31e>
 8004b9c:	4b66      	ldr	r3, [pc, #408]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba0:	4a65      	ldr	r2, [pc, #404]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba8:	e01c      	b.n	8004be4 <HAL_RCC_OscConfig+0x358>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x340>
 8004bb2:	4b61      	ldr	r3, [pc, #388]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a60      	ldr	r2, [pc, #384]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0x358>
 8004bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	4a59      	ldr	r2, [pc, #356]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd8:	4b57      	ldr	r3, [pc, #348]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	4a56      	ldr	r2, [pc, #344]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004bde:	f023 0304 	bic.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fe66 	bl	80028bc <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fe62 	bl	80028bc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0d7      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ee      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x368>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fd fe50 	bl	80028bc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fd fe4c 	bl	80028bc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0c1      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c36:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ee      	bne.n	8004c20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c48:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80ad 	beq.w	8004db8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5e:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d060      	beq.n	8004d2c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d145      	bne.n	8004cfe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b33      	ldr	r3, [pc, #204]	@ (8004d40 <HAL_RCC_OscConfig+0x4b4>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd fe20 	bl	80028bc <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fe1c 	bl	80028bc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e093      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b29      	ldr	r3, [pc, #164]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	491b      	ldr	r1, [pc, #108]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x4b4>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fd fdf1 	bl	80028bc <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fd fded 	bl	80028bc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e064      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x452>
 8004cfc:	e05c      	b.n	8004db8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_RCC_OscConfig+0x4b4>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd fdda 	bl	80028bc <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fdd6 	bl	80028bc <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e04d      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x480>
 8004d2a:	e045      	b.n	8004db8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e040      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d44:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HAL_RCC_OscConfig+0x538>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d030      	beq.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d129      	bne.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d122      	bne.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d119      	bne.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d10f      	bne.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800

08004dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e042      	b.n	8004e60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd fc4a 	bl	8002688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	@ 0x24
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f82b 	bl	8004e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e6c:	b0c0      	sub	sp, #256	@ 0x100
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	68d9      	ldr	r1, [r3, #12]
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	ea40 0301 	orr.w	r3, r0, r1
 8004e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ec0:	f021 010c 	bic.w	r1, r1, #12
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	6999      	ldr	r1, [r3, #24]
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	ea40 0301 	orr.w	r3, r0, r1
 8004eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8005134 <UART_SetConfig+0x2cc>)
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d005      	beq.n	8004f08 <UART_SetConfig+0xa0>
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b8d      	ldr	r3, [pc, #564]	@ (8005138 <UART_SetConfig+0x2d0>)
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d104      	bne.n	8004f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7ff fa7c 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f10:	e003      	b.n	8004f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f12:	f7ff fa63 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8004f16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f24:	f040 810c 	bne.w	8005140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	1891      	adds	r1, r2, r2
 8004f40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f42:	415b      	adcs	r3, r3
 8004f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	eb12 0801 	adds.w	r8, r2, r1
 8004f50:	4629      	mov	r1, r5
 8004f52:	eb43 0901 	adc.w	r9, r3, r1
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f6a:	4690      	mov	r8, r2
 8004f6c:	4699      	mov	r9, r3
 8004f6e:	4623      	mov	r3, r4
 8004f70:	eb18 0303 	adds.w	r3, r8, r3
 8004f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f78:	462b      	mov	r3, r5
 8004f7a:	eb49 0303 	adc.w	r3, r9, r3
 8004f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f96:	460b      	mov	r3, r1
 8004f98:	18db      	adds	r3, r3, r3
 8004f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	eb42 0303 	adc.w	r3, r2, r3
 8004fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fac:	f7fb fe10 	bl	8000bd0 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4b61      	ldr	r3, [pc, #388]	@ (800513c <UART_SetConfig+0x2d4>)
 8004fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	011c      	lsls	r4, r3, #4
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005000:	4692      	mov	sl, r2
 8005002:	469b      	mov	fp, r3
 8005004:	4643      	mov	r3, r8
 8005006:	eb1a 0303 	adds.w	r3, sl, r3
 800500a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800500e:	464b      	mov	r3, r9
 8005010:	eb4b 0303 	adc.w	r3, fp, r3
 8005014:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005024:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	643b      	str	r3, [r7, #64]	@ 0x40
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	647b      	str	r3, [r7, #68]	@ 0x44
 800503a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800503e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005042:	f7fb fdc5 	bl	8000bd0 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4611      	mov	r1, r2
 800504c:	4b3b      	ldr	r3, [pc, #236]	@ (800513c <UART_SetConfig+0x2d4>)
 800504e:	fba3 2301 	umull	r2, r3, r3, r1
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2264      	movs	r2, #100	@ 0x64
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	1acb      	subs	r3, r1, r3
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <UART_SetConfig+0x2d4>)
 8005064:	fba3 2302 	umull	r2, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005070:	441c      	add	r4, r3
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800507c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800508c:	415b      	adcs	r3, r3
 800508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005094:	4641      	mov	r1, r8
 8005096:	1851      	adds	r1, r2, r1
 8005098:	6339      	str	r1, [r7, #48]	@ 0x30
 800509a:	4649      	mov	r1, r9
 800509c:	414b      	adcs	r3, r1
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050ac:	4659      	mov	r1, fp
 80050ae:	00cb      	lsls	r3, r1, #3
 80050b0:	4651      	mov	r1, sl
 80050b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b6:	4651      	mov	r1, sl
 80050b8:	00ca      	lsls	r2, r1, #3
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	4642      	mov	r2, r8
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050c8:	464b      	mov	r3, r9
 80050ca:	460a      	mov	r2, r1
 80050cc:	eb42 0303 	adc.w	r3, r2, r3
 80050d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050e8:	460b      	mov	r3, r1
 80050ea:	18db      	adds	r3, r3, r3
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ee:	4613      	mov	r3, r2
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050fe:	f7fb fd67 	bl	8000bd0 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <UART_SetConfig+0x2d4>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	@ 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3332      	adds	r3, #50	@ 0x32
 800511a:	4a08      	ldr	r2, [pc, #32]	@ (800513c <UART_SetConfig+0x2d4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0207 	and.w	r2, r3, #7
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4422      	add	r2, r4
 800512e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005130:	e106      	b.n	8005340 <UART_SetConfig+0x4d8>
 8005132:	bf00      	nop
 8005134:	40011000 	.word	0x40011000
 8005138:	40011400 	.word	0x40011400
 800513c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005144:	2200      	movs	r2, #0
 8005146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800514a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800514e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005152:	4642      	mov	r2, r8
 8005154:	464b      	mov	r3, r9
 8005156:	1891      	adds	r1, r2, r2
 8005158:	6239      	str	r1, [r7, #32]
 800515a:	415b      	adcs	r3, r3
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
 800515e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005162:	4641      	mov	r1, r8
 8005164:	1854      	adds	r4, r2, r1
 8005166:	4649      	mov	r1, r9
 8005168:	eb43 0501 	adc.w	r5, r3, r1
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	00eb      	lsls	r3, r5, #3
 8005176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800517a:	00e2      	lsls	r2, r4, #3
 800517c:	4614      	mov	r4, r2
 800517e:	461d      	mov	r5, r3
 8005180:	4643      	mov	r3, r8
 8005182:	18e3      	adds	r3, r4, r3
 8005184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005188:	464b      	mov	r3, r9
 800518a:	eb45 0303 	adc.w	r3, r5, r3
 800518e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800519e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ae:	4629      	mov	r1, r5
 80051b0:	008b      	lsls	r3, r1, #2
 80051b2:	4621      	mov	r1, r4
 80051b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b8:	4621      	mov	r1, r4
 80051ba:	008a      	lsls	r2, r1, #2
 80051bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051c0:	f7fb fd06 	bl	8000bd0 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4b60      	ldr	r3, [pc, #384]	@ (800534c <UART_SetConfig+0x4e4>)
 80051ca:	fba3 2302 	umull	r2, r3, r3, r2
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	011c      	lsls	r4, r3, #4
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	61b9      	str	r1, [r7, #24]
 80051ec:	415b      	adcs	r3, r3
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6139      	str	r1, [r7, #16]
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005228:	464b      	mov	r3, r9
 800522a:	460a      	mov	r2, r1
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800523e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800524c:	4649      	mov	r1, r9
 800524e:	008b      	lsls	r3, r1, #2
 8005250:	4641      	mov	r1, r8
 8005252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005256:	4641      	mov	r1, r8
 8005258:	008a      	lsls	r2, r1, #2
 800525a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800525e:	f7fb fcb7 	bl	8000bd0 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4611      	mov	r1, r2
 8005268:	4b38      	ldr	r3, [pc, #224]	@ (800534c <UART_SetConfig+0x4e4>)
 800526a:	fba3 2301 	umull	r2, r3, r3, r1
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2264      	movs	r2, #100	@ 0x64
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	1acb      	subs	r3, r1, r3
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	3332      	adds	r3, #50	@ 0x32
 800527c:	4a33      	ldr	r2, [pc, #204]	@ (800534c <UART_SetConfig+0x4e4>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005288:	441c      	add	r4, r3
 800528a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528e:	2200      	movs	r2, #0
 8005290:	673b      	str	r3, [r7, #112]	@ 0x70
 8005292:	677a      	str	r2, [r7, #116]	@ 0x74
 8005294:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052a8:	4641      	mov	r1, r8
 80052aa:	1851      	adds	r1, r2, r1
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	4649      	mov	r1, r9
 80052b0:	414b      	adcs	r3, r1
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052c0:	4659      	mov	r1, fp
 80052c2:	00cb      	lsls	r3, r1, #3
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ca:	4651      	mov	r1, sl
 80052cc:	00ca      	lsls	r2, r1, #3
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	4642      	mov	r2, r8
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052da:	464b      	mov	r3, r9
 80052dc:	460a      	mov	r2, r1
 80052de:	eb42 0303 	adc.w	r3, r2, r3
 80052e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052fc:	4649      	mov	r1, r9
 80052fe:	008b      	lsls	r3, r1, #2
 8005300:	4641      	mov	r1, r8
 8005302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005306:	4641      	mov	r1, r8
 8005308:	008a      	lsls	r2, r1, #2
 800530a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800530e:	f7fb fc5f 	bl	8000bd0 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <UART_SetConfig+0x4e4>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	@ 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	3332      	adds	r3, #50	@ 0x32
 800532a:	4a08      	ldr	r2, [pc, #32]	@ (800534c <UART_SetConfig+0x4e4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4422      	add	r2, r4
 800533e:	609a      	str	r2, [r3, #8]
}
 8005340:	bf00      	nop
 8005342:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534c:	51eb851f 	.word	0x51eb851f

08005350 <memset>:
 8005350:	4402      	add	r2, r0
 8005352:	4603      	mov	r3, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <__errno>:
 8005360:	4b01      	ldr	r3, [pc, #4]	@ (8005368 <__errno+0x8>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000018 	.word	0x20000018

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4d0d      	ldr	r5, [pc, #52]	@ (80053a4 <__libc_init_array+0x38>)
 8005370:	4c0d      	ldr	r4, [pc, #52]	@ (80053a8 <__libc_init_array+0x3c>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	2600      	movs	r6, #0
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	4d0b      	ldr	r5, [pc, #44]	@ (80053ac <__libc_init_array+0x40>)
 800537e:	4c0c      	ldr	r4, [pc, #48]	@ (80053b0 <__libc_init_array+0x44>)
 8005380:	f001 fc06 	bl	8006b90 <_init>
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	2600      	movs	r6, #0
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	08006e10 	.word	0x08006e10
 80053a8:	08006e10 	.word	0x08006e10
 80053ac:	08006e10 	.word	0x08006e10
 80053b0:	08006e14 	.word	0x08006e14

080053b4 <atan2>:
 80053b4:	f000 bb34 	b.w	8005a20 <__ieee754_atan2>

080053b8 <sqrt>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	ed2d 8b02 	vpush	{d8}
 80053be:	ec55 4b10 	vmov	r4, r5, d0
 80053c2:	f000 f8cd 	bl	8005560 <__ieee754_sqrt>
 80053c6:	4622      	mov	r2, r4
 80053c8:	462b      	mov	r3, r5
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	eeb0 8a40 	vmov.f32	s16, s0
 80053d2:	eef0 8a60 	vmov.f32	s17, s1
 80053d6:	f7fb fb6d 	bl	8000ab4 <__aeabi_dcmpun>
 80053da:	b990      	cbnz	r0, 8005402 <sqrt+0x4a>
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	4620      	mov	r0, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	f7fb fb3e 	bl	8000a64 <__aeabi_dcmplt>
 80053e8:	b158      	cbz	r0, 8005402 <sqrt+0x4a>
 80053ea:	f7ff ffb9 	bl	8005360 <__errno>
 80053ee:	2321      	movs	r3, #33	@ 0x21
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	2300      	movs	r3, #0
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb f9eb 	bl	80007d4 <__aeabi_ddiv>
 80053fe:	ec41 0b18 	vmov	d8, r0, r1
 8005402:	eeb0 0a48 	vmov.f32	s0, s16
 8005406:	eef0 0a68 	vmov.f32	s1, s17
 800540a:	ecbd 8b02 	vpop	{d8}
 800540e:	bd38      	pop	{r3, r4, r5, pc}

08005410 <cos>:
 8005410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005412:	ec53 2b10 	vmov	r2, r3, d0
 8005416:	4826      	ldr	r0, [pc, #152]	@ (80054b0 <cos+0xa0>)
 8005418:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800541c:	4281      	cmp	r1, r0
 800541e:	d806      	bhi.n	800542e <cos+0x1e>
 8005420:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80054a8 <cos+0x98>
 8005424:	b005      	add	sp, #20
 8005426:	f85d eb04 	ldr.w	lr, [sp], #4
 800542a:	f000 b975 	b.w	8005718 <__kernel_cos>
 800542e:	4821      	ldr	r0, [pc, #132]	@ (80054b4 <cos+0xa4>)
 8005430:	4281      	cmp	r1, r0
 8005432:	d908      	bls.n	8005446 <cos+0x36>
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	f7fa feea 	bl	8000210 <__aeabi_dsub>
 800543c:	ec41 0b10 	vmov	d0, r0, r1
 8005440:	b005      	add	sp, #20
 8005442:	f85d fb04 	ldr.w	pc, [sp], #4
 8005446:	4668      	mov	r0, sp
 8005448:	f000 fbb2 	bl	8005bb0 <__ieee754_rem_pio2>
 800544c:	f000 0003 	and.w	r0, r0, #3
 8005450:	2801      	cmp	r0, #1
 8005452:	d00b      	beq.n	800546c <cos+0x5c>
 8005454:	2802      	cmp	r0, #2
 8005456:	d015      	beq.n	8005484 <cos+0x74>
 8005458:	b9d8      	cbnz	r0, 8005492 <cos+0x82>
 800545a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800545e:	ed9d 0b00 	vldr	d0, [sp]
 8005462:	f000 f959 	bl	8005718 <__kernel_cos>
 8005466:	ec51 0b10 	vmov	r0, r1, d0
 800546a:	e7e7      	b.n	800543c <cos+0x2c>
 800546c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005470:	ed9d 0b00 	vldr	d0, [sp]
 8005474:	f000 fa18 	bl	80058a8 <__kernel_sin>
 8005478:	ec53 2b10 	vmov	r2, r3, d0
 800547c:	4610      	mov	r0, r2
 800547e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005482:	e7db      	b.n	800543c <cos+0x2c>
 8005484:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005488:	ed9d 0b00 	vldr	d0, [sp]
 800548c:	f000 f944 	bl	8005718 <__kernel_cos>
 8005490:	e7f2      	b.n	8005478 <cos+0x68>
 8005492:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005496:	ed9d 0b00 	vldr	d0, [sp]
 800549a:	2001      	movs	r0, #1
 800549c:	f000 fa04 	bl	80058a8 <__kernel_sin>
 80054a0:	e7e1      	b.n	8005466 <cos+0x56>
 80054a2:	bf00      	nop
 80054a4:	f3af 8000 	nop.w
	...
 80054b0:	3fe921fb 	.word	0x3fe921fb
 80054b4:	7fefffff 	.word	0x7fefffff

080054b8 <sin>:
 80054b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ba:	ec53 2b10 	vmov	r2, r3, d0
 80054be:	4826      	ldr	r0, [pc, #152]	@ (8005558 <sin+0xa0>)
 80054c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054c4:	4281      	cmp	r1, r0
 80054c6:	d807      	bhi.n	80054d8 <sin+0x20>
 80054c8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005550 <sin+0x98>
 80054cc:	2000      	movs	r0, #0
 80054ce:	b005      	add	sp, #20
 80054d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d4:	f000 b9e8 	b.w	80058a8 <__kernel_sin>
 80054d8:	4820      	ldr	r0, [pc, #128]	@ (800555c <sin+0xa4>)
 80054da:	4281      	cmp	r1, r0
 80054dc:	d908      	bls.n	80054f0 <sin+0x38>
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	f7fa fe95 	bl	8000210 <__aeabi_dsub>
 80054e6:	ec41 0b10 	vmov	d0, r0, r1
 80054ea:	b005      	add	sp, #20
 80054ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80054f0:	4668      	mov	r0, sp
 80054f2:	f000 fb5d 	bl	8005bb0 <__ieee754_rem_pio2>
 80054f6:	f000 0003 	and.w	r0, r0, #3
 80054fa:	2801      	cmp	r0, #1
 80054fc:	d00c      	beq.n	8005518 <sin+0x60>
 80054fe:	2802      	cmp	r0, #2
 8005500:	d011      	beq.n	8005526 <sin+0x6e>
 8005502:	b9e8      	cbnz	r0, 8005540 <sin+0x88>
 8005504:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005508:	ed9d 0b00 	vldr	d0, [sp]
 800550c:	2001      	movs	r0, #1
 800550e:	f000 f9cb 	bl	80058a8 <__kernel_sin>
 8005512:	ec51 0b10 	vmov	r0, r1, d0
 8005516:	e7e6      	b.n	80054e6 <sin+0x2e>
 8005518:	ed9d 1b02 	vldr	d1, [sp, #8]
 800551c:	ed9d 0b00 	vldr	d0, [sp]
 8005520:	f000 f8fa 	bl	8005718 <__kernel_cos>
 8005524:	e7f5      	b.n	8005512 <sin+0x5a>
 8005526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800552a:	ed9d 0b00 	vldr	d0, [sp]
 800552e:	2001      	movs	r0, #1
 8005530:	f000 f9ba 	bl	80058a8 <__kernel_sin>
 8005534:	ec53 2b10 	vmov	r2, r3, d0
 8005538:	4610      	mov	r0, r2
 800553a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800553e:	e7d2      	b.n	80054e6 <sin+0x2e>
 8005540:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005544:	ed9d 0b00 	vldr	d0, [sp]
 8005548:	f000 f8e6 	bl	8005718 <__kernel_cos>
 800554c:	e7f2      	b.n	8005534 <sin+0x7c>
 800554e:	bf00      	nop
	...
 8005558:	3fe921fb 	.word	0x3fe921fb
 800555c:	7fefffff 	.word	0x7fefffff

08005560 <__ieee754_sqrt>:
 8005560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	4a68      	ldr	r2, [pc, #416]	@ (8005708 <__ieee754_sqrt+0x1a8>)
 8005566:	ec55 4b10 	vmov	r4, r5, d0
 800556a:	43aa      	bics	r2, r5
 800556c:	462b      	mov	r3, r5
 800556e:	4621      	mov	r1, r4
 8005570:	d110      	bne.n	8005594 <__ieee754_sqrt+0x34>
 8005572:	4622      	mov	r2, r4
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	f7fb f802 	bl	8000580 <__aeabi_dmul>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f7fa fe46 	bl	8000214 <__adddf3>
 8005588:	4604      	mov	r4, r0
 800558a:	460d      	mov	r5, r1
 800558c:	ec45 4b10 	vmov	d0, r4, r5
 8005590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	2d00      	cmp	r5, #0
 8005596:	dc0e      	bgt.n	80055b6 <__ieee754_sqrt+0x56>
 8005598:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800559c:	4322      	orrs	r2, r4
 800559e:	d0f5      	beq.n	800558c <__ieee754_sqrt+0x2c>
 80055a0:	b19d      	cbz	r5, 80055ca <__ieee754_sqrt+0x6a>
 80055a2:	4622      	mov	r2, r4
 80055a4:	4620      	mov	r0, r4
 80055a6:	4629      	mov	r1, r5
 80055a8:	f7fa fe32 	bl	8000210 <__aeabi_dsub>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	f7fb f910 	bl	80007d4 <__aeabi_ddiv>
 80055b4:	e7e8      	b.n	8005588 <__ieee754_sqrt+0x28>
 80055b6:	152a      	asrs	r2, r5, #20
 80055b8:	d115      	bne.n	80055e6 <__ieee754_sqrt+0x86>
 80055ba:	2000      	movs	r0, #0
 80055bc:	e009      	b.n	80055d2 <__ieee754_sqrt+0x72>
 80055be:	0acb      	lsrs	r3, r1, #11
 80055c0:	3a15      	subs	r2, #21
 80055c2:	0549      	lsls	r1, r1, #21
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0fa      	beq.n	80055be <__ieee754_sqrt+0x5e>
 80055c8:	e7f7      	b.n	80055ba <__ieee754_sqrt+0x5a>
 80055ca:	462a      	mov	r2, r5
 80055cc:	e7fa      	b.n	80055c4 <__ieee754_sqrt+0x64>
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	3001      	adds	r0, #1
 80055d2:	02dc      	lsls	r4, r3, #11
 80055d4:	d5fb      	bpl.n	80055ce <__ieee754_sqrt+0x6e>
 80055d6:	1e44      	subs	r4, r0, #1
 80055d8:	1b12      	subs	r2, r2, r4
 80055da:	f1c0 0420 	rsb	r4, r0, #32
 80055de:	fa21 f404 	lsr.w	r4, r1, r4
 80055e2:	4323      	orrs	r3, r4
 80055e4:	4081      	lsls	r1, r0
 80055e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f2:	07d2      	lsls	r2, r2, #31
 80055f4:	bf5c      	itt	pl
 80055f6:	005b      	lslpl	r3, r3, #1
 80055f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80055fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005600:	bf58      	it	pl
 8005602:	0049      	lslpl	r1, r1, #1
 8005604:	2600      	movs	r6, #0
 8005606:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800560a:	106d      	asrs	r5, r5, #1
 800560c:	0049      	lsls	r1, r1, #1
 800560e:	2016      	movs	r0, #22
 8005610:	4632      	mov	r2, r6
 8005612:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005616:	1917      	adds	r7, r2, r4
 8005618:	429f      	cmp	r7, r3
 800561a:	bfde      	ittt	le
 800561c:	193a      	addle	r2, r7, r4
 800561e:	1bdb      	suble	r3, r3, r7
 8005620:	1936      	addle	r6, r6, r4
 8005622:	0fcf      	lsrs	r7, r1, #31
 8005624:	3801      	subs	r0, #1
 8005626:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800562a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800562e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005632:	d1f0      	bne.n	8005616 <__ieee754_sqrt+0xb6>
 8005634:	4604      	mov	r4, r0
 8005636:	2720      	movs	r7, #32
 8005638:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800563c:	429a      	cmp	r2, r3
 800563e:	eb00 0e0c 	add.w	lr, r0, ip
 8005642:	db02      	blt.n	800564a <__ieee754_sqrt+0xea>
 8005644:	d113      	bne.n	800566e <__ieee754_sqrt+0x10e>
 8005646:	458e      	cmp	lr, r1
 8005648:	d811      	bhi.n	800566e <__ieee754_sqrt+0x10e>
 800564a:	f1be 0f00 	cmp.w	lr, #0
 800564e:	eb0e 000c 	add.w	r0, lr, ip
 8005652:	da42      	bge.n	80056da <__ieee754_sqrt+0x17a>
 8005654:	2800      	cmp	r0, #0
 8005656:	db40      	blt.n	80056da <__ieee754_sqrt+0x17a>
 8005658:	f102 0801 	add.w	r8, r2, #1
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	458e      	cmp	lr, r1
 8005660:	bf88      	it	hi
 8005662:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005666:	eba1 010e 	sub.w	r1, r1, lr
 800566a:	4464      	add	r4, ip
 800566c:	4642      	mov	r2, r8
 800566e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005672:	3f01      	subs	r7, #1
 8005674:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005678:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800567c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005680:	d1dc      	bne.n	800563c <__ieee754_sqrt+0xdc>
 8005682:	4319      	orrs	r1, r3
 8005684:	d01b      	beq.n	80056be <__ieee754_sqrt+0x15e>
 8005686:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800570c <__ieee754_sqrt+0x1ac>
 800568a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005710 <__ieee754_sqrt+0x1b0>
 800568e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005692:	e9db 2300 	ldrd	r2, r3, [fp]
 8005696:	f7fa fdbb 	bl	8000210 <__aeabi_dsub>
 800569a:	e9da 8900 	ldrd	r8, r9, [sl]
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fb f9e7 	bl	8000a78 <__aeabi_dcmple>
 80056aa:	b140      	cbz	r0, 80056be <__ieee754_sqrt+0x15e>
 80056ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80056b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80056b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80056b8:	d111      	bne.n	80056de <__ieee754_sqrt+0x17e>
 80056ba:	3601      	adds	r6, #1
 80056bc:	463c      	mov	r4, r7
 80056be:	1072      	asrs	r2, r6, #1
 80056c0:	0863      	lsrs	r3, r4, #1
 80056c2:	07f1      	lsls	r1, r6, #31
 80056c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80056c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80056cc:	bf48      	it	mi
 80056ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80056d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80056d6:	4618      	mov	r0, r3
 80056d8:	e756      	b.n	8005588 <__ieee754_sqrt+0x28>
 80056da:	4690      	mov	r8, r2
 80056dc:	e7be      	b.n	800565c <__ieee754_sqrt+0xfc>
 80056de:	f7fa fd99 	bl	8000214 <__adddf3>
 80056e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4640      	mov	r0, r8
 80056ec:	4649      	mov	r1, r9
 80056ee:	f7fb f9b9 	bl	8000a64 <__aeabi_dcmplt>
 80056f2:	b120      	cbz	r0, 80056fe <__ieee754_sqrt+0x19e>
 80056f4:	1ca0      	adds	r0, r4, #2
 80056f6:	bf08      	it	eq
 80056f8:	3601      	addeq	r6, #1
 80056fa:	3402      	adds	r4, #2
 80056fc:	e7df      	b.n	80056be <__ieee754_sqrt+0x15e>
 80056fe:	1c63      	adds	r3, r4, #1
 8005700:	f023 0401 	bic.w	r4, r3, #1
 8005704:	e7db      	b.n	80056be <__ieee754_sqrt+0x15e>
 8005706:	bf00      	nop
 8005708:	7ff00000 	.word	0x7ff00000
 800570c:	20000070 	.word	0x20000070
 8005710:	20000068 	.word	0x20000068
 8005714:	00000000 	.word	0x00000000

08005718 <__kernel_cos>:
 8005718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	ec57 6b10 	vmov	r6, r7, d0
 8005720:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005724:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005728:	ed8d 1b00 	vstr	d1, [sp]
 800572c:	d206      	bcs.n	800573c <__kernel_cos+0x24>
 800572e:	4630      	mov	r0, r6
 8005730:	4639      	mov	r1, r7
 8005732:	f7fb f9d5 	bl	8000ae0 <__aeabi_d2iz>
 8005736:	2800      	cmp	r0, #0
 8005738:	f000 8088 	beq.w	800584c <__kernel_cos+0x134>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fa ff1c 	bl	8000580 <__aeabi_dmul>
 8005748:	4b51      	ldr	r3, [pc, #324]	@ (8005890 <__kernel_cos+0x178>)
 800574a:	2200      	movs	r2, #0
 800574c:	4604      	mov	r4, r0
 800574e:	460d      	mov	r5, r1
 8005750:	f7fa ff16 	bl	8000580 <__aeabi_dmul>
 8005754:	a340      	add	r3, pc, #256	@ (adr r3, 8005858 <__kernel_cos+0x140>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fa ff0d 	bl	8000580 <__aeabi_dmul>
 8005766:	a33e      	add	r3, pc, #248	@ (adr r3, 8005860 <__kernel_cos+0x148>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa fd52 	bl	8000214 <__adddf3>
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	f7fa ff04 	bl	8000580 <__aeabi_dmul>
 8005778:	a33b      	add	r3, pc, #236	@ (adr r3, 8005868 <__kernel_cos+0x150>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fd47 	bl	8000210 <__aeabi_dsub>
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f7fa fefb 	bl	8000580 <__aeabi_dmul>
 800578a:	a339      	add	r3, pc, #228	@ (adr r3, 8005870 <__kernel_cos+0x158>)
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f7fa fd40 	bl	8000214 <__adddf3>
 8005794:	4622      	mov	r2, r4
 8005796:	462b      	mov	r3, r5
 8005798:	f7fa fef2 	bl	8000580 <__aeabi_dmul>
 800579c:	a336      	add	r3, pc, #216	@ (adr r3, 8005878 <__kernel_cos+0x160>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fd35 	bl	8000210 <__aeabi_dsub>
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	f7fa fee9 	bl	8000580 <__aeabi_dmul>
 80057ae:	a334      	add	r3, pc, #208	@ (adr r3, 8005880 <__kernel_cos+0x168>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa fd2e 	bl	8000214 <__adddf3>
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	f7fa fee0 	bl	8000580 <__aeabi_dmul>
 80057c0:	4622      	mov	r2, r4
 80057c2:	462b      	mov	r3, r5
 80057c4:	f7fa fedc 	bl	8000580 <__aeabi_dmul>
 80057c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057cc:	4604      	mov	r4, r0
 80057ce:	460d      	mov	r5, r1
 80057d0:	4630      	mov	r0, r6
 80057d2:	4639      	mov	r1, r7
 80057d4:	f7fa fed4 	bl	8000580 <__aeabi_dmul>
 80057d8:	460b      	mov	r3, r1
 80057da:	4602      	mov	r2, r0
 80057dc:	4629      	mov	r1, r5
 80057de:	4620      	mov	r0, r4
 80057e0:	f7fa fd16 	bl	8000210 <__aeabi_dsub>
 80057e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005894 <__kernel_cos+0x17c>)
 80057e6:	4598      	cmp	r8, r3
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	d810      	bhi.n	8005810 <__kernel_cos+0xf8>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4650      	mov	r0, sl
 80057f4:	4659      	mov	r1, fp
 80057f6:	f7fa fd0b 	bl	8000210 <__aeabi_dsub>
 80057fa:	460b      	mov	r3, r1
 80057fc:	4926      	ldr	r1, [pc, #152]	@ (8005898 <__kernel_cos+0x180>)
 80057fe:	4602      	mov	r2, r0
 8005800:	2000      	movs	r0, #0
 8005802:	f7fa fd05 	bl	8000210 <__aeabi_dsub>
 8005806:	ec41 0b10 	vmov	d0, r0, r1
 800580a:	b003      	add	sp, #12
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	4b22      	ldr	r3, [pc, #136]	@ (800589c <__kernel_cos+0x184>)
 8005812:	4921      	ldr	r1, [pc, #132]	@ (8005898 <__kernel_cos+0x180>)
 8005814:	4598      	cmp	r8, r3
 8005816:	bf8c      	ite	hi
 8005818:	4d21      	ldrhi	r5, [pc, #132]	@ (80058a0 <__kernel_cos+0x188>)
 800581a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800581e:	2400      	movs	r4, #0
 8005820:	4622      	mov	r2, r4
 8005822:	462b      	mov	r3, r5
 8005824:	2000      	movs	r0, #0
 8005826:	f7fa fcf3 	bl	8000210 <__aeabi_dsub>
 800582a:	4622      	mov	r2, r4
 800582c:	4680      	mov	r8, r0
 800582e:	4689      	mov	r9, r1
 8005830:	462b      	mov	r3, r5
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fa fceb 	bl	8000210 <__aeabi_dsub>
 800583a:	4632      	mov	r2, r6
 800583c:	463b      	mov	r3, r7
 800583e:	f7fa fce7 	bl	8000210 <__aeabi_dsub>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4640      	mov	r0, r8
 8005848:	4649      	mov	r1, r9
 800584a:	e7da      	b.n	8005802 <__kernel_cos+0xea>
 800584c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005888 <__kernel_cos+0x170>
 8005850:	e7db      	b.n	800580a <__kernel_cos+0xf2>
 8005852:	bf00      	nop
 8005854:	f3af 8000 	nop.w
 8005858:	be8838d4 	.word	0xbe8838d4
 800585c:	bda8fae9 	.word	0xbda8fae9
 8005860:	bdb4b1c4 	.word	0xbdb4b1c4
 8005864:	3e21ee9e 	.word	0x3e21ee9e
 8005868:	809c52ad 	.word	0x809c52ad
 800586c:	3e927e4f 	.word	0x3e927e4f
 8005870:	19cb1590 	.word	0x19cb1590
 8005874:	3efa01a0 	.word	0x3efa01a0
 8005878:	16c15177 	.word	0x16c15177
 800587c:	3f56c16c 	.word	0x3f56c16c
 8005880:	5555554c 	.word	0x5555554c
 8005884:	3fa55555 	.word	0x3fa55555
 8005888:	00000000 	.word	0x00000000
 800588c:	3ff00000 	.word	0x3ff00000
 8005890:	3fe00000 	.word	0x3fe00000
 8005894:	3fd33332 	.word	0x3fd33332
 8005898:	3ff00000 	.word	0x3ff00000
 800589c:	3fe90000 	.word	0x3fe90000
 80058a0:	3fd20000 	.word	0x3fd20000
 80058a4:	00000000 	.word	0x00000000

080058a8 <__kernel_sin>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	ec55 4b10 	vmov	r4, r5, d0
 80058b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80058b4:	b085      	sub	sp, #20
 80058b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80058ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 80058be:	4680      	mov	r8, r0
 80058c0:	d205      	bcs.n	80058ce <__kernel_sin+0x26>
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fb f90b 	bl	8000ae0 <__aeabi_d2iz>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d052      	beq.n	8005974 <__kernel_sin+0xcc>
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	4620      	mov	r0, r4
 80058d4:	4629      	mov	r1, r5
 80058d6:	f7fa fe53 	bl	8000580 <__aeabi_dmul>
 80058da:	4682      	mov	sl, r0
 80058dc:	468b      	mov	fp, r1
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4620      	mov	r0, r4
 80058e4:	4629      	mov	r1, r5
 80058e6:	f7fa fe4b 	bl	8000580 <__aeabi_dmul>
 80058ea:	a342      	add	r3, pc, #264	@ (adr r3, 80059f4 <__kernel_sin+0x14c>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	e9cd 0100 	strd	r0, r1, [sp]
 80058f4:	4650      	mov	r0, sl
 80058f6:	4659      	mov	r1, fp
 80058f8:	f7fa fe42 	bl	8000580 <__aeabi_dmul>
 80058fc:	a33f      	add	r3, pc, #252	@ (adr r3, 80059fc <__kernel_sin+0x154>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f7fa fc85 	bl	8000210 <__aeabi_dsub>
 8005906:	4652      	mov	r2, sl
 8005908:	465b      	mov	r3, fp
 800590a:	f7fa fe39 	bl	8000580 <__aeabi_dmul>
 800590e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005a04 <__kernel_sin+0x15c>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fc7e 	bl	8000214 <__adddf3>
 8005918:	4652      	mov	r2, sl
 800591a:	465b      	mov	r3, fp
 800591c:	f7fa fe30 	bl	8000580 <__aeabi_dmul>
 8005920:	a33a      	add	r3, pc, #232	@ (adr r3, 8005a0c <__kernel_sin+0x164>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fa fc73 	bl	8000210 <__aeabi_dsub>
 800592a:	4652      	mov	r2, sl
 800592c:	465b      	mov	r3, fp
 800592e:	f7fa fe27 	bl	8000580 <__aeabi_dmul>
 8005932:	a338      	add	r3, pc, #224	@ (adr r3, 8005a14 <__kernel_sin+0x16c>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fc6c 	bl	8000214 <__adddf3>
 800593c:	4606      	mov	r6, r0
 800593e:	460f      	mov	r7, r1
 8005940:	f1b8 0f00 	cmp.w	r8, #0
 8005944:	d11b      	bne.n	800597e <__kernel_sin+0xd6>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4650      	mov	r0, sl
 800594c:	4659      	mov	r1, fp
 800594e:	f7fa fe17 	bl	8000580 <__aeabi_dmul>
 8005952:	a325      	add	r3, pc, #148	@ (adr r3, 80059e8 <__kernel_sin+0x140>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fc5a 	bl	8000210 <__aeabi_dsub>
 800595c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005960:	f7fa fe0e 	bl	8000580 <__aeabi_dmul>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4620      	mov	r0, r4
 800596a:	4629      	mov	r1, r5
 800596c:	f7fa fc52 	bl	8000214 <__adddf3>
 8005970:	4604      	mov	r4, r0
 8005972:	460d      	mov	r5, r1
 8005974:	ec45 4b10 	vmov	d0, r4, r5
 8005978:	b005      	add	sp, #20
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <__kernel_sin+0x148>)
 8005984:	2200      	movs	r2, #0
 8005986:	f7fa fdfb 	bl	8000580 <__aeabi_dmul>
 800598a:	4632      	mov	r2, r6
 800598c:	4680      	mov	r8, r0
 800598e:	4689      	mov	r9, r1
 8005990:	463b      	mov	r3, r7
 8005992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005996:	f7fa fdf3 	bl	8000580 <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fc35 	bl	8000210 <__aeabi_dsub>
 80059a6:	4652      	mov	r2, sl
 80059a8:	465b      	mov	r3, fp
 80059aa:	f7fa fde9 	bl	8000580 <__aeabi_dmul>
 80059ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059b2:	f7fa fc2d 	bl	8000210 <__aeabi_dsub>
 80059b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80059e8 <__kernel_sin+0x140>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059c4:	f7fa fddc 	bl	8000580 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fc20 	bl	8000214 <__adddf3>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fc18 	bl	8000210 <__aeabi_dsub>
 80059e0:	e7c6      	b.n	8005970 <__kernel_sin+0xc8>
 80059e2:	bf00      	nop
 80059e4:	f3af 8000 	nop.w
 80059e8:	55555549 	.word	0x55555549
 80059ec:	3fc55555 	.word	0x3fc55555
 80059f0:	3fe00000 	.word	0x3fe00000
 80059f4:	5acfd57c 	.word	0x5acfd57c
 80059f8:	3de5d93a 	.word	0x3de5d93a
 80059fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a00:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a04:	57b1fe7d 	.word	0x57b1fe7d
 8005a08:	3ec71de3 	.word	0x3ec71de3
 8005a0c:	19c161d5 	.word	0x19c161d5
 8005a10:	3f2a01a0 	.word	0x3f2a01a0
 8005a14:	1110f8a6 	.word	0x1110f8a6
 8005a18:	3f811111 	.word	0x3f811111
 8005a1c:	00000000 	.word	0x00000000

08005a20 <__ieee754_atan2>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	ec57 6b11 	vmov	r6, r7, d1
 8005a28:	4273      	negs	r3, r6
 8005a2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005ba8 <__ieee754_atan2+0x188>
 8005a2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005a32:	4333      	orrs	r3, r6
 8005a34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005a38:	4543      	cmp	r3, r8
 8005a3a:	ec51 0b10 	vmov	r0, r1, d0
 8005a3e:	4635      	mov	r5, r6
 8005a40:	d809      	bhi.n	8005a56 <__ieee754_atan2+0x36>
 8005a42:	4244      	negs	r4, r0
 8005a44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a48:	4304      	orrs	r4, r0
 8005a4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005a4e:	4544      	cmp	r4, r8
 8005a50:	468e      	mov	lr, r1
 8005a52:	4681      	mov	r9, r0
 8005a54:	d907      	bls.n	8005a66 <__ieee754_atan2+0x46>
 8005a56:	4632      	mov	r2, r6
 8005a58:	463b      	mov	r3, r7
 8005a5a:	f7fa fbdb 	bl	8000214 <__adddf3>
 8005a5e:	ec41 0b10 	vmov	d0, r0, r1
 8005a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005a6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005a6e:	4334      	orrs	r4, r6
 8005a70:	d103      	bne.n	8005a7a <__ieee754_atan2+0x5a>
 8005a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a76:	f000 ba97 	b.w	8005fa8 <atan>
 8005a7a:	17bc      	asrs	r4, r7, #30
 8005a7c:	f004 0402 	and.w	r4, r4, #2
 8005a80:	ea53 0909 	orrs.w	r9, r3, r9
 8005a84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005a88:	d107      	bne.n	8005a9a <__ieee754_atan2+0x7a>
 8005a8a:	2c02      	cmp	r4, #2
 8005a8c:	d05f      	beq.n	8005b4e <__ieee754_atan2+0x12e>
 8005a8e:	2c03      	cmp	r4, #3
 8005a90:	d1e5      	bne.n	8005a5e <__ieee754_atan2+0x3e>
 8005a92:	a141      	add	r1, pc, #260	@ (adr r1, 8005b98 <__ieee754_atan2+0x178>)
 8005a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a98:	e7e1      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005a9a:	4315      	orrs	r5, r2
 8005a9c:	d106      	bne.n	8005aac <__ieee754_atan2+0x8c>
 8005a9e:	f1be 0f00 	cmp.w	lr, #0
 8005aa2:	da5f      	bge.n	8005b64 <__ieee754_atan2+0x144>
 8005aa4:	a13e      	add	r1, pc, #248	@ (adr r1, 8005ba0 <__ieee754_atan2+0x180>)
 8005aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aaa:	e7d8      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005aac:	4542      	cmp	r2, r8
 8005aae:	d10f      	bne.n	8005ad0 <__ieee754_atan2+0xb0>
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ab6:	d107      	bne.n	8005ac8 <__ieee754_atan2+0xa8>
 8005ab8:	2c02      	cmp	r4, #2
 8005aba:	d84c      	bhi.n	8005b56 <__ieee754_atan2+0x136>
 8005abc:	4b34      	ldr	r3, [pc, #208]	@ (8005b90 <__ieee754_atan2+0x170>)
 8005abe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ac6:	e7ca      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005ac8:	2c02      	cmp	r4, #2
 8005aca:	d848      	bhi.n	8005b5e <__ieee754_atan2+0x13e>
 8005acc:	4b31      	ldr	r3, [pc, #196]	@ (8005b94 <__ieee754_atan2+0x174>)
 8005ace:	e7f6      	b.n	8005abe <__ieee754_atan2+0x9e>
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	d0e4      	beq.n	8005a9e <__ieee754_atan2+0x7e>
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005ada:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005ade:	da1e      	bge.n	8005b1e <__ieee754_atan2+0xfe>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	da01      	bge.n	8005ae8 <__ieee754_atan2+0xc8>
 8005ae4:	323c      	adds	r2, #60	@ 0x3c
 8005ae6:	db1e      	blt.n	8005b26 <__ieee754_atan2+0x106>
 8005ae8:	4632      	mov	r2, r6
 8005aea:	463b      	mov	r3, r7
 8005aec:	f7fa fe72 	bl	80007d4 <__aeabi_ddiv>
 8005af0:	ec41 0b10 	vmov	d0, r0, r1
 8005af4:	f000 fbf0 	bl	80062d8 <fabs>
 8005af8:	f000 fa56 	bl	8005fa8 <atan>
 8005afc:	ec51 0b10 	vmov	r0, r1, d0
 8005b00:	2c01      	cmp	r4, #1
 8005b02:	d013      	beq.n	8005b2c <__ieee754_atan2+0x10c>
 8005b04:	2c02      	cmp	r4, #2
 8005b06:	d015      	beq.n	8005b34 <__ieee754_atan2+0x114>
 8005b08:	2c00      	cmp	r4, #0
 8005b0a:	d0a8      	beq.n	8005a5e <__ieee754_atan2+0x3e>
 8005b0c:	a318      	add	r3, pc, #96	@ (adr r3, 8005b70 <__ieee754_atan2+0x150>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fb7d 	bl	8000210 <__aeabi_dsub>
 8005b16:	a318      	add	r3, pc, #96	@ (adr r3, 8005b78 <__ieee754_atan2+0x158>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	e014      	b.n	8005b48 <__ieee754_atan2+0x128>
 8005b1e:	a118      	add	r1, pc, #96	@ (adr r1, 8005b80 <__ieee754_atan2+0x160>)
 8005b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b24:	e7ec      	b.n	8005b00 <__ieee754_atan2+0xe0>
 8005b26:	2000      	movs	r0, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	e7e9      	b.n	8005b00 <__ieee754_atan2+0xe0>
 8005b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b30:	4619      	mov	r1, r3
 8005b32:	e794      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b34:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b70 <__ieee754_atan2+0x150>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fb69 	bl	8000210 <__aeabi_dsub>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	a10d      	add	r1, pc, #52	@ (adr r1, 8005b78 <__ieee754_atan2+0x158>)
 8005b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b48:	f7fa fb62 	bl	8000210 <__aeabi_dsub>
 8005b4c:	e787      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b4e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005b78 <__ieee754_atan2+0x158>)
 8005b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b54:	e783      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b56:	a10c      	add	r1, pc, #48	@ (adr r1, 8005b88 <__ieee754_atan2+0x168>)
 8005b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5c:	e77f      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	e77c      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b64:	a106      	add	r1, pc, #24	@ (adr r1, 8005b80 <__ieee754_atan2+0x160>)
 8005b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b6a:	e778      	b.n	8005a5e <__ieee754_atan2+0x3e>
 8005b6c:	f3af 8000 	nop.w
 8005b70:	33145c07 	.word	0x33145c07
 8005b74:	3ca1a626 	.word	0x3ca1a626
 8005b78:	54442d18 	.word	0x54442d18
 8005b7c:	400921fb 	.word	0x400921fb
 8005b80:	54442d18 	.word	0x54442d18
 8005b84:	3ff921fb 	.word	0x3ff921fb
 8005b88:	54442d18 	.word	0x54442d18
 8005b8c:	3fe921fb 	.word	0x3fe921fb
 8005b90:	08006bd8 	.word	0x08006bd8
 8005b94:	08006bc0 	.word	0x08006bc0
 8005b98:	54442d18 	.word	0x54442d18
 8005b9c:	c00921fb 	.word	0xc00921fb
 8005ba0:	54442d18 	.word	0x54442d18
 8005ba4:	bff921fb 	.word	0xbff921fb
 8005ba8:	7ff00000 	.word	0x7ff00000
 8005bac:	00000000 	.word	0x00000000

08005bb0 <__ieee754_rem_pio2>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ec57 6b10 	vmov	r6, r7, d0
 8005bb8:	4bc5      	ldr	r3, [pc, #788]	@ (8005ed0 <__ieee754_rem_pio2+0x320>)
 8005bba:	b08d      	sub	sp, #52	@ 0x34
 8005bbc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005bc0:	4598      	cmp	r8, r3
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	9704      	str	r7, [sp, #16]
 8005bc6:	d807      	bhi.n	8005bd8 <__ieee754_rem_pio2+0x28>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	ed80 0b00 	vstr	d0, [r0]
 8005bd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005bd4:	2500      	movs	r5, #0
 8005bd6:	e028      	b.n	8005c2a <__ieee754_rem_pio2+0x7a>
 8005bd8:	4bbe      	ldr	r3, [pc, #760]	@ (8005ed4 <__ieee754_rem_pio2+0x324>)
 8005bda:	4598      	cmp	r8, r3
 8005bdc:	d878      	bhi.n	8005cd0 <__ieee754_rem_pio2+0x120>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	4dbd      	ldr	r5, [pc, #756]	@ (8005ed8 <__ieee754_rem_pio2+0x328>)
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	4630      	mov	r0, r6
 8005be6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005e98 <__ieee754_rem_pio2+0x2e8>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	4639      	mov	r1, r7
 8005bee:	dd38      	ble.n	8005c62 <__ieee754_rem_pio2+0xb2>
 8005bf0:	f7fa fb0e 	bl	8000210 <__aeabi_dsub>
 8005bf4:	45a8      	cmp	r8, r5
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	d01a      	beq.n	8005c32 <__ieee754_rem_pio2+0x82>
 8005bfc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x2f0>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fb05 	bl	8000210 <__aeabi_dsub>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	f7fa fafd 	bl	8000210 <__aeabi_dsub>
 8005c16:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x2f0>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa faf8 	bl	8000210 <__aeabi_dsub>
 8005c20:	e9c4 8900 	strd	r8, r9, [r4]
 8005c24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c28:	2501      	movs	r5, #1
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	b00d      	add	sp, #52	@ 0x34
 8005c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	a39d      	add	r3, pc, #628	@ (adr r3, 8005ea8 <__ieee754_rem_pio2+0x2f8>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa faea 	bl	8000210 <__aeabi_dsub>
 8005c3c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005eb0 <__ieee754_rem_pio2+0x300>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	4606      	mov	r6, r0
 8005c44:	460f      	mov	r7, r1
 8005c46:	f7fa fae3 	bl	8000210 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4680      	mov	r8, r0
 8005c50:	4689      	mov	r9, r1
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fadb 	bl	8000210 <__aeabi_dsub>
 8005c5a:	a395      	add	r3, pc, #596	@ (adr r3, 8005eb0 <__ieee754_rem_pio2+0x300>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	e7dc      	b.n	8005c1c <__ieee754_rem_pio2+0x6c>
 8005c62:	f7fa fad7 	bl	8000214 <__adddf3>
 8005c66:	45a8      	cmp	r8, r5
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	d018      	beq.n	8005ca0 <__ieee754_rem_pio2+0xf0>
 8005c6e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x2f0>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa face 	bl	8000214 <__adddf3>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4689      	mov	r9, r1
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	f7fa fac4 	bl	8000210 <__aeabi_dsub>
 8005c88:	a385      	add	r3, pc, #532	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x2f0>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fac1 	bl	8000214 <__adddf3>
 8005c92:	f04f 35ff 	mov.w	r5, #4294967295
 8005c96:	e9c4 8900 	strd	r8, r9, [r4]
 8005c9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c9e:	e7c4      	b.n	8005c2a <__ieee754_rem_pio2+0x7a>
 8005ca0:	a381      	add	r3, pc, #516	@ (adr r3, 8005ea8 <__ieee754_rem_pio2+0x2f8>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fab5 	bl	8000214 <__adddf3>
 8005caa:	a381      	add	r3, pc, #516	@ (adr r3, 8005eb0 <__ieee754_rem_pio2+0x300>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	460f      	mov	r7, r1
 8005cb4:	f7fa faae 	bl	8000214 <__adddf3>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa faa4 	bl	8000210 <__aeabi_dsub>
 8005cc8:	a379      	add	r3, pc, #484	@ (adr r3, 8005eb0 <__ieee754_rem_pio2+0x300>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	e7de      	b.n	8005c8e <__ieee754_rem_pio2+0xde>
 8005cd0:	4b82      	ldr	r3, [pc, #520]	@ (8005edc <__ieee754_rem_pio2+0x32c>)
 8005cd2:	4598      	cmp	r8, r3
 8005cd4:	f200 80d1 	bhi.w	8005e7a <__ieee754_rem_pio2+0x2ca>
 8005cd8:	f000 fafe 	bl	80062d8 <fabs>
 8005cdc:	ec57 6b10 	vmov	r6, r7, d0
 8005ce0:	a375      	add	r3, pc, #468	@ (adr r3, 8005eb8 <__ieee754_rem_pio2+0x308>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	f7fa fc49 	bl	8000580 <__aeabi_dmul>
 8005cee:	4b7c      	ldr	r3, [pc, #496]	@ (8005ee0 <__ieee754_rem_pio2+0x330>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f7fa fa8f 	bl	8000214 <__adddf3>
 8005cf6:	f7fa fef3 	bl	8000ae0 <__aeabi_d2iz>
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	f7fa fbd6 	bl	80004ac <__aeabi_i2d>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d08:	a363      	add	r3, pc, #396	@ (adr r3, 8005e98 <__ieee754_rem_pio2+0x2e8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fc37 	bl	8000580 <__aeabi_dmul>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fa79 	bl	8000210 <__aeabi_dsub>
 8005d1e:	a360      	add	r3, pc, #384	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x2f0>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	4682      	mov	sl, r0
 8005d26:	468b      	mov	fp, r1
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa fc28 	bl	8000580 <__aeabi_dmul>
 8005d30:	2d1f      	cmp	r5, #31
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	dc0c      	bgt.n	8005d52 <__ieee754_rem_pio2+0x1a2>
 8005d38:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee4 <__ieee754_rem_pio2+0x334>)
 8005d3a:	1e6a      	subs	r2, r5, #1
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	4543      	cmp	r3, r8
 8005d42:	d006      	beq.n	8005d52 <__ieee754_rem_pio2+0x1a2>
 8005d44:	4632      	mov	r2, r6
 8005d46:	463b      	mov	r3, r7
 8005d48:	4650      	mov	r0, sl
 8005d4a:	4659      	mov	r1, fp
 8005d4c:	f7fa fa60 	bl	8000210 <__aeabi_dsub>
 8005d50:	e00e      	b.n	8005d70 <__ieee754_rem_pio2+0x1c0>
 8005d52:	463b      	mov	r3, r7
 8005d54:	4632      	mov	r2, r6
 8005d56:	4650      	mov	r0, sl
 8005d58:	4659      	mov	r1, fp
 8005d5a:	f7fa fa59 	bl	8000210 <__aeabi_dsub>
 8005d5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d68:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	dc02      	bgt.n	8005d76 <__ieee754_rem_pio2+0x1c6>
 8005d70:	e9c4 0100 	strd	r0, r1, [r4]
 8005d74:	e039      	b.n	8005dea <__ieee754_rem_pio2+0x23a>
 8005d76:	a34c      	add	r3, pc, #304	@ (adr r3, 8005ea8 <__ieee754_rem_pio2+0x2f8>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d80:	f7fa fbfe 	bl	8000580 <__aeabi_dmul>
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	4659      	mov	r1, fp
 8005d90:	f7fa fa3e 	bl	8000210 <__aeabi_dsub>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4689      	mov	r9, r1
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	4659      	mov	r1, fp
 8005da0:	f7fa fa36 	bl	8000210 <__aeabi_dsub>
 8005da4:	4632      	mov	r2, r6
 8005da6:	463b      	mov	r3, r7
 8005da8:	f7fa fa32 	bl	8000210 <__aeabi_dsub>
 8005dac:	a340      	add	r3, pc, #256	@ (adr r3, 8005eb0 <__ieee754_rem_pio2+0x300>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dba:	f7fa fbe1 	bl	8000580 <__aeabi_dmul>
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	f7fa fa25 	bl	8000210 <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fa1d 	bl	8000210 <__aeabi_dsub>
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b31      	cmp	r3, #49	@ 0x31
 8005de0:	dc20      	bgt.n	8005e24 <__ieee754_rem_pio2+0x274>
 8005de2:	e9c4 0100 	strd	r0, r1, [r4]
 8005de6:	46c2      	mov	sl, r8
 8005de8:	46cb      	mov	fp, r9
 8005dea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005dee:	4650      	mov	r0, sl
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	4659      	mov	r1, fp
 8005df6:	f7fa fa0b 	bl	8000210 <__aeabi_dsub>
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	f7fa fa07 	bl	8000210 <__aeabi_dsub>
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e0a:	f6bf af0e 	bge.w	8005c2a <__ieee754_rem_pio2+0x7a>
 8005e0e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005e12:	6063      	str	r3, [r4, #4]
 8005e14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e18:	f8c4 8000 	str.w	r8, [r4]
 8005e1c:	60a0      	str	r0, [r4, #8]
 8005e1e:	60e3      	str	r3, [r4, #12]
 8005e20:	426d      	negs	r5, r5
 8005e22:	e702      	b.n	8005c2a <__ieee754_rem_pio2+0x7a>
 8005e24:	a326      	add	r3, pc, #152	@ (adr r3, 8005ec0 <__ieee754_rem_pio2+0x310>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2e:	f7fa fba7 	bl	8000580 <__aeabi_dmul>
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa f9e7 	bl	8000210 <__aeabi_dsub>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4682      	mov	sl, r0
 8005e48:	468b      	mov	fp, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa f9df 	bl	8000210 <__aeabi_dsub>
 8005e52:	4632      	mov	r2, r6
 8005e54:	463b      	mov	r3, r7
 8005e56:	f7fa f9db 	bl	8000210 <__aeabi_dsub>
 8005e5a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005ec8 <__ieee754_rem_pio2+0x318>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	4606      	mov	r6, r0
 8005e62:	460f      	mov	r7, r1
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	f7fa fb8a 	bl	8000580 <__aeabi_dmul>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	f7fa f9ce 	bl	8000210 <__aeabi_dsub>
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	e764      	b.n	8005d44 <__ieee754_rem_pio2+0x194>
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <__ieee754_rem_pio2+0x338>)
 8005e7c:	4598      	cmp	r8, r3
 8005e7e:	d935      	bls.n	8005eec <__ieee754_rem_pio2+0x33c>
 8005e80:	4632      	mov	r2, r6
 8005e82:	463b      	mov	r3, r7
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa f9c2 	bl	8000210 <__aeabi_dsub>
 8005e8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e90:	e9c4 0100 	strd	r0, r1, [r4]
 8005e94:	e69e      	b.n	8005bd4 <__ieee754_rem_pio2+0x24>
 8005e96:	bf00      	nop
 8005e98:	54400000 	.word	0x54400000
 8005e9c:	3ff921fb 	.word	0x3ff921fb
 8005ea0:	1a626331 	.word	0x1a626331
 8005ea4:	3dd0b461 	.word	0x3dd0b461
 8005ea8:	1a600000 	.word	0x1a600000
 8005eac:	3dd0b461 	.word	0x3dd0b461
 8005eb0:	2e037073 	.word	0x2e037073
 8005eb4:	3ba3198a 	.word	0x3ba3198a
 8005eb8:	6dc9c883 	.word	0x6dc9c883
 8005ebc:	3fe45f30 	.word	0x3fe45f30
 8005ec0:	2e000000 	.word	0x2e000000
 8005ec4:	3ba3198a 	.word	0x3ba3198a
 8005ec8:	252049c1 	.word	0x252049c1
 8005ecc:	397b839a 	.word	0x397b839a
 8005ed0:	3fe921fb 	.word	0x3fe921fb
 8005ed4:	4002d97b 	.word	0x4002d97b
 8005ed8:	3ff921fb 	.word	0x3ff921fb
 8005edc:	413921fb 	.word	0x413921fb
 8005ee0:	3fe00000 	.word	0x3fe00000
 8005ee4:	08006bf0 	.word	0x08006bf0
 8005ee8:	7fefffff 	.word	0x7fefffff
 8005eec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005ef0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005ef4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005ef8:	4630      	mov	r0, r6
 8005efa:	460f      	mov	r7, r1
 8005efc:	f7fa fdf0 	bl	8000ae0 <__aeabi_d2iz>
 8005f00:	f7fa fad4 	bl	80004ac <__aeabi_i2d>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f10:	f7fa f97e 	bl	8000210 <__aeabi_dsub>
 8005f14:	4b22      	ldr	r3, [pc, #136]	@ (8005fa0 <__ieee754_rem_pio2+0x3f0>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	f7fa fb32 	bl	8000580 <__aeabi_dmul>
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	4606      	mov	r6, r0
 8005f20:	f7fa fdde 	bl	8000ae0 <__aeabi_d2iz>
 8005f24:	f7fa fac2 	bl	80004ac <__aeabi_i2d>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f34:	f7fa f96c 	bl	8000210 <__aeabi_dsub>
 8005f38:	4b19      	ldr	r3, [pc, #100]	@ (8005fa0 <__ieee754_rem_pio2+0x3f0>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f7fa fb20 	bl	8000580 <__aeabi_dmul>
 8005f40:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005f44:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005f48:	f04f 0803 	mov.w	r8, #3
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	2700      	movs	r7, #0
 8005f50:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	46c2      	mov	sl, r8
 8005f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f5e:	f7fa fd77 	bl	8000a50 <__aeabi_dcmpeq>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1f4      	bne.n	8005f50 <__ieee754_rem_pio2+0x3a0>
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <__ieee754_rem_pio2+0x3f4>)
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	462a      	mov	r2, r5
 8005f70:	4653      	mov	r3, sl
 8005f72:	4621      	mov	r1, r4
 8005f74:	a806      	add	r0, sp, #24
 8005f76:	f000 f9b7 	bl	80062e8 <__kernel_rem_pio2>
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	4605      	mov	r5, r0
 8005f80:	f6bf ae53 	bge.w	8005c2a <__ieee754_rem_pio2+0x7a>
 8005f84:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005f88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f8c:	e9c4 2300 	strd	r2, r3, [r4]
 8005f90:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005f94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f98:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005f9c:	e740      	b.n	8005e20 <__ieee754_rem_pio2+0x270>
 8005f9e:	bf00      	nop
 8005fa0:	41700000 	.word	0x41700000
 8005fa4:	08006c70 	.word	0x08006c70

08005fa8 <atan>:
 8005fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	ec55 4b10 	vmov	r4, r5, d0
 8005fb0:	4bbf      	ldr	r3, [pc, #764]	@ (80062b0 <atan+0x308>)
 8005fb2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	46ab      	mov	fp, r5
 8005fba:	d918      	bls.n	8005fee <atan+0x46>
 8005fbc:	4bbd      	ldr	r3, [pc, #756]	@ (80062b4 <atan+0x30c>)
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	d801      	bhi.n	8005fc6 <atan+0x1e>
 8005fc2:	d109      	bne.n	8005fd8 <atan+0x30>
 8005fc4:	b144      	cbz	r4, 8005fd8 <atan+0x30>
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	f7fa f921 	bl	8000214 <__adddf3>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	e006      	b.n	8005fe6 <atan+0x3e>
 8005fd8:	f1bb 0f00 	cmp.w	fp, #0
 8005fdc:	f340 812b 	ble.w	8006236 <atan+0x28e>
 8005fe0:	a597      	add	r5, pc, #604	@ (adr r5, 8006240 <atan+0x298>)
 8005fe2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fe6:	ec45 4b10 	vmov	d0, r4, r5
 8005fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fee:	4bb2      	ldr	r3, [pc, #712]	@ (80062b8 <atan+0x310>)
 8005ff0:	429e      	cmp	r6, r3
 8005ff2:	d813      	bhi.n	800601c <atan+0x74>
 8005ff4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005ff8:	429e      	cmp	r6, r3
 8005ffa:	d80c      	bhi.n	8006016 <atan+0x6e>
 8005ffc:	a392      	add	r3, pc, #584	@ (adr r3, 8006248 <atan+0x2a0>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa f905 	bl	8000214 <__adddf3>
 800600a:	4bac      	ldr	r3, [pc, #688]	@ (80062bc <atan+0x314>)
 800600c:	2200      	movs	r2, #0
 800600e:	f7fa fd47 	bl	8000aa0 <__aeabi_dcmpgt>
 8006012:	2800      	cmp	r0, #0
 8006014:	d1e7      	bne.n	8005fe6 <atan+0x3e>
 8006016:	f04f 3aff 	mov.w	sl, #4294967295
 800601a:	e029      	b.n	8006070 <atan+0xc8>
 800601c:	f000 f95c 	bl	80062d8 <fabs>
 8006020:	4ba7      	ldr	r3, [pc, #668]	@ (80062c0 <atan+0x318>)
 8006022:	429e      	cmp	r6, r3
 8006024:	ec55 4b10 	vmov	r4, r5, d0
 8006028:	f200 80bc 	bhi.w	80061a4 <atan+0x1fc>
 800602c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006030:	429e      	cmp	r6, r3
 8006032:	f200 809e 	bhi.w	8006172 <atan+0x1ca>
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fa f8e9 	bl	8000214 <__adddf3>
 8006042:	4b9e      	ldr	r3, [pc, #632]	@ (80062bc <atan+0x314>)
 8006044:	2200      	movs	r2, #0
 8006046:	f7fa f8e3 	bl	8000210 <__aeabi_dsub>
 800604a:	2200      	movs	r2, #0
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa f8dc 	bl	8000214 <__adddf3>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4630      	mov	r0, r6
 8006062:	4639      	mov	r1, r7
 8006064:	f7fa fbb6 	bl	80007d4 <__aeabi_ddiv>
 8006068:	f04f 0a00 	mov.w	sl, #0
 800606c:	4604      	mov	r4, r0
 800606e:	460d      	mov	r5, r1
 8006070:	4622      	mov	r2, r4
 8006072:	462b      	mov	r3, r5
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fa82 	bl	8000580 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4680      	mov	r8, r0
 8006082:	4689      	mov	r9, r1
 8006084:	f7fa fa7c 	bl	8000580 <__aeabi_dmul>
 8006088:	a371      	add	r3, pc, #452	@ (adr r3, 8006250 <atan+0x2a8>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	4606      	mov	r6, r0
 8006090:	460f      	mov	r7, r1
 8006092:	f7fa fa75 	bl	8000580 <__aeabi_dmul>
 8006096:	a370      	add	r3, pc, #448	@ (adr r3, 8006258 <atan+0x2b0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f8ba 	bl	8000214 <__adddf3>
 80060a0:	4632      	mov	r2, r6
 80060a2:	463b      	mov	r3, r7
 80060a4:	f7fa fa6c 	bl	8000580 <__aeabi_dmul>
 80060a8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006260 <atan+0x2b8>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f8b1 	bl	8000214 <__adddf3>
 80060b2:	4632      	mov	r2, r6
 80060b4:	463b      	mov	r3, r7
 80060b6:	f7fa fa63 	bl	8000580 <__aeabi_dmul>
 80060ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8006268 <atan+0x2c0>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f8a8 	bl	8000214 <__adddf3>
 80060c4:	4632      	mov	r2, r6
 80060c6:	463b      	mov	r3, r7
 80060c8:	f7fa fa5a 	bl	8000580 <__aeabi_dmul>
 80060cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006270 <atan+0x2c8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f89f 	bl	8000214 <__adddf3>
 80060d6:	4632      	mov	r2, r6
 80060d8:	463b      	mov	r3, r7
 80060da:	f7fa fa51 	bl	8000580 <__aeabi_dmul>
 80060de:	a366      	add	r3, pc, #408	@ (adr r3, 8006278 <atan+0x2d0>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa f896 	bl	8000214 <__adddf3>
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	f7fa fa48 	bl	8000580 <__aeabi_dmul>
 80060f0:	a363      	add	r3, pc, #396	@ (adr r3, 8006280 <atan+0x2d8>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	4680      	mov	r8, r0
 80060f8:	4689      	mov	r9, r1
 80060fa:	4630      	mov	r0, r6
 80060fc:	4639      	mov	r1, r7
 80060fe:	f7fa fa3f 	bl	8000580 <__aeabi_dmul>
 8006102:	a361      	add	r3, pc, #388	@ (adr r3, 8006288 <atan+0x2e0>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f882 	bl	8000210 <__aeabi_dsub>
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	f7fa fa36 	bl	8000580 <__aeabi_dmul>
 8006114:	a35e      	add	r3, pc, #376	@ (adr r3, 8006290 <atan+0x2e8>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f7fa f879 	bl	8000210 <__aeabi_dsub>
 800611e:	4632      	mov	r2, r6
 8006120:	463b      	mov	r3, r7
 8006122:	f7fa fa2d 	bl	8000580 <__aeabi_dmul>
 8006126:	a35c      	add	r3, pc, #368	@ (adr r3, 8006298 <atan+0x2f0>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa f870 	bl	8000210 <__aeabi_dsub>
 8006130:	4632      	mov	r2, r6
 8006132:	463b      	mov	r3, r7
 8006134:	f7fa fa24 	bl	8000580 <__aeabi_dmul>
 8006138:	a359      	add	r3, pc, #356	@ (adr r3, 80062a0 <atan+0x2f8>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa f867 	bl	8000210 <__aeabi_dsub>
 8006142:	4632      	mov	r2, r6
 8006144:	463b      	mov	r3, r7
 8006146:	f7fa fa1b 	bl	8000580 <__aeabi_dmul>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa f85f 	bl	8000214 <__adddf3>
 8006156:	4622      	mov	r2, r4
 8006158:	462b      	mov	r3, r5
 800615a:	f7fa fa11 	bl	8000580 <__aeabi_dmul>
 800615e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	d148      	bne.n	80061fa <atan+0x252>
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa f850 	bl	8000210 <__aeabi_dsub>
 8006170:	e72f      	b.n	8005fd2 <atan+0x2a>
 8006172:	4b52      	ldr	r3, [pc, #328]	@ (80062bc <atan+0x314>)
 8006174:	2200      	movs	r2, #0
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa f849 	bl	8000210 <__aeabi_dsub>
 800617e:	4b4f      	ldr	r3, [pc, #316]	@ (80062bc <atan+0x314>)
 8006180:	4606      	mov	r6, r0
 8006182:	460f      	mov	r7, r1
 8006184:	2200      	movs	r2, #0
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa f843 	bl	8000214 <__adddf3>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa fb1d 	bl	80007d4 <__aeabi_ddiv>
 800619a:	f04f 0a01 	mov.w	sl, #1
 800619e:	4604      	mov	r4, r0
 80061a0:	460d      	mov	r5, r1
 80061a2:	e765      	b.n	8006070 <atan+0xc8>
 80061a4:	4b47      	ldr	r3, [pc, #284]	@ (80062c4 <atan+0x31c>)
 80061a6:	429e      	cmp	r6, r3
 80061a8:	d21c      	bcs.n	80061e4 <atan+0x23c>
 80061aa:	4b47      	ldr	r3, [pc, #284]	@ (80062c8 <atan+0x320>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f82d 	bl	8000210 <__aeabi_dsub>
 80061b6:	4b44      	ldr	r3, [pc, #272]	@ (80062c8 <atan+0x320>)
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	2200      	movs	r2, #0
 80061be:	4620      	mov	r0, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7fa f9dd 	bl	8000580 <__aeabi_dmul>
 80061c6:	4b3d      	ldr	r3, [pc, #244]	@ (80062bc <atan+0x314>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7fa f823 	bl	8000214 <__adddf3>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4630      	mov	r0, r6
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fafd 	bl	80007d4 <__aeabi_ddiv>
 80061da:	f04f 0a02 	mov.w	sl, #2
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	e745      	b.n	8006070 <atan+0xc8>
 80061e4:	4622      	mov	r2, r4
 80061e6:	462b      	mov	r3, r5
 80061e8:	4938      	ldr	r1, [pc, #224]	@ (80062cc <atan+0x324>)
 80061ea:	2000      	movs	r0, #0
 80061ec:	f7fa faf2 	bl	80007d4 <__aeabi_ddiv>
 80061f0:	f04f 0a03 	mov.w	sl, #3
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	e73a      	b.n	8006070 <atan+0xc8>
 80061fa:	4b35      	ldr	r3, [pc, #212]	@ (80062d0 <atan+0x328>)
 80061fc:	4e35      	ldr	r6, [pc, #212]	@ (80062d4 <atan+0x32c>)
 80061fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f803 	bl	8000210 <__aeabi_dsub>
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	f7f9 ffff 	bl	8000210 <__aeabi_dsub>
 8006212:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800621e:	f7f9 fff7 	bl	8000210 <__aeabi_dsub>
 8006222:	f1bb 0f00 	cmp.w	fp, #0
 8006226:	4604      	mov	r4, r0
 8006228:	460d      	mov	r5, r1
 800622a:	f6bf aedc 	bge.w	8005fe6 <atan+0x3e>
 800622e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006232:	461d      	mov	r5, r3
 8006234:	e6d7      	b.n	8005fe6 <atan+0x3e>
 8006236:	a51c      	add	r5, pc, #112	@ (adr r5, 80062a8 <atan+0x300>)
 8006238:	e9d5 4500 	ldrd	r4, r5, [r5]
 800623c:	e6d3      	b.n	8005fe6 <atan+0x3e>
 800623e:	bf00      	nop
 8006240:	54442d18 	.word	0x54442d18
 8006244:	3ff921fb 	.word	0x3ff921fb
 8006248:	8800759c 	.word	0x8800759c
 800624c:	7e37e43c 	.word	0x7e37e43c
 8006250:	e322da11 	.word	0xe322da11
 8006254:	3f90ad3a 	.word	0x3f90ad3a
 8006258:	24760deb 	.word	0x24760deb
 800625c:	3fa97b4b 	.word	0x3fa97b4b
 8006260:	a0d03d51 	.word	0xa0d03d51
 8006264:	3fb10d66 	.word	0x3fb10d66
 8006268:	c54c206e 	.word	0xc54c206e
 800626c:	3fb745cd 	.word	0x3fb745cd
 8006270:	920083ff 	.word	0x920083ff
 8006274:	3fc24924 	.word	0x3fc24924
 8006278:	5555550d 	.word	0x5555550d
 800627c:	3fd55555 	.word	0x3fd55555
 8006280:	2c6a6c2f 	.word	0x2c6a6c2f
 8006284:	bfa2b444 	.word	0xbfa2b444
 8006288:	52defd9a 	.word	0x52defd9a
 800628c:	3fadde2d 	.word	0x3fadde2d
 8006290:	af749a6d 	.word	0xaf749a6d
 8006294:	3fb3b0f2 	.word	0x3fb3b0f2
 8006298:	fe231671 	.word	0xfe231671
 800629c:	3fbc71c6 	.word	0x3fbc71c6
 80062a0:	9998ebc4 	.word	0x9998ebc4
 80062a4:	3fc99999 	.word	0x3fc99999
 80062a8:	54442d18 	.word	0x54442d18
 80062ac:	bff921fb 	.word	0xbff921fb
 80062b0:	440fffff 	.word	0x440fffff
 80062b4:	7ff00000 	.word	0x7ff00000
 80062b8:	3fdbffff 	.word	0x3fdbffff
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	3ff2ffff 	.word	0x3ff2ffff
 80062c4:	40038000 	.word	0x40038000
 80062c8:	3ff80000 	.word	0x3ff80000
 80062cc:	bff00000 	.word	0xbff00000
 80062d0:	08006d78 	.word	0x08006d78
 80062d4:	08006d98 	.word	0x08006d98

080062d8 <fabs>:
 80062d8:	ec51 0b10 	vmov	r0, r1, d0
 80062dc:	4602      	mov	r2, r0
 80062de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062e2:	ec43 2b10 	vmov	d0, r2, r3
 80062e6:	4770      	bx	lr

080062e8 <__kernel_rem_pio2>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	ed2d 8b02 	vpush	{d8}
 80062f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80062f4:	f112 0f14 	cmn.w	r2, #20
 80062f8:	9306      	str	r3, [sp, #24]
 80062fa:	9104      	str	r1, [sp, #16]
 80062fc:	4bbe      	ldr	r3, [pc, #760]	@ (80065f8 <__kernel_rem_pio2+0x310>)
 80062fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006300:	9008      	str	r0, [sp, #32]
 8006302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	9b06      	ldr	r3, [sp, #24]
 800630a:	f103 33ff 	add.w	r3, r3, #4294967295
 800630e:	bfa8      	it	ge
 8006310:	1ed4      	subge	r4, r2, #3
 8006312:	9305      	str	r3, [sp, #20]
 8006314:	bfb2      	itee	lt
 8006316:	2400      	movlt	r4, #0
 8006318:	2318      	movge	r3, #24
 800631a:	fb94 f4f3 	sdivge	r4, r4, r3
 800631e:	f06f 0317 	mvn.w	r3, #23
 8006322:	fb04 3303 	mla	r3, r4, r3, r3
 8006326:	eb03 0b02 	add.w	fp, r3, r2
 800632a:	9b00      	ldr	r3, [sp, #0]
 800632c:	9a05      	ldr	r2, [sp, #20]
 800632e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80065e8 <__kernel_rem_pio2+0x300>
 8006332:	eb03 0802 	add.w	r8, r3, r2
 8006336:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006338:	1aa7      	subs	r7, r4, r2
 800633a:	ae20      	add	r6, sp, #128	@ 0x80
 800633c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006340:	2500      	movs	r5, #0
 8006342:	4545      	cmp	r5, r8
 8006344:	dd13      	ble.n	800636e <__kernel_rem_pio2+0x86>
 8006346:	9b06      	ldr	r3, [sp, #24]
 8006348:	aa20      	add	r2, sp, #128	@ 0x80
 800634a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800634e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	4598      	cmp	r8, r3
 800635a:	dc31      	bgt.n	80063c0 <__kernel_rem_pio2+0xd8>
 800635c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80065e8 <__kernel_rem_pio2+0x300>
 8006360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006364:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006368:	462f      	mov	r7, r5
 800636a:	2600      	movs	r6, #0
 800636c:	e01b      	b.n	80063a6 <__kernel_rem_pio2+0xbe>
 800636e:	42ef      	cmn	r7, r5
 8006370:	d407      	bmi.n	8006382 <__kernel_rem_pio2+0x9a>
 8006372:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006376:	f7fa f899 	bl	80004ac <__aeabi_i2d>
 800637a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800637e:	3501      	adds	r5, #1
 8006380:	e7df      	b.n	8006342 <__kernel_rem_pio2+0x5a>
 8006382:	ec51 0b18 	vmov	r0, r1, d8
 8006386:	e7f8      	b.n	800637a <__kernel_rem_pio2+0x92>
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006390:	f7fa f8f6 	bl	8000580 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639c:	f7f9 ff3a 	bl	8000214 <__adddf3>
 80063a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a4:	3601      	adds	r6, #1
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	429e      	cmp	r6, r3
 80063aa:	f1a7 0708 	sub.w	r7, r7, #8
 80063ae:	ddeb      	ble.n	8006388 <__kernel_rem_pio2+0xa0>
 80063b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063b4:	f108 0801 	add.w	r8, r8, #1
 80063b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80063bc:	3508      	adds	r5, #8
 80063be:	e7ca      	b.n	8006356 <__kernel_rem_pio2+0x6e>
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	f8dd 8000 	ldr.w	r8, [sp]
 80063c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80063c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80063d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80063d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80063da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063dc:	ab98      	add	r3, sp, #608	@ 0x260
 80063de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80063e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80063e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80063ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80063ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80063f2:	46a1      	mov	r9, r4
 80063f4:	46c2      	mov	sl, r8
 80063f6:	f1ba 0f00 	cmp.w	sl, #0
 80063fa:	f1a5 0508 	sub.w	r5, r5, #8
 80063fe:	dc77      	bgt.n	80064f0 <__kernel_rem_pio2+0x208>
 8006400:	4658      	mov	r0, fp
 8006402:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006406:	f000 fac7 	bl	8006998 <scalbn>
 800640a:	ec57 6b10 	vmov	r6, r7, d0
 800640e:	2200      	movs	r2, #0
 8006410:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa f8b2 	bl	8000580 <__aeabi_dmul>
 800641c:	ec41 0b10 	vmov	d0, r0, r1
 8006420:	f000 fb3a 	bl	8006a98 <floor>
 8006424:	4b75      	ldr	r3, [pc, #468]	@ (80065fc <__kernel_rem_pio2+0x314>)
 8006426:	ec51 0b10 	vmov	r0, r1, d0
 800642a:	2200      	movs	r2, #0
 800642c:	f7fa f8a8 	bl	8000580 <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f7f9 feea 	bl	8000210 <__aeabi_dsub>
 800643c:	460f      	mov	r7, r1
 800643e:	4606      	mov	r6, r0
 8006440:	f7fa fb4e 	bl	8000ae0 <__aeabi_d2iz>
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	f7fa f831 	bl	80004ac <__aeabi_i2d>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f7f9 fedd 	bl	8000210 <__aeabi_dsub>
 8006456:	f1bb 0f00 	cmp.w	fp, #0
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	dd6c      	ble.n	800653a <__kernel_rem_pio2+0x252>
 8006460:	f108 31ff 	add.w	r1, r8, #4294967295
 8006464:	ab0c      	add	r3, sp, #48	@ 0x30
 8006466:	9d02      	ldr	r5, [sp, #8]
 8006468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800646c:	f1cb 0018 	rsb	r0, fp, #24
 8006470:	fa43 f200 	asr.w	r2, r3, r0
 8006474:	4415      	add	r5, r2
 8006476:	4082      	lsls	r2, r0
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	aa0c      	add	r2, sp, #48	@ 0x30
 800647c:	9502      	str	r5, [sp, #8]
 800647e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006482:	f1cb 0217 	rsb	r2, fp, #23
 8006486:	fa43 f902 	asr.w	r9, r3, r2
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	dd64      	ble.n	800655a <__kernel_rem_pio2+0x272>
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	3301      	adds	r3, #1
 8006496:	9302      	str	r3, [sp, #8]
 8006498:	4615      	mov	r5, r2
 800649a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800649e:	4590      	cmp	r8, r2
 80064a0:	f300 80b8 	bgt.w	8006614 <__kernel_rem_pio2+0x32c>
 80064a4:	f1bb 0f00 	cmp.w	fp, #0
 80064a8:	dd07      	ble.n	80064ba <__kernel_rem_pio2+0x1d2>
 80064aa:	f1bb 0f01 	cmp.w	fp, #1
 80064ae:	f000 80bf 	beq.w	8006630 <__kernel_rem_pio2+0x348>
 80064b2:	f1bb 0f02 	cmp.w	fp, #2
 80064b6:	f000 80c6 	beq.w	8006646 <__kernel_rem_pio2+0x35e>
 80064ba:	f1b9 0f02 	cmp.w	r9, #2
 80064be:	d14c      	bne.n	800655a <__kernel_rem_pio2+0x272>
 80064c0:	4632      	mov	r2, r6
 80064c2:	463b      	mov	r3, r7
 80064c4:	494e      	ldr	r1, [pc, #312]	@ (8006600 <__kernel_rem_pio2+0x318>)
 80064c6:	2000      	movs	r0, #0
 80064c8:	f7f9 fea2 	bl	8000210 <__aeabi_dsub>
 80064cc:	4606      	mov	r6, r0
 80064ce:	460f      	mov	r7, r1
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d042      	beq.n	800655a <__kernel_rem_pio2+0x272>
 80064d4:	4658      	mov	r0, fp
 80064d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80065f0 <__kernel_rem_pio2+0x308>
 80064da:	f000 fa5d 	bl	8006998 <scalbn>
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	ec53 2b10 	vmov	r2, r3, d0
 80064e6:	f7f9 fe93 	bl	8000210 <__aeabi_dsub>
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	e034      	b.n	800655a <__kernel_rem_pio2+0x272>
 80064f0:	4b44      	ldr	r3, [pc, #272]	@ (8006604 <__kernel_rem_pio2+0x31c>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f8:	f7fa f842 	bl	8000580 <__aeabi_dmul>
 80064fc:	f7fa faf0 	bl	8000ae0 <__aeabi_d2iz>
 8006500:	f7f9 ffd4 	bl	80004ac <__aeabi_i2d>
 8006504:	4b40      	ldr	r3, [pc, #256]	@ (8006608 <__kernel_rem_pio2+0x320>)
 8006506:	2200      	movs	r2, #0
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	f7fa f838 	bl	8000580 <__aeabi_dmul>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006518:	f7f9 fe7a 	bl	8000210 <__aeabi_dsub>
 800651c:	f7fa fae0 	bl	8000ae0 <__aeabi_d2iz>
 8006520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006524:	f849 0b04 	str.w	r0, [r9], #4
 8006528:	4639      	mov	r1, r7
 800652a:	4630      	mov	r0, r6
 800652c:	f7f9 fe72 	bl	8000214 <__adddf3>
 8006530:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006538:	e75d      	b.n	80063f6 <__kernel_rem_pio2+0x10e>
 800653a:	d107      	bne.n	800654c <__kernel_rem_pio2+0x264>
 800653c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006540:	aa0c      	add	r2, sp, #48	@ 0x30
 8006542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006546:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800654a:	e79e      	b.n	800648a <__kernel_rem_pio2+0x1a2>
 800654c:	4b2f      	ldr	r3, [pc, #188]	@ (800660c <__kernel_rem_pio2+0x324>)
 800654e:	2200      	movs	r2, #0
 8006550:	f7fa fa9c 	bl	8000a8c <__aeabi_dcmpge>
 8006554:	2800      	cmp	r0, #0
 8006556:	d143      	bne.n	80065e0 <__kernel_rem_pio2+0x2f8>
 8006558:	4681      	mov	r9, r0
 800655a:	2200      	movs	r2, #0
 800655c:	2300      	movs	r3, #0
 800655e:	4630      	mov	r0, r6
 8006560:	4639      	mov	r1, r7
 8006562:	f7fa fa75 	bl	8000a50 <__aeabi_dcmpeq>
 8006566:	2800      	cmp	r0, #0
 8006568:	f000 80bf 	beq.w	80066ea <__kernel_rem_pio2+0x402>
 800656c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006570:	2200      	movs	r2, #0
 8006572:	9900      	ldr	r1, [sp, #0]
 8006574:	428b      	cmp	r3, r1
 8006576:	da6e      	bge.n	8006656 <__kernel_rem_pio2+0x36e>
 8006578:	2a00      	cmp	r2, #0
 800657a:	f000 8089 	beq.w	8006690 <__kernel_rem_pio2+0x3a8>
 800657e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006582:	ab0c      	add	r3, sp, #48	@ 0x30
 8006584:	f1ab 0b18 	sub.w	fp, fp, #24
 8006588:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f6      	beq.n	800657e <__kernel_rem_pio2+0x296>
 8006590:	4658      	mov	r0, fp
 8006592:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80065f0 <__kernel_rem_pio2+0x308>
 8006596:	f000 f9ff 	bl	8006998 <scalbn>
 800659a:	f108 0301 	add.w	r3, r8, #1
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	9205      	str	r2, [sp, #20]
 80065a2:	ec55 4b10 	vmov	r4, r5, d0
 80065a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80065a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006604 <__kernel_rem_pio2+0x31c>
 80065ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80065b0:	4646      	mov	r6, r8
 80065b2:	f04f 0a00 	mov.w	sl, #0
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	f280 80cf 	bge.w	800675a <__kernel_rem_pio2+0x472>
 80065bc:	4644      	mov	r4, r8
 80065be:	2c00      	cmp	r4, #0
 80065c0:	f2c0 80fd 	blt.w	80067be <__kernel_rem_pio2+0x4d6>
 80065c4:	4b12      	ldr	r3, [pc, #72]	@ (8006610 <__kernel_rem_pio2+0x328>)
 80065c6:	461f      	mov	r7, r3
 80065c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80065ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065ce:	9306      	str	r3, [sp, #24]
 80065d0:	f04f 0a00 	mov.w	sl, #0
 80065d4:	f04f 0b00 	mov.w	fp, #0
 80065d8:	2600      	movs	r6, #0
 80065da:	eba8 0504 	sub.w	r5, r8, r4
 80065de:	e0e2      	b.n	80067a6 <__kernel_rem_pio2+0x4be>
 80065e0:	f04f 0902 	mov.w	r9, #2
 80065e4:	e754      	b.n	8006490 <__kernel_rem_pio2+0x1a8>
 80065e6:	bf00      	nop
	...
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	08006df8 	.word	0x08006df8
 80065fc:	40200000 	.word	0x40200000
 8006600:	3ff00000 	.word	0x3ff00000
 8006604:	3e700000 	.word	0x3e700000
 8006608:	41700000 	.word	0x41700000
 800660c:	3fe00000 	.word	0x3fe00000
 8006610:	08006db8 	.word	0x08006db8
 8006614:	f854 3b04 	ldr.w	r3, [r4], #4
 8006618:	b945      	cbnz	r5, 800662c <__kernel_rem_pio2+0x344>
 800661a:	b123      	cbz	r3, 8006626 <__kernel_rem_pio2+0x33e>
 800661c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006620:	f844 3c04 	str.w	r3, [r4, #-4]
 8006624:	2301      	movs	r3, #1
 8006626:	3201      	adds	r2, #1
 8006628:	461d      	mov	r5, r3
 800662a:	e738      	b.n	800649e <__kernel_rem_pio2+0x1b6>
 800662c:	1acb      	subs	r3, r1, r3
 800662e:	e7f7      	b.n	8006620 <__kernel_rem_pio2+0x338>
 8006630:	f108 32ff 	add.w	r2, r8, #4294967295
 8006634:	ab0c      	add	r3, sp, #48	@ 0x30
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800663e:	a90c      	add	r1, sp, #48	@ 0x30
 8006640:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006644:	e739      	b.n	80064ba <__kernel_rem_pio2+0x1d2>
 8006646:	f108 32ff 	add.w	r2, r8, #4294967295
 800664a:	ab0c      	add	r3, sp, #48	@ 0x30
 800664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006650:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006654:	e7f3      	b.n	800663e <__kernel_rem_pio2+0x356>
 8006656:	a90c      	add	r1, sp, #48	@ 0x30
 8006658:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800665c:	3b01      	subs	r3, #1
 800665e:	430a      	orrs	r2, r1
 8006660:	e787      	b.n	8006572 <__kernel_rem_pio2+0x28a>
 8006662:	3401      	adds	r4, #1
 8006664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006668:	2a00      	cmp	r2, #0
 800666a:	d0fa      	beq.n	8006662 <__kernel_rem_pio2+0x37a>
 800666c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800666e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006672:	eb0d 0503 	add.w	r5, sp, r3
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	aa20      	add	r2, sp, #128	@ 0x80
 800667a:	4443      	add	r3, r8
 800667c:	f108 0701 	add.w	r7, r8, #1
 8006680:	3d98      	subs	r5, #152	@ 0x98
 8006682:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006686:	4444      	add	r4, r8
 8006688:	42bc      	cmp	r4, r7
 800668a:	da04      	bge.n	8006696 <__kernel_rem_pio2+0x3ae>
 800668c:	46a0      	mov	r8, r4
 800668e:	e6a2      	b.n	80063d6 <__kernel_rem_pio2+0xee>
 8006690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006692:	2401      	movs	r4, #1
 8006694:	e7e6      	b.n	8006664 <__kernel_rem_pio2+0x37c>
 8006696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006698:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800669c:	f7f9 ff06 	bl	80004ac <__aeabi_i2d>
 80066a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006968 <__kernel_rem_pio2+0x680>
 80066a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80066a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066b0:	46b2      	mov	sl, r6
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	4598      	cmp	r8, r3
 80066ba:	dd05      	ble.n	80066c8 <__kernel_rem_pio2+0x3e0>
 80066bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066c0:	3701      	adds	r7, #1
 80066c2:	eca5 7b02 	vstmia	r5!, {d7}
 80066c6:	e7df      	b.n	8006688 <__kernel_rem_pio2+0x3a0>
 80066c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80066cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80066d0:	f7f9 ff56 	bl	8000580 <__aeabi_dmul>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066dc:	f7f9 fd9a 	bl	8000214 <__adddf3>
 80066e0:	f108 0801 	add.w	r8, r8, #1
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	e7e5      	b.n	80066b6 <__kernel_rem_pio2+0x3ce>
 80066ea:	f1cb 0000 	rsb	r0, fp, #0
 80066ee:	ec47 6b10 	vmov	d0, r6, r7
 80066f2:	f000 f951 	bl	8006998 <scalbn>
 80066f6:	ec55 4b10 	vmov	r4, r5, d0
 80066fa:	4b9d      	ldr	r3, [pc, #628]	@ (8006970 <__kernel_rem_pio2+0x688>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	4620      	mov	r0, r4
 8006700:	4629      	mov	r1, r5
 8006702:	f7fa f9c3 	bl	8000a8c <__aeabi_dcmpge>
 8006706:	b300      	cbz	r0, 800674a <__kernel_rem_pio2+0x462>
 8006708:	4b9a      	ldr	r3, [pc, #616]	@ (8006974 <__kernel_rem_pio2+0x68c>)
 800670a:	2200      	movs	r2, #0
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f7f9 ff36 	bl	8000580 <__aeabi_dmul>
 8006714:	f7fa f9e4 	bl	8000ae0 <__aeabi_d2iz>
 8006718:	4606      	mov	r6, r0
 800671a:	f7f9 fec7 	bl	80004ac <__aeabi_i2d>
 800671e:	4b94      	ldr	r3, [pc, #592]	@ (8006970 <__kernel_rem_pio2+0x688>)
 8006720:	2200      	movs	r2, #0
 8006722:	f7f9 ff2d 	bl	8000580 <__aeabi_dmul>
 8006726:	460b      	mov	r3, r1
 8006728:	4602      	mov	r2, r0
 800672a:	4629      	mov	r1, r5
 800672c:	4620      	mov	r0, r4
 800672e:	f7f9 fd6f 	bl	8000210 <__aeabi_dsub>
 8006732:	f7fa f9d5 	bl	8000ae0 <__aeabi_d2iz>
 8006736:	ab0c      	add	r3, sp, #48	@ 0x30
 8006738:	f10b 0b18 	add.w	fp, fp, #24
 800673c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006740:	f108 0801 	add.w	r8, r8, #1
 8006744:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006748:	e722      	b.n	8006590 <__kernel_rem_pio2+0x2a8>
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	f7fa f9c7 	bl	8000ae0 <__aeabi_d2iz>
 8006752:	ab0c      	add	r3, sp, #48	@ 0x30
 8006754:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006758:	e71a      	b.n	8006590 <__kernel_rem_pio2+0x2a8>
 800675a:	ab0c      	add	r3, sp, #48	@ 0x30
 800675c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006760:	f7f9 fea4 	bl	80004ac <__aeabi_i2d>
 8006764:	4622      	mov	r2, r4
 8006766:	462b      	mov	r3, r5
 8006768:	f7f9 ff0a 	bl	8000580 <__aeabi_dmul>
 800676c:	4652      	mov	r2, sl
 800676e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006772:	465b      	mov	r3, fp
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 ff02 	bl	8000580 <__aeabi_dmul>
 800677c:	3e01      	subs	r6, #1
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	e718      	b.n	80065b6 <__kernel_rem_pio2+0x2ce>
 8006784:	9906      	ldr	r1, [sp, #24]
 8006786:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800678a:	9106      	str	r1, [sp, #24]
 800678c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006790:	f7f9 fef6 	bl	8000580 <__aeabi_dmul>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4650      	mov	r0, sl
 800679a:	4659      	mov	r1, fp
 800679c:	f7f9 fd3a 	bl	8000214 <__adddf3>
 80067a0:	3601      	adds	r6, #1
 80067a2:	4682      	mov	sl, r0
 80067a4:	468b      	mov	fp, r1
 80067a6:	9b00      	ldr	r3, [sp, #0]
 80067a8:	429e      	cmp	r6, r3
 80067aa:	dc01      	bgt.n	80067b0 <__kernel_rem_pio2+0x4c8>
 80067ac:	42b5      	cmp	r5, r6
 80067ae:	dae9      	bge.n	8006784 <__kernel_rem_pio2+0x49c>
 80067b0:	ab48      	add	r3, sp, #288	@ 0x120
 80067b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80067b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80067ba:	3c01      	subs	r4, #1
 80067bc:	e6ff      	b.n	80065be <__kernel_rem_pio2+0x2d6>
 80067be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	dc0b      	bgt.n	80067dc <__kernel_rem_pio2+0x4f4>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dc39      	bgt.n	800683c <__kernel_rem_pio2+0x554>
 80067c8:	d05d      	beq.n	8006886 <__kernel_rem_pio2+0x59e>
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	f003 0007 	and.w	r0, r3, #7
 80067d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80067d4:	ecbd 8b02 	vpop	{d8}
 80067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d1f3      	bne.n	80067ca <__kernel_rem_pio2+0x4e2>
 80067e2:	9b05      	ldr	r3, [sp, #20]
 80067e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067e8:	eb0d 0403 	add.w	r4, sp, r3
 80067ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80067f0:	4625      	mov	r5, r4
 80067f2:	46c2      	mov	sl, r8
 80067f4:	f1ba 0f00 	cmp.w	sl, #0
 80067f8:	f1a5 0508 	sub.w	r5, r5, #8
 80067fc:	dc6b      	bgt.n	80068d6 <__kernel_rem_pio2+0x5ee>
 80067fe:	4645      	mov	r5, r8
 8006800:	2d01      	cmp	r5, #1
 8006802:	f1a4 0408 	sub.w	r4, r4, #8
 8006806:	f300 8087 	bgt.w	8006918 <__kernel_rem_pio2+0x630>
 800680a:	9c05      	ldr	r4, [sp, #20]
 800680c:	ab48      	add	r3, sp, #288	@ 0x120
 800680e:	441c      	add	r4, r3
 8006810:	2000      	movs	r0, #0
 8006812:	2100      	movs	r1, #0
 8006814:	f1b8 0f01 	cmp.w	r8, #1
 8006818:	f300 809c 	bgt.w	8006954 <__kernel_rem_pio2+0x66c>
 800681c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006820:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	f040 80a6 	bne.w	8006978 <__kernel_rem_pio2+0x690>
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	e9c3 7800 	strd	r7, r8, [r3]
 8006832:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006836:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800683a:	e7c6      	b.n	80067ca <__kernel_rem_pio2+0x4e2>
 800683c:	9d05      	ldr	r5, [sp, #20]
 800683e:	ab48      	add	r3, sp, #288	@ 0x120
 8006840:	441d      	add	r5, r3
 8006842:	4644      	mov	r4, r8
 8006844:	2000      	movs	r0, #0
 8006846:	2100      	movs	r1, #0
 8006848:	2c00      	cmp	r4, #0
 800684a:	da35      	bge.n	80068b8 <__kernel_rem_pio2+0x5d0>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	d038      	beq.n	80068c4 <__kernel_rem_pio2+0x5dc>
 8006852:	4602      	mov	r2, r0
 8006854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006858:	9c04      	ldr	r4, [sp, #16]
 800685a:	e9c4 2300 	strd	r2, r3, [r4]
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006866:	f7f9 fcd3 	bl	8000210 <__aeabi_dsub>
 800686a:	ad4a      	add	r5, sp, #296	@ 0x128
 800686c:	2401      	movs	r4, #1
 800686e:	45a0      	cmp	r8, r4
 8006870:	da2b      	bge.n	80068ca <__kernel_rem_pio2+0x5e2>
 8006872:	f1b9 0f00 	cmp.w	r9, #0
 8006876:	d002      	beq.n	800687e <__kernel_rem_pio2+0x596>
 8006878:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800687c:	4619      	mov	r1, r3
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006884:	e7a1      	b.n	80067ca <__kernel_rem_pio2+0x4e2>
 8006886:	9c05      	ldr	r4, [sp, #20]
 8006888:	ab48      	add	r3, sp, #288	@ 0x120
 800688a:	441c      	add	r4, r3
 800688c:	2000      	movs	r0, #0
 800688e:	2100      	movs	r1, #0
 8006890:	f1b8 0f00 	cmp.w	r8, #0
 8006894:	da09      	bge.n	80068aa <__kernel_rem_pio2+0x5c2>
 8006896:	f1b9 0f00 	cmp.w	r9, #0
 800689a:	d002      	beq.n	80068a2 <__kernel_rem_pio2+0x5ba>
 800689c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068a0:	4619      	mov	r1, r3
 80068a2:	9b04      	ldr	r3, [sp, #16]
 80068a4:	e9c3 0100 	strd	r0, r1, [r3]
 80068a8:	e78f      	b.n	80067ca <__kernel_rem_pio2+0x4e2>
 80068aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80068ae:	f7f9 fcb1 	bl	8000214 <__adddf3>
 80068b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80068b6:	e7eb      	b.n	8006890 <__kernel_rem_pio2+0x5a8>
 80068b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80068bc:	f7f9 fcaa 	bl	8000214 <__adddf3>
 80068c0:	3c01      	subs	r4, #1
 80068c2:	e7c1      	b.n	8006848 <__kernel_rem_pio2+0x560>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	e7c6      	b.n	8006858 <__kernel_rem_pio2+0x570>
 80068ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80068ce:	f7f9 fca1 	bl	8000214 <__adddf3>
 80068d2:	3401      	adds	r4, #1
 80068d4:	e7cb      	b.n	800686e <__kernel_rem_pio2+0x586>
 80068d6:	ed95 7b00 	vldr	d7, [r5]
 80068da:	ed8d 7b00 	vstr	d7, [sp]
 80068de:	ed95 7b02 	vldr	d7, [r5, #8]
 80068e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e6:	ec53 2b17 	vmov	r2, r3, d7
 80068ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068ee:	f7f9 fc91 	bl	8000214 <__adddf3>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4606      	mov	r6, r0
 80068f8:	460f      	mov	r7, r1
 80068fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068fe:	f7f9 fc87 	bl	8000210 <__aeabi_dsub>
 8006902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006906:	f7f9 fc85 	bl	8000214 <__adddf3>
 800690a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800690e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006912:	e9c5 6700 	strd	r6, r7, [r5]
 8006916:	e76d      	b.n	80067f4 <__kernel_rem_pio2+0x50c>
 8006918:	ed94 7b00 	vldr	d7, [r4]
 800691c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006920:	ec51 0b17 	vmov	r0, r1, d7
 8006924:	4652      	mov	r2, sl
 8006926:	465b      	mov	r3, fp
 8006928:	ed8d 7b00 	vstr	d7, [sp]
 800692c:	f7f9 fc72 	bl	8000214 <__adddf3>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4606      	mov	r6, r0
 8006936:	460f      	mov	r7, r1
 8006938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800693c:	f7f9 fc68 	bl	8000210 <__aeabi_dsub>
 8006940:	4652      	mov	r2, sl
 8006942:	465b      	mov	r3, fp
 8006944:	f7f9 fc66 	bl	8000214 <__adddf3>
 8006948:	3d01      	subs	r5, #1
 800694a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800694e:	e9c4 6700 	strd	r6, r7, [r4]
 8006952:	e755      	b.n	8006800 <__kernel_rem_pio2+0x518>
 8006954:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006958:	f7f9 fc5c 	bl	8000214 <__adddf3>
 800695c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006960:	e758      	b.n	8006814 <__kernel_rem_pio2+0x52c>
 8006962:	bf00      	nop
 8006964:	f3af 8000 	nop.w
	...
 8006970:	41700000 	.word	0x41700000
 8006974:	3e700000 	.word	0x3e700000
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	9a04      	ldr	r2, [sp, #16]
 800697c:	601f      	str	r7, [r3, #0]
 800697e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006982:	605c      	str	r4, [r3, #4]
 8006984:	609d      	str	r5, [r3, #8]
 8006986:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800698a:	60d3      	str	r3, [r2, #12]
 800698c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006990:	6110      	str	r0, [r2, #16]
 8006992:	6153      	str	r3, [r2, #20]
 8006994:	e719      	b.n	80067ca <__kernel_rem_pio2+0x4e2>
 8006996:	bf00      	nop

08006998 <scalbn>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	ec55 4b10 	vmov	r4, r5, d0
 800699e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80069a2:	4606      	mov	r6, r0
 80069a4:	462b      	mov	r3, r5
 80069a6:	b991      	cbnz	r1, 80069ce <scalbn+0x36>
 80069a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80069ac:	4323      	orrs	r3, r4
 80069ae:	d03d      	beq.n	8006a2c <scalbn+0x94>
 80069b0:	4b35      	ldr	r3, [pc, #212]	@ (8006a88 <scalbn+0xf0>)
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	2200      	movs	r2, #0
 80069b8:	f7f9 fde2 	bl	8000580 <__aeabi_dmul>
 80069bc:	4b33      	ldr	r3, [pc, #204]	@ (8006a8c <scalbn+0xf4>)
 80069be:	429e      	cmp	r6, r3
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	da0f      	bge.n	80069e6 <scalbn+0x4e>
 80069c6:	a328      	add	r3, pc, #160	@ (adr r3, 8006a68 <scalbn+0xd0>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	e01e      	b.n	8006a0c <scalbn+0x74>
 80069ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80069d2:	4291      	cmp	r1, r2
 80069d4:	d10b      	bne.n	80069ee <scalbn+0x56>
 80069d6:	4622      	mov	r2, r4
 80069d8:	4620      	mov	r0, r4
 80069da:	4629      	mov	r1, r5
 80069dc:	f7f9 fc1a 	bl	8000214 <__adddf3>
 80069e0:	4604      	mov	r4, r0
 80069e2:	460d      	mov	r5, r1
 80069e4:	e022      	b.n	8006a2c <scalbn+0x94>
 80069e6:	460b      	mov	r3, r1
 80069e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069ec:	3936      	subs	r1, #54	@ 0x36
 80069ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80069f2:	4296      	cmp	r6, r2
 80069f4:	dd0d      	ble.n	8006a12 <scalbn+0x7a>
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006a70 <scalbn+0xd8>)
 80069fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fe:	da02      	bge.n	8006a06 <scalbn+0x6e>
 8006a00:	a11d      	add	r1, pc, #116	@ (adr r1, 8006a78 <scalbn+0xe0>)
 8006a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a06:	a31a      	add	r3, pc, #104	@ (adr r3, 8006a70 <scalbn+0xd8>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 fdb8 	bl	8000580 <__aeabi_dmul>
 8006a10:	e7e6      	b.n	80069e0 <scalbn+0x48>
 8006a12:	1872      	adds	r2, r6, r1
 8006a14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006a18:	428a      	cmp	r2, r1
 8006a1a:	dcec      	bgt.n	80069f6 <scalbn+0x5e>
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	dd08      	ble.n	8006a32 <scalbn+0x9a>
 8006a20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a2c:	ec45 4b10 	vmov	d0, r4, r5
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
 8006a32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006a36:	da08      	bge.n	8006a4a <scalbn+0xb2>
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006a68 <scalbn+0xd0>)
 8006a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a40:	dac1      	bge.n	80069c6 <scalbn+0x2e>
 8006a42:	a10f      	add	r1, pc, #60	@ (adr r1, 8006a80 <scalbn+0xe8>)
 8006a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a48:	e7bd      	b.n	80069c6 <scalbn+0x2e>
 8006a4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a4e:	3236      	adds	r2, #54	@ 0x36
 8006a50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006a54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <scalbn+0xf8>)
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	2200      	movs	r2, #0
 8006a60:	e7d4      	b.n	8006a0c <scalbn+0x74>
 8006a62:	bf00      	nop
 8006a64:	f3af 8000 	nop.w
 8006a68:	c2f8f359 	.word	0xc2f8f359
 8006a6c:	01a56e1f 	.word	0x01a56e1f
 8006a70:	8800759c 	.word	0x8800759c
 8006a74:	7e37e43c 	.word	0x7e37e43c
 8006a78:	8800759c 	.word	0x8800759c
 8006a7c:	fe37e43c 	.word	0xfe37e43c
 8006a80:	c2f8f359 	.word	0xc2f8f359
 8006a84:	81a56e1f 	.word	0x81a56e1f
 8006a88:	43500000 	.word	0x43500000
 8006a8c:	ffff3cb0 	.word	0xffff3cb0
 8006a90:	3c900000 	.word	0x3c900000
 8006a94:	00000000 	.word	0x00000000

08006a98 <floor>:
 8006a98:	ec51 0b10 	vmov	r0, r1, d0
 8006a9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006aa8:	2e13      	cmp	r6, #19
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4605      	mov	r5, r0
 8006aae:	4680      	mov	r8, r0
 8006ab0:	dc34      	bgt.n	8006b1c <floor+0x84>
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	da17      	bge.n	8006ae6 <floor+0x4e>
 8006ab6:	a332      	add	r3, pc, #200	@ (adr r3, 8006b80 <floor+0xe8>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fbaa 	bl	8000214 <__adddf3>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f7f9 ffec 	bl	8000aa0 <__aeabi_dcmpgt>
 8006ac8:	b150      	cbz	r0, 8006ae0 <floor+0x48>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	da55      	bge.n	8006b7a <floor+0xe2>
 8006ace:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006ad2:	432c      	orrs	r4, r5
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	42ac      	cmp	r4, r5
 8006ad8:	4c2b      	ldr	r4, [pc, #172]	@ (8006b88 <floor+0xf0>)
 8006ada:	bf08      	it	eq
 8006adc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	e023      	b.n	8006b2e <floor+0x96>
 8006ae6:	4f29      	ldr	r7, [pc, #164]	@ (8006b8c <floor+0xf4>)
 8006ae8:	4137      	asrs	r7, r6
 8006aea:	ea01 0307 	and.w	r3, r1, r7
 8006aee:	4303      	orrs	r3, r0
 8006af0:	d01d      	beq.n	8006b2e <floor+0x96>
 8006af2:	a323      	add	r3, pc, #140	@ (adr r3, 8006b80 <floor+0xe8>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fb8c 	bl	8000214 <__adddf3>
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7f9 ffce 	bl	8000aa0 <__aeabi_dcmpgt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d0eb      	beq.n	8006ae0 <floor+0x48>
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	bfbe      	ittt	lt
 8006b0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006b10:	4133      	asrlt	r3, r6
 8006b12:	18e4      	addlt	r4, r4, r3
 8006b14:	ea24 0407 	bic.w	r4, r4, r7
 8006b18:	2500      	movs	r5, #0
 8006b1a:	e7e1      	b.n	8006ae0 <floor+0x48>
 8006b1c:	2e33      	cmp	r6, #51	@ 0x33
 8006b1e:	dd0a      	ble.n	8006b36 <floor+0x9e>
 8006b20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006b24:	d103      	bne.n	8006b2e <floor+0x96>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	f7f9 fb73 	bl	8000214 <__adddf3>
 8006b2e:	ec41 0b10 	vmov	d0, r0, r1
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3e:	40df      	lsrs	r7, r3
 8006b40:	4207      	tst	r7, r0
 8006b42:	d0f4      	beq.n	8006b2e <floor+0x96>
 8006b44:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b80 <floor+0xe8>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fb63 	bl	8000214 <__adddf3>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	f7f9 ffa5 	bl	8000aa0 <__aeabi_dcmpgt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d0c2      	beq.n	8006ae0 <floor+0x48>
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	da0a      	bge.n	8006b74 <floor+0xdc>
 8006b5e:	2e14      	cmp	r6, #20
 8006b60:	d101      	bne.n	8006b66 <floor+0xce>
 8006b62:	3401      	adds	r4, #1
 8006b64:	e006      	b.n	8006b74 <floor+0xdc>
 8006b66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	40b3      	lsls	r3, r6
 8006b6e:	441d      	add	r5, r3
 8006b70:	4545      	cmp	r5, r8
 8006b72:	d3f6      	bcc.n	8006b62 <floor+0xca>
 8006b74:	ea25 0507 	bic.w	r5, r5, r7
 8006b78:	e7b2      	b.n	8006ae0 <floor+0x48>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	462c      	mov	r4, r5
 8006b7e:	e7af      	b.n	8006ae0 <floor+0x48>
 8006b80:	8800759c 	.word	0x8800759c
 8006b84:	7e37e43c 	.word	0x7e37e43c
 8006b88:	bff00000 	.word	0xbff00000
 8006b8c:	000fffff 	.word	0x000fffff

08006b90 <_init>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr

08006b9c <_fini>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr
