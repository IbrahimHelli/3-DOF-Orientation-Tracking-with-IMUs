
Complementary Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a218  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800a3e8  0800a3e8  0000b3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a960  0800a960  0000c1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a960  0800a960  0000b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a968  0800a968  0000c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a96c  0800a96c  0000b96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800a970  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001f8  0800ab68  0000c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800ab68  0000c43c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd58  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbb  00000000  00000000  00018f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0001af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ee  00000000  00000000  0001bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022805  00000000  00000000  0001c39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb99  00000000  00000000  0003eba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd900  00000000  00000000  0004e73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c03c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e0  00000000  00000000  0011c080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00120460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a3d0 	.word	0x0800a3d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800a3d0 	.word	0x0800a3d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08d      	sub	sp, #52	@ 0x34
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000f7e:	f001 fbe7 	bl	8002750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f899 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f961 	bl	800124c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8a:	f000 f935 	bl	80011f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f8e:	f000 f905 	bl	800119c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	initMPU6050();
 8000f92:	f000 f9c9 	bl	8001328 <initMPU6050>
  	CalibrationGyro(&offsetGyroX, &offsetGyroY, &offsetGyroZ);
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <main+0x128>)
 8000f98:	4942      	ldr	r1, [pc, #264]	@ (80010a4 <main+0x12c>)
 8000f9a:	4843      	ldr	r0, [pc, #268]	@ (80010a8 <main+0x130>)
 8000f9c:	f000 faa8 	bl	80014f0 <CalibrationGyro>
  	loopTime = HAL_GetTick();
 8000fa0:	f001 fc3c 	bl	800281c <HAL_GetTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a41      	ldr	r2, [pc, #260]	@ (80010ac <main+0x134>)
 8000fa8:	6013      	str	r3, [r2, #0]
  	lastTimeGyro = HAL_GetTick();
 8000faa:	f001 fc37 	bl	800281c <HAL_GetTick>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a3f      	ldr	r2, [pc, #252]	@ (80010b0 <main+0x138>)
 8000fb2:	6013      	str	r3, [r2, #0]
		int16_t rawAccelX, rawAccelY, rawAccelZ;       // Ham ivmeölçer verileri
		float calibratedAccelX, calibratedAccelY, calibratedAccelZ; // Kalibre edilmiş ivmeölçer verileri

		int16_t rawGyroX, rawGyroY, rawGyroZ;           // Ham jiroskop verileri
		float calibratedGyroX, calibratedGyroY, calibratedGyroZ; // Kalibre edilmiş jiroskop verileri derece/saniye cinsinden
		readAccelMPU6050(&rawAccelX, &rawAccelY, &rawAccelZ);
 8000fb4:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8000fb8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000fbc:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fa19 	bl	80013f8 <readAccelMPU6050>

	    readGyroMPU6050(&rawGyroX, &rawGyroY, &rawGyroZ);
 8000fc6:	f107 020e 	add.w	r2, r7, #14
 8000fca:	f107 0110 	add.w	r1, r7, #16
 8000fce:	f107 0312 	add.w	r3, r7, #18
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fa4e 	bl	8001474 <readGyroMPU6050>

	    getCalibratedAccel(rawAccelX, rawAccelY, rawAccelZ, &calibratedAccelX,
 8000fd8:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	@ 0x26
 8000fdc:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 8000fe0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000fe4:	f107 041c 	add.w	r4, r7, #28
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	f000 fb8d 	bl	8001714 <getCalibratedAccel>
			  				&calibratedAccelY, &calibratedAccelZ);
	    getCalibratedGyro(rawGyroX, rawGyroY, rawGyroZ, &calibratedGyroX,
 8000ffa:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8000ffe:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001002:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001006:	f107 0408 	add.w	r4, r7, #8
 800100a:	463b      	mov	r3, r7
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4623      	mov	r3, r4
 8001014:	f000 fad8 	bl	80015c8 <getCalibratedGyro>
	    	  				&calibratedGyroY, &calibratedGyroZ);
	    // Gyro ile quaternion'ı güncelle
	    updateQuaternionFromGyro(calibratedGyroX, calibratedGyroY, calibratedGyroZ);
 8001018:	edd7 7a02 	vldr	s15, [r7, #8]
 800101c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001020:	edd7 6a00 	vldr	s13, [r7]
 8001024:	eeb0 1a66 	vmov.f32	s2, s13
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f000 fc20 	bl	8001874 <updateQuaternionFromGyro>

	    // İvmeölçer düzeltmesi (sadece statikse)
	    updateQuaternionFromAccel(calibratedAccelX, calibratedAccelY, calibratedAccelZ);
 8001034:	edd7 7a07 	vldr	s15, [r7, #28]
 8001038:	ed97 7a06 	vldr	s14, [r7, #24]
 800103c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001040:	eeb0 1a66 	vmov.f32	s2, s13
 8001044:	eef0 0a47 	vmov.f32	s1, s14
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	f000 fdc8 	bl	8001be0 <updateQuaternionFromAccel>

	    updateTiltCorrectionWithComplementaryFilter();
 8001050:	f000 ffd0 	bl	8001ff4 <updateTiltCorrectionWithComplementaryFilter>



	    sendData(qt[0], qt[1], qt[2], qt[3]);
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <main+0x13c>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <main+0x13c>)
 800105c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <main+0x13c>)
 8001062:	edd3 6a02 	vldr	s13, [r3, #8]
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <main+0x13c>)
 8001068:	ed93 6a03 	vldr	s12, [r3, #12]
 800106c:	eef0 1a46 	vmov.f32	s3, s12
 8001070:	eeb0 1a66 	vmov.f32	s2, s13
 8001074:	eef0 0a47 	vmov.f32	s1, s14
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f000 fbb4 	bl	80017e8 <sendData>
	    while(HAL_GetTick()-loopTime<100);
 8001080:	bf00      	nop
 8001082:	f001 fbcb 	bl	800281c <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <main+0x134>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b63      	cmp	r3, #99	@ 0x63
 8001090:	d9f7      	bls.n	8001082 <main+0x10a>
	    loopTime = HAL_GetTick();
 8001092:	f001 fbc3 	bl	800281c <HAL_GetTick>
 8001096:	4603      	mov	r3, r0
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <main+0x134>)
 800109a:	6013      	str	r3, [r2, #0]
  {
 800109c:	e78a      	b.n	8000fb4 <main+0x3c>
 800109e:	bf00      	nop
 80010a0:	200002b8 	.word	0x200002b8
 80010a4:	200002b4 	.word	0x200002b4
 80010a8:	200002b0 	.word	0x200002b0
 80010ac:	200002dc 	.word	0x200002dc
 80010b0:	200002e0 	.word	0x200002e0
 80010b4:	20000000 	.word	0x20000000

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2234      	movs	r2, #52	@ 0x34
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fc95 	bl	80069f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <SystemClock_Config+0xdc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <SystemClock_Config+0xdc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <SystemClock_Config+0xdc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <SystemClock_Config+0xe0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a25      	ldr	r2, [pc, #148]	@ (8001198 <SystemClock_Config+0xe0>)
 8001102:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <SystemClock_Config+0xe0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001118:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001126:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800112c:	23b4      	movs	r3, #180	@ 0xb4
 800112e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fc11 	bl	8004968 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800114c:	f001 f8fe 	bl	800234c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001150:	f003 f870 	bl	8004234 <HAL_PWREx_EnableOverDrive>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800115a:	f001 f8f7 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800116e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2105      	movs	r1, #5
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f8a9 	bl	80042d4 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001188:	f001 f8e0 	bl	800234c <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	@ 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011a2:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_I2C1_Init+0x54>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <MX_I2C1_Init+0x58>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_I2C1_Init+0x50>)
 80011da:	f001 fea1 	bl	8002f20 <HAL_I2C_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f001 f8b2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000214 	.word	0x20000214
 80011f0:	40005400 	.word	0x40005400
 80011f4:	00061a80 	.word	0x00061a80

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <MX_USART2_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_USART2_UART_Init+0x4c>)
 8001230:	f003 fe38 	bl	8004ea4 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f001 f887 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000268 	.word	0x20000268
 8001248:	40004400 	.word	0x40004400

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a2c      	ldr	r2, [pc, #176]	@ (800131c <MX_GPIO_Init+0xd0>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a25      	ldr	r2, [pc, #148]	@ (800131c <MX_GPIO_Init+0xd0>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a1e      	ldr	r2, [pc, #120]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4812      	ldr	r0, [pc, #72]	@ (8001320 <MX_GPIO_Init+0xd4>)
 80012d8:	f001 fe08 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_GPIO_Init+0xd8>)
 80012f4:	f001 fc66 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f8:	2320      	movs	r3, #32
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	@ (8001320 <MX_GPIO_Init+0xd4>)
 8001310:	f001 fc58 	bl	8002bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020800 	.word	0x40020800

08001328 <initMPU6050>:

/* USER CODE BEGIN 4 */
void initMPU6050(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af04      	add	r7, sp, #16
	//int eror = 0;
	uint8_t buffer;
	//MPU6050 Uyku modundan çık ve başlat
	buffer = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, PWR_MGMT_1_REG, 1, &buffer,
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	226b      	movs	r2, #107	@ 0x6b
 8001344:	21d0      	movs	r1, #208	@ 0xd0
 8001346:	482a      	ldr	r0, [pc, #168]	@ (80013f0 <initMPU6050+0xc8>)
 8001348:	f002 fa5e 	bl	8003808 <HAL_I2C_Mem_Write>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <initMPU6050+0x34>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 1;
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <initMPU6050+0xcc>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001358:	f000 fff8 	bl	800234c <Error_Handler>
	}

	// SMPLRT_DIV_REG --> yazarak veri hızını 1KHz olarak ayarla 8KHZ Jiroskop çalışma frekansı için
	//ivme ölçer çıkış frekansı 1khz olarak ayarlanıyor
	//yani Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV) ->>>1KHz=8KHz /(1+ SMPLRT_DIV=7)
	buffer = 0x07;
 800135c:	2307      	movs	r3, #7
 800135e:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, SMPLRT_DIV_REG, 1, &buffer,
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2219      	movs	r2, #25
 8001372:	21d0      	movs	r1, #208	@ 0xd0
 8001374:	481e      	ldr	r0, [pc, #120]	@ (80013f0 <initMPU6050+0xc8>)
 8001376:	f002 fa47 	bl	8003808 <HAL_I2C_Mem_Write>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <initMPU6050+0x62>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 2;
 8001380:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <initMPU6050+0xcc>)
 8001382:	2202      	movs	r2, #2
 8001384:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001386:	f000 ffe1 	bl	800234c <Error_Handler>
	}
	// GYRO CNFG --> +-500 derece/saniye -->08 veya --> +-1000 derece/saniye -->10
	buffer = 0x10;
 800138a:	2310      	movs	r3, #16
 800138c:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, GYRO_CNFG_REG, 1, &buffer,
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	221b      	movs	r2, #27
 80013a0:	21d0      	movs	r1, #208	@ 0xd0
 80013a2:	4813      	ldr	r0, [pc, #76]	@ (80013f0 <initMPU6050+0xc8>)
 80013a4:	f002 fa30 	bl	8003808 <HAL_I2C_Mem_Write>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <initMPU6050+0x90>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 2;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <initMPU6050+0xcc>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80013b4:	f000 ffca 	bl	800234c <Error_Handler>
	}

	// ACC CNFG --> +-8g -->10
	buffer = 0x10;
 80013b8:	2310      	movs	r3, #16
 80013ba:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, ACC_CNFG_REG, 1, &buffer,
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	221c      	movs	r2, #28
 80013ce:	21d0      	movs	r1, #208	@ 0xd0
 80013d0:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <initMPU6050+0xc8>)
 80013d2:	f002 fa19 	bl	8003808 <HAL_I2C_Mem_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <initMPU6050+0xbe>
			1,
			HAL_MAX_DELAY) != HAL_OK) {
		eror = 3;
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <initMPU6050+0xcc>)
 80013de:	2203      	movs	r2, #3
 80013e0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80013e2:	f000 ffb3 	bl	800234c <Error_Handler>
	}

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000214 	.word	0x20000214
 80013f4:	200002e4 	.word	0x200002e4

080013f8 <readAccelMPU6050>:

void readAccelMPU6050(int16_t *rawAccelX, int16_t *rawAccelY, int16_t *rawAccelZ) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]

	uint8_t bufferAccel[6];
	// belirttiğim adresten itibaren veri bana gönder emri
	bufferAccel[0] = 0x3B;
 8001404:	233b      	movs	r3, #59	@ 0x3b
 8001406:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, bufferAccel, 1,
 8001408:	f107 0210 	add.w	r2, r7, #16
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	21d0      	movs	r1, #208	@ 0xd0
 8001416:	4816      	ldr	r0, [pc, #88]	@ (8001470 <readAccelMPU6050+0x78>)
 8001418:	f001 fec6 	bl	80031a8 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	// 6 tane byte al
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR << 1, bufferAccel, 6,
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2306      	movs	r3, #6
 8001428:	21d0      	movs	r1, #208	@ 0xd0
 800142a:	4811      	ldr	r0, [pc, #68]	@ (8001470 <readAccelMPU6050+0x78>)
 800142c:	f001 ffba 	bl	80033a4 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);

	*rawAccelX = (bufferAccel[0] << 8 | bufferAccel[1]);
 8001430:	7c3b      	ldrb	r3, [r7, #16]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	7c7b      	ldrb	r3, [r7, #17]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21a      	sxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	801a      	strh	r2, [r3, #0]
	*rawAccelY = (bufferAccel[2] << 8 | bufferAccel[3]);
 8001442:	7cbb      	ldrb	r3, [r7, #18]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21a      	sxth	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	801a      	strh	r2, [r3, #0]
	*rawAccelZ = (bufferAccel[4] << 8 | bufferAccel[5]);
 8001454:	7d3b      	ldrb	r3, [r7, #20]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	801a      	strh	r2, [r3, #0]

}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000214 	.word	0x20000214

08001474 <readGyroMPU6050>:
void readGyroMPU6050(int16_t *rawGyroX, int16_t *rawGyroY, int16_t *rawGyroZ) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	// belirttiğim adresten itibaren veri bana gönder emri
	uint8_t bufferGyro[6];
	bufferGyro[0] = 0x43;
 8001480:	2343      	movs	r3, #67	@ 0x43
 8001482:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, bufferGyro, 1,
 8001484:	f107 0210 	add.w	r2, r7, #16
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	21d0      	movs	r1, #208	@ 0xd0
 8001492:	4816      	ldr	r0, [pc, #88]	@ (80014ec <readGyroMPU6050+0x78>)
 8001494:	f001 fe88 	bl	80031a8 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	// 6 tane byte al
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR << 1, bufferGyro, 6,
 8001498:	f107 0210 	add.w	r2, r7, #16
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2306      	movs	r3, #6
 80014a4:	21d0      	movs	r1, #208	@ 0xd0
 80014a6:	4811      	ldr	r0, [pc, #68]	@ (80014ec <readGyroMPU6050+0x78>)
 80014a8:	f001 ff7c 	bl	80033a4 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);

	*rawGyroX = (bufferGyro[0] << 8 | bufferGyro[1]);
 80014ac:	7c3b      	ldrb	r3, [r7, #16]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7c7b      	ldrb	r3, [r7, #17]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	801a      	strh	r2, [r3, #0]
	*rawGyroY = (bufferGyro[2] << 8 | bufferGyro[3]);
 80014be:	7cbb      	ldrb	r3, [r7, #18]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	801a      	strh	r2, [r3, #0]
	*rawGyroZ = (bufferGyro[4] << 8 | bufferGyro[5]);
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7d7b      	ldrb	r3, [r7, #21]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21a      	sxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	801a      	strh	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000214 	.word	0x20000214

080014f0 <CalibrationGyro>:

void CalibrationGyro(float *offsetGyroX, float *offsetGyroY, float *offsetGyroZ) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]

	int16_t rawGyroX, rawGyroY, rawGyroZ;
	for (int i = 0; i < 4000; i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e038      	b.n	8001574 <CalibrationGyro+0x84>

		readGyroMPU6050(&rawGyroX, &rawGyroY, &rawGyroZ);
 8001502:	f107 0216 	add.w	r2, r7, #22
 8001506:	f107 0118 	add.w	r1, r7, #24
 800150a:	f107 031a 	add.w	r3, r7, #26
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ffb0 	bl	8001474 <readGyroMPU6050>
		*offsetGyroX += rawGyroX;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	edc3 7a00 	vstr	s15, [r3]
		*offsetGyroY += rawGyroY;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	edc3 7a00 	vstr	s15, [r3]
		*offsetGyroZ += rawGyroZ;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	ed93 7a00 	vldr	s14, [r3]
 8001552:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f001 f963 	bl	8002834 <HAL_Delay>
	for (int i = 0; i < 4000; i++) {
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800157a:	dbc2      	blt.n	8001502 <CalibrationGyro+0x12>
	}
	*offsetGyroX /= 4000.0;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80015c0 <CalibrationGyro+0xd0>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	edc3 7a00 	vstr	s15, [r3]
	*offsetGyroY /= 4000.0;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80015c0 <CalibrationGyro+0xd0>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	edc3 7a00 	vstr	s15, [r3]
	*offsetGyroZ /= 4000.0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80015c0 <CalibrationGyro+0xd0>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	edc3 7a00 	vstr	s15, [r3]
}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	457a0000 	.word	0x457a0000
 80015c4:	00000000 	.word	0x00000000

080015c8 <getCalibratedGyro>:

void getCalibratedGyro(int16_t rawGyroX, int16_t rawGyroY, int16_t rawGyroZ, float *calibratedGyroX, float *calibratedGyroY, float *calibratedGyroZ) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	4603      	mov	r3, r0
 80015d2:	81fb      	strh	r3, [r7, #14]
 80015d4:	460b      	mov	r3, r1
 80015d6:	81bb      	strh	r3, [r7, #12]
 80015d8:	4613      	mov	r3, r2
 80015da:	817b      	strh	r3, [r7, #10]

	*calibratedGyroX = (rawGyroX - offsetGyroX) / 32.8f; // /32.8 derece/saniye cinsinden dönüşümü için gerekli adım
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	4b45      	ldr	r3, [pc, #276]	@ (8001700 <getCalibratedGyro+0x138>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001704 <getCalibratedGyro+0x13c>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edc3 7a00 	vstr	s15, [r3]
	*calibratedGyroY = (rawGyroY - offsetGyroY) / 32.8f;
 8001600:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160c:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <getCalibratedGyro+0x140>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8001704 <getCalibratedGyro+0x13c>
 800161a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	edc3 7a00 	vstr	s15, [r3]
	*calibratedGyroZ = (rawGyroZ - offsetGyroZ) / 32.8f;
 8001624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001630:	4b36      	ldr	r3, [pc, #216]	@ (800170c <getCalibratedGyro+0x144>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001704 <getCalibratedGyro+0x13c>
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	edc3 7a00 	vstr	s15, [r3]

	*calibratedGyroX = *calibratedGyroX * 3.14159265359/180.0; // radyan/saniye cinsinden
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff9b 	bl	8000588 <__aeabi_f2d>
 8001652:	a329      	add	r3, pc, #164	@ (adr r3, 80016f8 <getCalibratedGyro+0x130>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffee 	bl	8000638 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <getCalibratedGyro+0x148>)
 800166a:	f7ff f90f 	bl	800088c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fab7 	bl	8000be8 <__aeabi_d2f>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	601a      	str	r2, [r3, #0]
	*calibratedGyroY = *calibratedGyroY * 3.14159265359/180.0;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff7f 	bl	8000588 <__aeabi_f2d>
 800168a:	a31b      	add	r3, pc, #108	@ (adr r3, 80016f8 <getCalibratedGyro+0x130>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe ffd2 	bl	8000638 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <getCalibratedGyro+0x148>)
 80016a2:	f7ff f8f3 	bl	800088c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa9b 	bl	8000be8 <__aeabi_d2f>
 80016b2:	4602      	mov	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]
	*calibratedGyroZ = *calibratedGyroZ * 3.14159265359/180.0;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff63 	bl	8000588 <__aeabi_f2d>
 80016c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80016f8 <getCalibratedGyro+0x130>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ffb6 	bl	8000638 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <getCalibratedGyro+0x148>)
 80016da:	f7ff f8d7 	bl	800088c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4602      	mov	r2, r0
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	54442eea 	.word	0x54442eea
 80016fc:	400921fb 	.word	0x400921fb
 8001700:	200002b0 	.word	0x200002b0
 8001704:	42033333 	.word	0x42033333
 8001708:	200002b4 	.word	0x200002b4
 800170c:	200002b8 	.word	0x200002b8
 8001710:	40668000 	.word	0x40668000

08001714 <getCalibratedAccel>:

// Kalibre edilmiş ivmeölçer değerlerini hesapla
void getCalibratedAccel(int16_t rawAccelX, int16_t rawAccelY, int16_t rawAccelZ, float *calibratedAccelX, float *calibratedAccelY, float *calibratedAccelZ) {
 8001714:	b480      	push	{r7}
 8001716:	b08b      	sub	sp, #44	@ 0x2c
 8001718:	af00      	add	r7, sp, #0
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	4603      	mov	r3, r0
 800171e:	81fb      	strh	r3, [r7, #14]
 8001720:	460b      	mov	r3, r1
 8001722:	81bb      	strh	r3, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	817b      	strh	r3, [r7, #10]

	const float offsetAccelX = 132.00;
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <getCalibratedAccel+0xb8>)
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
	  const float offsetAccelY = 432.00;
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <getCalibratedAccel+0xbc>)
 800172e:	623b      	str	r3, [r7, #32]
	  const float offsetAccelZ = -54.00;
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <getCalibratedAccel+0xc0>)
 8001732:	61fb      	str	r3, [r7, #28]
	  const float scaleCorrectionFactorAccelX = 1.04364324;
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <getCalibratedAccel+0xc4>)
 8001736:	61bb      	str	r3, [r7, #24]
	  const float scaleCorrectionFactorAccelY = 0.936369419;
 8001738:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <getCalibratedAccel+0xc8>)
 800173a:	617b      	str	r3, [r7, #20]
	  const float scaleCorrectionFactorAccelZ = 1.02683783;
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <getCalibratedAccel+0xcc>)
 800173e:	613b      	str	r3, [r7, #16]

	// Kalibre edilmiş değerleri hesapla
	*calibratedAccelX = (rawAccelX - offsetAccelX)
 8001740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001750:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelX/4096.0;
 8001754:	edd7 7a06 	vldr	s15, [r7, #24]
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80017e4 <getCalibratedAccel+0xd0>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
	*calibratedAccelX = (rawAccelX - offsetAccelX)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a00 	vstr	s15, [r3]
	*calibratedAccelY = (rawAccelY - offsetAccelY)
 800176a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	edd7 7a08 	vldr	s15, [r7, #32]
 800177a:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelY/4096.0;
 800177e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001786:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80017e4 <getCalibratedAccel+0xd0>
 800178a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	*calibratedAccelY = (rawAccelY - offsetAccelY)
 800178e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001790:	edc3 7a00 	vstr	s15, [r3]
	*calibratedAccelZ = (rawAccelZ - offsetAccelZ)
 8001794:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a4:	ee37 7a67 	vsub.f32	s14, s14, s15
			* scaleCorrectionFactorAccelZ/4096.0;
 80017a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80017e4 <getCalibratedAccel+0xd0>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	*calibratedAccelZ = (rawAccelZ - offsetAccelZ)
 80017b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ba:	edc3 7a00 	vstr	s15, [r3]

}
 80017be:	bf00      	nop
 80017c0:	372c      	adds	r7, #44	@ 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	43040000 	.word	0x43040000
 80017d0:	43d80000 	.word	0x43d80000
 80017d4:	c2580000 	.word	0xc2580000
 80017d8:	3f85961a 	.word	0x3f85961a
 80017dc:	3f6fb5e8 	.word	0x3f6fb5e8
 80017e0:	3f836f6c 	.word	0x3f836f6c
 80017e4:	45800000 	.word	0x45800000

080017e8 <sendData>:
// verileri seri port üzerinden gönder
void sendData(float qw, float qx, float qy, float qz) {
 80017e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ec:	b0a6      	sub	sp, #152	@ 0x98
 80017ee:	af08      	add	r7, sp, #32
 80017f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80017f4:	edc7 0a02 	vstr	s1, [r7, #8]
 80017f8:	ed87 1a01 	vstr	s2, [r7, #4]
 80017fc:	edc7 1a00 	vstr	s3, [r7]
    char buffer[100];
    snprintf(buffer, sizeof(buffer), "%.6f, %.6f, %.6f, %.6f\n", qw, qx, qy, qz);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7fe fec1 	bl	8000588 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f7fe febc 	bl	8000588 <__aeabi_f2d>
 8001810:	4680      	mov	r8, r0
 8001812:	4689      	mov	r9, r1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	4682      	mov	sl, r0
 800181c:	468b      	mov	fp, r1
 800181e:	6838      	ldr	r0, [r7, #0]
 8001820:	f7fe feb2 	bl	8000588 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	f107 0014 	add.w	r0, r7, #20
 800182c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001830:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001834:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001838:	e9cd 4500 	strd	r4, r5, [sp]
 800183c:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <sendData+0x84>)
 800183e:	2164      	movs	r1, #100	@ 0x64
 8001840:	f005 f862 	bl	8006908 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fd31 	bl	80002b0 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	f107 0114 	add.w	r1, r7, #20
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <sendData+0x88>)
 800185c:	f003 fb72 	bl	8004f44 <HAL_UART_Transmit>
}
 8001860:	bf00      	nop
 8001862:	3778      	adds	r7, #120	@ 0x78
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186a:	bf00      	nop
 800186c:	0800a3e8 	.word	0x0800a3e8
 8001870:	20000268 	.word	0x20000268

08001874 <updateQuaternionFromGyro>:

void updateQuaternionFromGyro(float gx, float gy, float gz) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	@ 0x40
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0a03 	vstr	s0, [r7, #12]
 800187e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001882:	ed87 1a01 	vstr	s2, [r7, #4]

    // geçen zaman aralığı hesapla
	double deltaTime =(double)(HAL_GetTick()-lastTimeGyro)/1000.0f;
 8001886:	f000 ffc9 	bl	800281c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	4bd0      	ldr	r3, [pc, #832]	@ (8001bd0 <updateQuaternionFromGyro+0x35c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe56 	bl	8000544 <__aeabi_ui2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4bcd      	ldr	r3, [pc, #820]	@ (8001bd4 <updateQuaternionFromGyro+0x360>)
 800189e:	f7fe fff5 	bl	800088c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	lastTimeGyro = HAL_GetTick();
 80018aa:	f000 ffb7 	bl	800281c <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4ac7      	ldr	r2, [pc, #796]	@ (8001bd0 <updateQuaternionFromGyro+0x35c>)
 80018b2:	6013      	str	r3, [r2, #0]

    float norm = sqrt(gx * gx + gy * gy + gz * gz);
 80018b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fe56 	bl	8000588 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	ec43 2b10 	vmov	d0, r2, r3
 80018e4:	f007 f984 	bl	8008bf0 <sqrt>
 80018e8:	ec53 2b10 	vmov	r2, r3, d0
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f97a 	bl	8000be8 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (norm > 0) {
 80018f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	dc00      	bgt.n	8001908 <updateQuaternionFromGyro+0x94>
        qw[1] = qw[1]/normq;
        qw[2] = qw[2]/normq;
        qw[3] = qw[3]/normq;
        //memcpy(qt, qw, sizeof(qw)); //eğer sadece gyro'dan veriyi göncelleme yapmak istiyorsak bunu kullanırız ama drift hatası oluşacak
    }
}
 8001906:	e15e      	b.n	8001bc6 <updateQuaternionFromGyro+0x352>
        float angle = norm * deltaTime;
 8001908:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800190a:	f7fe fe3d 	bl	8000588 <__aeabi_f2d>
 800190e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001912:	f7fe fe91 	bl	8000638 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f963 	bl	8000be8 <__aeabi_d2f>
 8001922:	4603      	mov	r3, r0
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
        float sinHalfAngle = sin(angle / 2.0);
 8001926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001928:	f7fe fe2e 	bl	8000588 <__aeabi_f2d>
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001934:	f7fe ffaa 	bl	800088c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	ec43 2b17 	vmov	d7, r2, r3
 8001940:	eeb0 0a47 	vmov.f32	s0, s14
 8001944:	eef0 0a67 	vmov.f32	s1, s15
 8001948:	f007 f9da 	bl	8008d00 <sin>
 800194c:	ec53 2b10 	vmov	r2, r3, d0
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f948 	bl	8000be8 <__aeabi_d2f>
 8001958:	4603      	mov	r3, r0
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        float cosHalfAngle = cos(angle / 2.0);
 800195c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800195e:	f7fe fe13 	bl	8000588 <__aeabi_f2d>
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800196a:	f7fe ff8f 	bl	800088c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ec43 2b17 	vmov	d7, r2, r3
 8001976:	eeb0 0a47 	vmov.f32	s0, s14
 800197a:	eef0 0a67 	vmov.f32	s1, s15
 800197e:	f007 f963 	bl	8008c48 <cos>
 8001982:	ec53 2b10 	vmov	r2, r3, d0
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f92d 	bl	8000be8 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
        float qDelta[4] = {cosHalfAngle, sinHalfAngle * (gx / norm), sinHalfAngle * (gy / norm), sinHalfAngle * (gz / norm)};
 8001992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	edd7 6a03 	vldr	s13, [r7, #12]
 800199a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800199e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	edc7 7a06 	vstr	s15, [r7, #24]
 80019ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80019b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80019c6:	edd7 6a01 	vldr	s13, [r7, #4]
 80019ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019d2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019da:	edc7 7a08 	vstr	s15, [r7, #32]
        qw[0] = qt[0] * qDelta[0] - qt[1] * qDelta[1] - qt[2] * qDelta[2] - qt[3] * qDelta[3];
 80019de:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 80019ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80019f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fe:	4b76      	ldr	r3, [pc, #472]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a00:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a10:	4b71      	ldr	r3, [pc, #452]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a12:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	4b6e      	ldr	r3, [pc, #440]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
        qw[1] = qt[0] * qDelta[1] + qt[1] * qDelta[0] + qt[2] * qDelta[3] - qt[3] * qDelta[2];
 8001a28:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a36:	4b68      	ldr	r3, [pc, #416]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a48:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001a6e:	edc3 7a01 	vstr	s15, [r3, #4]
        qw[2] = qt[0] * qDelta[2] - qt[1] * qDelta[3] + qt[2] * qDelta[0] + qt[3] * qDelta[1];
 8001a72:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a86:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a92:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001a94:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001aa6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001aaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	4b49      	ldr	r3, [pc, #292]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001ab8:	edc3 7a02 	vstr	s15, [r3, #8]
        qw[3] = qt[0] * qDelta[3] + qt[1] * qDelta[2] - qt[2] * qDelta[1] + qt[3] * qDelta[0];
 8001abc:	4b46      	ldr	r3, [pc, #280]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001abe:	ed93 7a00 	vldr	s14, [r3]
 8001ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aca:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001acc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ad0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001adc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001ade:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aee:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd8 <updateQuaternionFromGyro+0x364>)
 8001af0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b02:	edc3 7a03 	vstr	s15, [r3, #12]
        float normq = sqrt(qw[0] * qw[0] + qw[1] * qw[1] + qw[2] * qw[2] + qw[3] * qw[3]);
 8001b06:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b18:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b30:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b40:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	ee17 0a90 	vmov	r0, s15
 8001b56:	f7fe fd17 	bl	8000588 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	ec43 2b10 	vmov	d0, r2, r3
 8001b62:	f007 f845 	bl	8008bf0 <sqrt>
 8001b66:	ec53 2b10 	vmov	r2, r3, d0
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f83b 	bl	8000be8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
        qw[0] = qw[0]/normq;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b78:	edd3 6a00 	vldr	s13, [r3]
 8001b7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b86:	edc3 7a00 	vstr	s15, [r3]
        qw[1] = qw[1]/normq;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001b9a:	edc3 7a01 	vstr	s15, [r3, #4]
        qw[2] = qw[2]/normq;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001ba0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ba4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001bae:	edc3 7a02 	vstr	s15, [r3, #8]
        qw[3] = qw[3]/normq;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001bb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bb8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <updateQuaternionFromGyro+0x368>)
 8001bc2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	@ 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002e0 	.word	0x200002e0
 8001bd4:	408f4000 	.word	0x408f4000
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	200002bc 	.word	0x200002bc

08001be0 <updateQuaternionFromAccel>:

void updateQuaternionFromAccel(float ax, float ay, float az) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b096      	sub	sp, #88	@ 0x58
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bea:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bee:	ed87 1a01 	vstr	s2, [r7, #4]
	float qa[4] = {0, ax ,ay, az};
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c

	float norm = sqrt(qw[0] * qw[0] + qw[1] * qw[1] + qw[2] * qw[2] + qw[3] * qw[3]);
 8001c04:	4be5      	ldr	r3, [pc, #916]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	4be4      	ldr	r3, [pc, #912]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	4be1      	ldr	r3, [pc, #900]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c16:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c1a:	4be0      	ldr	r3, [pc, #896]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c28:	4bdc      	ldr	r3, [pc, #880]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c2e:	4bdb      	ldr	r3, [pc, #876]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3c:	4bd7      	ldr	r3, [pc, #860]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c3e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c42:	4bd6      	ldr	r3, [pc, #856]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	ee17 0a90 	vmov	r0, s15
 8001c54:	f7fe fc98 	bl	8000588 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b10 	vmov	d0, r2, r3
 8001c60:	f006 ffc6 	bl	8008bf0 <sqrt>
 8001c64:	ec53 2b10 	vmov	r2, r3, d0
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffbc 	bl	8000be8 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	657b      	str	r3, [r7, #84]	@ 0x54
	float conjugateqw[4] = {qw[0], -qw[1] ,-qw[2], -qw[3]};
 8001c74:	4bc9      	ldr	r3, [pc, #804]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c7a:	4bc8      	ldr	r3, [pc, #800]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c80:	eef1 7a67 	vneg.f32	s15, s15
 8001c84:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001c88:	4bc4      	ldr	r3, [pc, #784]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c8e:	eef1 7a67 	vneg.f32	s15, s15
 8001c92:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001c96:	4bc1      	ldr	r3, [pc, #772]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	eef1 7a67 	vneg.f32	s15, s15
 8001ca0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float inverseqw[4] = {conjugateqw[0]/(norm*norm), conjugateqw[1]/(norm*norm), conjugateqw[2]/(norm*norm), conjugateqw[3]/(norm*norm)};
 8001ca4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001ca8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001cac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb4:	edc7 7a08 	vstr	s15, [r7, #32]
 8001cb8:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001cbc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001cc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001ccc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001cd0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001cd4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cdc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8001ce0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001ce4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ce8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c


	//qa_world = qw * qa_body * inverseqw iki adımla Kuaterniyon çarpımı yapacağız

	//qTemp = qw * qa_body
	qTemp[0] = qw[0] * qa[0] - qw[1] * qa[1] - qw[2] * qa[2] - qw[3] * qa[3];
 8001cf4:	4ba9      	ldr	r3, [pc, #676]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	4ba6      	ldr	r3, [pc, #664]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d04:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d08:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d14:	4ba1      	ldr	r3, [pc, #644]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d16:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d1a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d26:	4b9d      	ldr	r3, [pc, #628]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d28:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d2c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a04 	vstr	s15, [r7, #16]
	qTemp[1] = qw[0] * qa[1] + qw[1] * qa[0] + qw[2] * qa[3] - qw[3] * qa[2];
 8001d3c:	4b97      	ldr	r3, [pc, #604]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4a:	4b94      	ldr	r3, [pc, #592]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d50:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d62:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d70:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d74:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a05 	vstr	s15, [r7, #20]
	qTemp[2] = qw[0] * qa[2] - qw[1] * qa[3] + qw[2] * qa[0] + qw[3] * qa[1];
 8001d84:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d86:	ed93 7a00 	vldr	s14, [r3]
 8001d8a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	4b82      	ldr	r3, [pc, #520]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001d94:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d98:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da4:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001da6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001daa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db6:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001db8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001dbc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	edc7 7a06 	vstr	s15, [r7, #24]
	qTemp[3] = qw[0] * qa[3] + qw[1] * qa[2] - qw[2] * qa[1] + qw[3] * qa[0];
 8001dcc:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	4b70      	ldr	r3, [pc, #448]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001ddc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001de0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dec:	4b6b      	ldr	r3, [pc, #428]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001dee:	edd3 6a02 	vldr	s13, [r3, #8]
 8001df2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfe:	4b67      	ldr	r3, [pc, #412]	@ (8001f9c <updateQuaternionFromAccel+0x3bc>)
 8001e00:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e04:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	edc7 7a07 	vstr	s15, [r7, #28]

	//qa_world = qTemp * inverseqw
	qaWorld[0] = qTemp[0] * inverseqw[0] - qTemp[1] * inverseqw[1] - qTemp[2] * inverseqw[2] - qTemp[3] * inverseqw[3];
 8001e14:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e30:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e44:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e50:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001e52:	edc3 7a00 	vstr	s15, [r3]
	qaWorld[1] = qTemp[0] * inverseqw[1] + qTemp[1] * inverseqw[0] + qTemp[2] * inverseqw[3] - qTemp[3] * inverseqw[2];
 8001e56:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001e94:	edc3 7a01 	vstr	s15, [r3, #4]
	qaWorld[2] = qTemp[0] * inverseqw[2] - qTemp[1] * inverseqw[3] + qTemp[2] * inverseqw[0] + qTemp[3] * inverseqw[1];
 8001e98:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ea8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001eb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001ed6:	edc3 7a02 	vstr	s15, [r3, #8]
	qaWorld[3] = qTemp[0] * inverseqw[3] + qTemp[1] * inverseqw[2] - qTemp[2] * inverseqw[1] + qTemp[3] * inverseqw[0];
 8001eda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ede:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001eea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001efa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f18:	edc3 7a03 	vstr	s15, [r3, #12]

    float normq = sqrt(qaWorld[0] * qaWorld[0] + qaWorld[1] * qaWorld[1] + qaWorld[2] * qaWorld[2] + qaWorld[3] * qaWorld[3]);
 8001f1c:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f1e:	ed93 7a00 	vldr	s14, [r3]
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f42:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f48:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f56:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe fb0c 	bl	8000588 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b10 	vmov	d0, r2, r3
 8001f78:	f006 fe3a 	bl	8008bf0 <sqrt>
 8001f7c:	ec53 2b10 	vmov	r2, r3, d0
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe30 	bl	8000be8 <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	653b      	str	r3, [r7, #80]	@ 0x50
    qaWorld[0] /= normq;
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <updateQuaternionFromAccel+0x3c0>)
 8001f8e:	edd3 6a00 	vldr	s13, [r3]
 8001f92:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9a:	e003      	b.n	8001fa4 <updateQuaternionFromAccel+0x3c4>
 8001f9c:	200002bc 	.word	0x200002bc
 8001fa0:	200002cc 	.word	0x200002cc
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fa6:	edc3 7a00 	vstr	s15, [r3]
    qaWorld[1] /= normq;
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fac:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fb0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fba:	edc3 7a01 	vstr	s15, [r3, #4]
    qaWorld[2] /= normq;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fc4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fce:	edc3 7a02 	vstr	s15, [r3, #8]
    qaWorld[3] /= normq;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fd8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <updateQuaternionFromAccel+0x410>)
 8001fe2:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8001fe6:	bf00      	nop
 8001fe8:	3758      	adds	r7, #88	@ 0x58
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002cc 	.word	0x200002cc

08001ff4 <updateTiltCorrectionWithComplementaryFilter>:
void updateTiltCorrectionWithComplementaryFilter() {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b093      	sub	sp, #76	@ 0x4c
 8001ff8:	af00      	add	r7, sp, #0


	    // Dönüş ekseni ve dönüş açısını hesapla
	    float psi = acos(qaWorld[3]);
 8001ffa:	4bd0      	ldr	r3, [pc, #832]	@ (800233c <updateTiltCorrectionWithComplementaryFilter+0x348>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fac2 	bl	8000588 <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	ec43 2b10 	vmov	d0, r2, r3
 800200c:	f006 fdbc 	bl	8008b88 <acos>
 8002010:	ec53 2b10 	vmov	r2, r3, d0
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fde6 	bl	8000be8 <__aeabi_d2f>
 800201c:	4603      	mov	r3, r0
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
	    float nx = qaWorld[2], ny = -qaWorld[1], nz = 0;
 8002020:	4bc6      	ldr	r3, [pc, #792]	@ (800233c <updateTiltCorrectionWithComplementaryFilter+0x348>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	643b      	str	r3, [r7, #64]	@ 0x40
 8002026:	4bc5      	ldr	r3, [pc, #788]	@ (800233c <updateTiltCorrectionWithComplementaryFilter+0x348>)
 8002028:	edd3 7a01 	vldr	s15, [r3, #4]
 800202c:	eef1 7a67 	vneg.f32	s15, s15
 8002030:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
	    float norm = sqrt(nx * nx + ny * ny + nz * nz);
 800203a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800203e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002042:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002046:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800204a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002052:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	ee17 0a90 	vmov	r0, s15
 800205e:	f7fe fa93 	bl	8000588 <__aeabi_f2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	ec43 2b10 	vmov	d0, r2, r3
 800206a:	f006 fdc1 	bl	8008bf0 <sqrt>
 800206e:	ec53 2b10 	vmov	r2, r3, d0
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fdb7 	bl	8000be8 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	637b      	str	r3, [r7, #52]	@ 0x34

        const float alpha = 0.95;
 800207e:	4bb0      	ldr	r3, [pc, #704]	@ (8002340 <updateTiltCorrectionWithComplementaryFilter+0x34c>)
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
	    float sinHalfPsi = sin((1 - alpha) * psi / 2.0);
 8002082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002086:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800208a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	ee17 0a90 	vmov	r0, s15
 800209a:	f7fe fa75 	bl	8000588 <__aeabi_f2d>
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020a6:	f7fe fbf1 	bl	800088c <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b17 	vmov	d7, r2, r3
 80020b2:	eeb0 0a47 	vmov.f32	s0, s14
 80020b6:	eef0 0a67 	vmov.f32	s1, s15
 80020ba:	f006 fe21 	bl	8008d00 <sin>
 80020be:	ec53 2b10 	vmov	r2, r3, d0
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fd8f 	bl	8000be8 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    float cosHalfPsi = cos((1 - alpha) * psi / 2.0);
 80020ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020d2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020da:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	ee17 0a90 	vmov	r0, s15
 80020e6:	f7fe fa4f 	bl	8000588 <__aeabi_f2d>
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020f2:	f7fe fbcb 	bl	800088c <__aeabi_ddiv>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	ec43 2b17 	vmov	d7, r2, r3
 80020fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002102:	eef0 0a67 	vmov.f32	s1, s15
 8002106:	f006 fd9f 	bl	8008c48 <cos>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd69 	bl	8000be8 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28

	    float qTilt[4] = {cosHalfPsi, sinHalfPsi * nx/norm, sinHalfPsi * ny/norm, sinHalfPsi * nz/norm};
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002122:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002126:	ee67 6a27 	vmul.f32	s13, s14, s15
 800212a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800212e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002132:	edc7 7a06 	vstr	s15, [r7, #24]
 8002136:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800213a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800213e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002142:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214a:	edc7 7a07 	vstr	s15, [r7, #28]
 800214e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002152:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002156:	ee67 6a27 	vmul.f32	s13, s14, s15
 800215a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800215e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002162:	edc7 7a08 	vstr	s15, [r7, #32]

	    // Kuaterniyon güncelleme: qc = qTilt * qGyro
	    float qc[4];
	    qc[0] = qTilt[0] * qw[0] - qTilt[1] * qw[1] - qTilt[2] * qw[2] - qTilt[3] * qw[3];
 8002166:	ed97 7a05 	vldr	s14, [r7, #20]
 800216a:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002174:	edd7 6a06 	vldr	s13, [r7, #24]
 8002178:	4b72      	ldr	r3, [pc, #456]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800217a:	edd3 7a01 	vldr	s15, [r3, #4]
 800217e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002186:	edd7 6a07 	vldr	s13, [r7, #28]
 800218a:	4b6e      	ldr	r3, [pc, #440]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800218c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002198:	edd7 6a08 	vldr	s13, [r7, #32]
 800219c:	4b69      	ldr	r3, [pc, #420]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800219e:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021aa:	edc7 7a01 	vstr	s15, [r7, #4]
	    qc[1] = qTilt[0] * qw[1] + qTilt[1] * qw[0] + qTilt[2] * qw[3] - qTilt[3] * qw[2];
 80021ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80021b2:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 80021b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80021c0:	4b60      	ldr	r3, [pc, #384]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80021d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 80021d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80021d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e0:	edd7 6a08 	vldr	s13, [r7, #32]
 80021e4:	4b57      	ldr	r3, [pc, #348]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 80021e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f2:	edc7 7a02 	vstr	s15, [r7, #8]
	    qc[2] = qTilt[0] * qw[2] - qTilt[1] * qw[3] + qTilt[2] * qw[0] + qTilt[3] * qw[1];
 80021f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80021fa:	4b52      	ldr	r3, [pc, #328]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 80021fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	edd7 6a06 	vldr	s13, [r7, #24]
 8002208:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800220a:	edd3 7a03 	vldr	s15, [r3, #12]
 800220e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002216:	edd7 6a07 	vldr	s13, [r7, #28]
 800221a:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	edd7 6a08 	vldr	s13, [r7, #32]
 800222c:	4b45      	ldr	r3, [pc, #276]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 800222e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223a:	edc7 7a03 	vstr	s15, [r7, #12]
	    qc[3] = qTilt[0] * qw[3] + qTilt[1] * qw[2] - qTilt[2] * qw[1] + qTilt[3] * qw[0];
 800223e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002242:	4b40      	ldr	r3, [pc, #256]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 8002244:	edd3 7a03 	vldr	s15, [r3, #12]
 8002248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002250:	4b3c      	ldr	r3, [pc, #240]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 8002252:	edd3 7a02 	vldr	s15, [r3, #8]
 8002256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800225e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002262:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 8002264:	edd3 7a01 	vldr	s15, [r3, #4]
 8002268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002270:	edd7 6a08 	vldr	s13, [r7, #32]
 8002274:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <updateTiltCorrectionWithComplementaryFilter+0x350>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	edc7 7a04 	vstr	s15, [r7, #16]

	    float normq = sqrt(qc[0] * qc[0] + qc[1] * qc[1] + qc[2] * qc[2] + qc[3] * qc[3]);
 8002286:	ed97 7a01 	vldr	s14, [r7, #4]
 800228a:	edd7 7a01 	vldr	s15, [r7, #4]
 800228e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002292:	edd7 6a02 	vldr	s13, [r7, #8]
 8002296:	edd7 7a02 	vldr	s15, [r7, #8]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	edd7 6a03 	vldr	s13, [r7, #12]
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80022b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7fe f95f 	bl	8000588 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	ec43 2b10 	vmov	d0, r2, r3
 80022d2:	f006 fc8d 	bl	8008bf0 <sqrt>
 80022d6:	ec53 2b10 	vmov	r2, r3, d0
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc83 	bl	8000be8 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
	    qc[0] /= normq;
 80022e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80022ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	edc7 7a01 	vstr	s15, [r7, #4]
	    qc[1] /= normq;
 80022f6:	edd7 6a02 	vldr	s13, [r7, #8]
 80022fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002302:	edc7 7a02 	vstr	s15, [r7, #8]
	    qc[2] /= normq;
 8002306:	edd7 6a03 	vldr	s13, [r7, #12]
 800230a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800230e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002312:	edc7 7a03 	vstr	s15, [r7, #12]
	    qc[3] /= normq;
 8002316:	edd7 6a04 	vldr	s13, [r7, #16]
 800231a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800231e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002322:	edc7 7a04 	vstr	s15, [r7, #16]

	   memcpy(qt, qc, sizeof(qc));
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <updateTiltCorrectionWithComplementaryFilter+0x354>)
 8002328:	461c      	mov	r4, r3
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8002332:	bf00      	nop
 8002334:	374c      	adds	r7, #76	@ 0x4c
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
 800233a:	bf00      	nop
 800233c:	200002cc 	.word	0x200002cc
 8002340:	3f733333 	.word	0x3f733333
 8002344:	200002bc 	.word	0x200002bc
 8002348:	20000000 	.word	0x20000000

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <Error_Handler+0x8>

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <HAL_MspInit+0x4c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002396:	2007      	movs	r0, #7
 8002398:	f000 fb40 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a19      	ldr	r2, [pc, #100]	@ (800242c <HAL_I2C_MspInit+0x84>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12b      	bne.n	8002422 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e6:	23c0      	movs	r3, #192	@ 0xc0
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ea:	2312      	movs	r3, #18
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f6:	2304      	movs	r3, #4
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <HAL_I2C_MspInit+0x8c>)
 8002402:	f000 fbdf 	bl	8002bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_I2C_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	@ 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	40023800 	.word	0x40023800
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_UART_MspInit+0x94>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d133      	bne.n	80024c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_UART_MspInit+0x98>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002492:	230c      	movs	r3, #12
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a2:	2307      	movs	r3, #7
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4809      	ldr	r0, [pc, #36]	@ (80024d4 <HAL_UART_MspInit+0x9c>)
 80024ae:	f000 fb89 	bl	8002bc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2026      	movs	r0, #38	@ 0x26
 80024b8:	f000 fabb 	bl	8002a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024bc:	2026      	movs	r0, #38	@ 0x26
 80024be:	f000 fad4 	bl	8002a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	@ 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40004400 	.word	0x40004400
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <NMI_Handler+0x4>

080024e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <MemManage_Handler+0x4>

080024f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <UsageFault_Handler+0x4>

08002500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252e:	f000 f961 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <USART2_IRQHandler+0x10>)
 800253e:	f002 fd8d 	bl	800505c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000268 	.word	0x20000268

0800254c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_kill>:

int _kill(int pid, int sig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002566:	f004 fa99 	bl	8006a9c <__errno>
 800256a:	4603      	mov	r3, r0
 800256c:	2216      	movs	r2, #22
 800256e:	601a      	str	r2, [r3, #0]
  return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_exit>:

void _exit (int status)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_kill>
  while (1) {}    /* Make sure we hang here */
 800258e:	bf00      	nop
 8002590:	e7fd      	b.n	800258e <_exit+0x12>

08002592 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e00a      	b.n	80025ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025a4:	f3af 8000 	nop.w
 80025a8:	4601      	mov	r1, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	60ba      	str	r2, [r7, #8]
 80025b0:	b2ca      	uxtb	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbf0      	blt.n	80025a4 <_read+0x12>
  }

  return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e009      	b.n	80025f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	60ba      	str	r2, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbf1      	blt.n	80025de <_write+0x12>
  }
  return len;
 80025fa:	687b      	ldr	r3, [r7, #4]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_close>:

int _close(int file)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800262c:	605a      	str	r2, [r3, #4]
  return 0;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_isatty>:

int _isatty(int file)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002674:	4a14      	ldr	r2, [pc, #80]	@ (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002680:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800269c:	f004 f9fe 	bl	8006a9c <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	220c      	movs	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ac:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20020000 	.word	0x20020000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	200002e8 	.word	0x200002e8
 80026d4:	20000440 	.word	0x20000440

080026d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <SystemInit+0x20>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <SystemInit+0x20>)
 80026e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002734 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002700:	f7ff ffea 	bl	80026d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002706:	490d      	ldr	r1, [pc, #52]	@ (800273c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800271c:	4c0a      	ldr	r4, [pc, #40]	@ (8002748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800272a:	f004 f9bd 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272e:	f7fe fc23 	bl	8000f78 <main>
  bx  lr    
 8002732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002740:	0800a970 	.word	0x0800a970
  ldr r2, =_sbss
 8002744:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002748:	2000043c 	.word	0x2000043c

0800274c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC_IRQHandler>
	...

08002750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002754:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <HAL_Init+0x40>)
 800275a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_Init+0x40>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_Init+0x40>)
 8002766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800276a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_Init+0x40>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f000 f94f 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f808 	bl	8002794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002784:	f7ff fde8 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00

08002794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_InitTick+0x54>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_InitTick+0x58>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f967 	bl	8002a86 <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f000 f92f 	bl	8002a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	@ (80027f0 <HAL_InitTick+0x5c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000010 	.word	0x20000010
 80027ec:	20000018 	.word	0x20000018
 80027f0:	20000014 	.word	0x20000014

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x20>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_IncTick+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <HAL_IncTick+0x24>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000018 	.word	0x20000018
 8002818:	200002ec 	.word	0x200002ec

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200002ec 	.word	0x200002ec

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff ffee 	bl	800281c <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d005      	beq.n	800285a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_Delay+0x44>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800285a:	bf00      	nop
 800285c:	f7ff ffde 	bl	800281c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d8f7      	bhi.n	800285c <HAL_Delay+0x28>
  {
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000018 	.word	0x20000018

0800287c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ae:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	60d3      	str	r3, [r2, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c8:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <__NVIC_GetPriorityGrouping+0x18>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f003 0307 	and.w	r3, r3, #7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db0b      	blt.n	800290a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4907      	ldr	r1, [pc, #28]	@ (8002918 <__NVIC_EnableIRQ+0x38>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2001      	movs	r0, #1
 8002902:	fa00 f202 	lsl.w	r2, r0, r2
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	@ (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	@ (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	@ 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	@ 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e8:	d301      	bcc.n	80029ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00f      	b.n	8002a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <SysTick_Config+0x40>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f6:	210f      	movs	r1, #15
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f7ff ff8e 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <SysTick_Config+0x40>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <SysTick_Config+0x40>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff29 	bl	800287c <__NVIC_SetPriorityGrouping>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a44:	f7ff ff3e 	bl	80028c4 <__NVIC_GetPriorityGrouping>
 8002a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff ff8e 	bl	8002970 <NVIC_EncodePriority>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff5d 	bl	800291c <__NVIC_SetPriority>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff31 	bl	80028e0 <__NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffa2 	bl	80029d8 <SysTick_Config>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff feb6 	bl	800281c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d008      	beq.n	8002ad0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e052      	b.n	8002b76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0216 	bic.w	r2, r2, #22
 8002ade:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <HAL_DMA_Abort+0x62>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0208 	bic.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b20:	e013      	b.n	8002b4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b22:	f7ff fe7b 	bl	800281c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d90c      	bls.n	8002b4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e015      	b.n	8002b76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e4      	bne.n	8002b22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	223f      	movs	r2, #63	@ 0x3f
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e00c      	b.n	8002bb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e165      	b.n	8002eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 8154 	bne.w	8002ea6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d130      	bne.n	8002c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d017      	beq.n	8002cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d123      	bne.n	8002d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80ae 	beq.w	8002ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec4 <HAL_GPIO_Init+0x300>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec4 <HAL_GPIO_Init+0x300>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec4 <HAL_GPIO_Init+0x300>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d66:	4a58      	ldr	r2, [pc, #352]	@ (8002ec8 <HAL_GPIO_Init+0x304>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ecc <HAL_GPIO_Init+0x308>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d025      	beq.n	8002dde <HAL_GPIO_Init+0x21a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed0 <HAL_GPIO_Init+0x30c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <HAL_GPIO_Init+0x216>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed4 <HAL_GPIO_Init+0x310>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x212>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed8 <HAL_GPIO_Init+0x314>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	@ (8002edc <HAL_GPIO_Init+0x318>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x20a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee0 <HAL_GPIO_Init+0x31c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x206>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <HAL_GPIO_Init+0x320>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x202>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00c      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00a      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x21c>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	@ (8002ec8 <HAL_GPIO_Init+0x304>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a31      	ldr	r2, [pc, #196]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f ae96 	bls.w	8002be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	@ 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40013c00 	.word	0x40013c00

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002efc:	787b      	ldrb	r3, [r7, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f08:	e003      	b.n	8002f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	041a      	lsls	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	619a      	str	r2, [r3, #24]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e12b      	b.n	800318a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fa2e 	bl	80023a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	@ 0x24
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f84:	f001 fa98 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a81      	ldr	r2, [pc, #516]	@ (8003194 <HAL_I2C_Init+0x274>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d807      	bhi.n	8002fa4 <HAL_I2C_Init+0x84>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a80      	ldr	r2, [pc, #512]	@ (8003198 <HAL_I2C_Init+0x278>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e006      	b.n	8002fb2 <HAL_I2C_Init+0x92>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a7d      	ldr	r2, [pc, #500]	@ (800319c <HAL_I2C_Init+0x27c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf94      	ite	ls
 8002fac:	2301      	movls	r3, #1
 8002fae:	2300      	movhi	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0e7      	b.n	800318a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a78      	ldr	r2, [pc, #480]	@ (80031a0 <HAL_I2C_Init+0x280>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8003194 <HAL_I2C_Init+0x274>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <HAL_I2C_Init+0xd4>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e009      	b.n	8003008 <HAL_I2C_Init+0xe8>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	4a69      	ldr	r2, [pc, #420]	@ (80031a4 <HAL_I2C_Init+0x284>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	3301      	adds	r3, #1
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800301a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	495c      	ldr	r1, [pc, #368]	@ (8003194 <HAL_I2C_Init+0x274>)
 8003024:	428b      	cmp	r3, r1
 8003026:	d819      	bhi.n	800305c <HAL_I2C_Init+0x13c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e59      	subs	r1, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fbb1 f3f3 	udiv	r3, r1, r3
 8003036:	1c59      	adds	r1, r3, #1
 8003038:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800303c:	400b      	ands	r3, r1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_I2C_Init+0x138>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e59      	subs	r1, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	e051      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 8003058:	2304      	movs	r3, #4
 800305a:	e04f      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <HAL_I2C_Init+0x168>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e012      	b.n	80030ae <HAL_I2C_Init+0x18e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	0099      	lsls	r1, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Init+0x196>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e022      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10e      	bne.n	80030dc <HAL_I2C_Init+0x1bc>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1e58      	subs	r0, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030da:	e00f      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	0099      	lsls	r1, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	6809      	ldr	r1, [r1, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800312a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6911      	ldr	r1, [r2, #16]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	000186a0 	.word	0x000186a0
 8003198:	001e847f 	.word	0x001e847f
 800319c:	003d08ff 	.word	0x003d08ff
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	10624dd3 	.word	0x10624dd3

080031a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
 80031b8:	4613      	mov	r3, r2
 80031ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff fb2e 	bl	800281c <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	f040 80e0 	bne.w	8003390 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2319      	movs	r3, #25
 80031d6:	2201      	movs	r2, #1
 80031d8:	4970      	ldr	r1, [pc, #448]	@ (800339c <HAL_I2C_Master_Transmit+0x1f4>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fdf4 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0d3      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2C_Master_Transmit+0x50>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0cc      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d007      	beq.n	800321e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2210      	movs	r2, #16
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	893a      	ldrh	r2, [r7, #8]
 800324e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a50      	ldr	r2, [pc, #320]	@ (80033a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fbc8 	bl	80039fc <I2C_MasterRequestWrite>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e08d      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800328c:	e066      	b.n	800335c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 feb2 	bl	8003ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06b      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d11b      	bne.n	8003330 <HAL_I2C_Master_Transmit+0x188>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	6a39      	ldr	r1, [r7, #32]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fea9 	bl	800408c <I2C_WaitOnBTFFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	2b04      	cmp	r3, #4
 8003346:	d107      	bne.n	8003358 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01a      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d194      	bne.n	800328e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	00100002 	.word	0x00100002
 80033a0:	ffff0000 	.word	0xffff0000

080033a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	@ 0x30
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	460b      	mov	r3, r1
 80033b2:	817b      	strh	r3, [r7, #10]
 80033b4:	4613      	mov	r3, r2
 80033b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff fa30 	bl	800281c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	f040 8217 	bne.w	80037fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2319      	movs	r3, #25
 80033d2:	2201      	movs	r2, #1
 80033d4:	497c      	ldr	r1, [pc, #496]	@ (80035c8 <HAL_I2C_Master_Receive+0x224>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fcf6 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	e20a      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2C_Master_Receive+0x50>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e203      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d007      	beq.n	800341a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2222      	movs	r2, #34	@ 0x22
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2210      	movs	r2, #16
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a5c      	ldr	r2, [pc, #368]	@ (80035cc <HAL_I2C_Master_Receive+0x228>)
 800345a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800345c:	8979      	ldrh	r1, [r7, #10]
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb4c 	bl	8003b00 <I2C_MasterRequestRead>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1c4      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	d113      	bne.n	80034a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e198      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d11b      	bne.n	80034e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e178      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d11b      	bne.n	8003522 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	e158      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003548:	e144      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	2b03      	cmp	r3, #3
 8003550:	f200 80f1 	bhi.w	8003736 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	2b01      	cmp	r3, #1
 800355a:	d123      	bne.n	80035a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fddb 	bl	800411c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e145      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a2:	e117      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d14e      	bne.n	800364a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	4906      	ldr	r1, [pc, #24]	@ (80035d0 <HAL_I2C_Master_Receive+0x22c>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fc06 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e11a      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000
 80035d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003648:	e0c4      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	2200      	movs	r2, #0
 8003652:	496c      	ldr	r1, [pc, #432]	@ (8003804 <HAL_I2C_Master_Receive+0x460>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fbb7 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cb      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	2200      	movs	r2, #0
 80036ae:	4955      	ldr	r1, [pc, #340]	@ (8003804 <HAL_I2C_Master_Receive+0x460>)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fb89 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e09d      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003734:	e04e      	b.n	80037d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fcee 	bl	800411c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e058      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d124      	bne.n	80037d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	2b03      	cmp	r3, #3
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f aeb6 	bne.w	800354a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	@ 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	00010004 	.word	0x00010004

08003808 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	817b      	strh	r3, [r7, #10]
 800381a:	460b      	mov	r3, r1
 800381c:	813b      	strh	r3, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003822:	f7fe fffb 	bl	800281c <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b20      	cmp	r3, #32
 8003832:	f040 80d9 	bne.w	80039e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2319      	movs	r3, #25
 800383c:	2201      	movs	r2, #1
 800383e:	496d      	ldr	r1, [pc, #436]	@ (80039f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fac1 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
 800384e:	e0cc      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_I2C_Mem_Write+0x56>
 800385a:	2302      	movs	r3, #2
 800385c:	e0c5      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d007      	beq.n	8003884 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2221      	movs	r2, #33	@ 0x21
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2240      	movs	r2, #64	@ 0x40
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a4d      	ldr	r2, [pc, #308]	@ (80039f8 <HAL_I2C_Mem_Write+0x1f0>)
 80038c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c6:	88f8      	ldrh	r0, [r7, #6]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	8979      	ldrh	r1, [r7, #10]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4603      	mov	r3, r0
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f9e0 	bl	8003c9c <I2C_RequestMemoryWrite>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d052      	beq.n	8003988 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e081      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fb86 	bl	8003ffc <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d11b      	bne.n	8003988 <HAL_I2C_Mem_Write+0x180>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1aa      	bne.n	80038e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb79 	bl	800408c <I2C_WaitOnBTFFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d107      	bne.n	80039b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e016      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	00100002 	.word	0x00100002
 80039f8:	ffff0000 	.word	0xffff0000

080039fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d006      	beq.n	8003a26 <I2C_MasterRequestWrite+0x2a>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d003      	beq.n	8003a26 <I2C_MasterRequestWrite+0x2a>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e00b      	b.n	8003a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	2b12      	cmp	r3, #18
 8003a3e:	d107      	bne.n	8003a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f9b3 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a76:	d103      	bne.n	8003a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e035      	b.n	8003af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a8c:	d108      	bne.n	8003aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a9c:	611a      	str	r2, [r3, #16]
 8003a9e:	e01b      	b.n	8003ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aa0:	897b      	ldrh	r3, [r7, #10]
 8003aa2:	11db      	asrs	r3, r3, #7
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0306 	and.w	r3, r3, #6
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f063 030f 	orn	r3, r3, #15
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	490e      	ldr	r1, [pc, #56]	@ (8003af8 <I2C_MasterRequestWrite+0xfc>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9fc 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e010      	b.n	8003af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ace:	897b      	ldrh	r3, [r7, #10]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4907      	ldr	r1, [pc, #28]	@ (8003afc <I2C_MasterRequestWrite+0x100>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f9ec 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	00010008 	.word	0x00010008
 8003afc:	00010002 	.word	0x00010002

08003b00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d006      	beq.n	8003b3a <I2C_MasterRequestRead+0x3a>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d003      	beq.n	8003b3a <I2C_MasterRequestRead+0x3a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b38:	d108      	bne.n	8003b4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e00b      	b.n	8003b64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	2b11      	cmp	r3, #17
 8003b52:	d107      	bne.n	8003b64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f929 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8a:	d103      	bne.n	8003b94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e079      	b.n	8003c8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba0:	d108      	bne.n	8003bb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e05f      	b.n	8003c74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bb4:	897b      	ldrh	r3, [r7, #10]
 8003bb6:	11db      	asrs	r3, r3, #7
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f003 0306 	and.w	r3, r3, #6
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f063 030f 	orn	r3, r3, #15
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4930      	ldr	r1, [pc, #192]	@ (8003c94 <I2C_MasterRequestRead+0x194>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f972 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e054      	b.n	8003c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4929      	ldr	r1, [pc, #164]	@ (8003c98 <I2C_MasterRequestRead+0x198>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f962 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e044      	b.n	8003c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8c7 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4e:	d103      	bne.n	8003c58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e017      	b.n	8003c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	11db      	asrs	r3, r3, #7
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f063 030e 	orn	r3, r3, #14
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4907      	ldr	r1, [pc, #28]	@ (8003c98 <I2C_MasterRequestRead+0x198>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f91e 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	00010008 	.word	0x00010008
 8003c98:	00010002 	.word	0x00010002

08003c9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	817b      	strh	r3, [r7, #10]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	813b      	strh	r3, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f878 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cec:	d103      	bne.n	8003cf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e05f      	b.n	8003dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	492d      	ldr	r1, [pc, #180]	@ (8003dc4 <I2C_RequestMemoryWrite+0x128>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f8d3 	bl	8003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e04c      	b.n	8003dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d38:	6a39      	ldr	r1, [r7, #32]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f95e 	bl	8003ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d107      	bne.n	8003d5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e02b      	b.n	8003dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]
 8003d72:	e021      	b.n	8003db8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f938 	bl	8003ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e005      	b.n	8003dba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dae:	893b      	ldrh	r3, [r7, #8]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	00010002 	.word	0x00010002

08003dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	e048      	b.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d044      	beq.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fd1b 	bl	800281c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d139      	bne.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d10d      	bne.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	43da      	mvns	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	e00c      	b.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d116      	bne.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e023      	b.n	8003eb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10d      	bne.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	e00c      	b.n	8003eac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d093      	beq.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eca:	e071      	b.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eda:	d123      	bne.n	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e067      	b.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d041      	beq.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2c:	f7fe fc76 	bl	800281c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d302      	bcc.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d136      	bne.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10c      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e00b      	b.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e021      	b.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10c      	bne.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e00b      	b.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f af6d 	bne.w	8003ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004008:	e034      	b.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f8e3 	bl	80041d6 <I2C_IsAcknowledgeFailed>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e034      	b.n	8004084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d028      	beq.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fbfb 	bl	800281c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11d      	bne.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b80      	cmp	r3, #128	@ 0x80
 8004044:	d016      	beq.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e007      	b.n	8004084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	2b80      	cmp	r3, #128	@ 0x80
 8004080:	d1c3      	bne.n	800400a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004098:	e034      	b.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f89b 	bl	80041d6 <I2C_IsAcknowledgeFailed>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e034      	b.n	8004114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d028      	beq.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fe fbb3 	bl	800281c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11d      	bne.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d016      	beq.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e007      	b.n	8004114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d1c3      	bne.n	800409a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004128:	e049      	b.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d119      	bne.n	800416c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e030      	b.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fe fb56 	bl	800281c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11d      	bne.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b40      	cmp	r3, #64	@ 0x40
 800418e:	d016      	beq.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e007      	b.n	80041ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d1ae      	bne.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ec:	d11b      	bne.n	8004226 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	@ 0x40
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800425a:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004260:	f7fe fadc 	bl	800281c <HAL_GetTick>
 8004264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004266:	e009      	b.n	800427c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004268:	f7fe fad8 	bl	800281c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004276:	d901      	bls.n	800427c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e01f      	b.n	80042bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800427c:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <HAL_PWREx_EnableOverDrive+0x98>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004288:	d1ee      	bne.n	8004268 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800428a:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004290:	f7fe fac4 	bl	800281c <HAL_GetTick>
 8004294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004296:	e009      	b.n	80042ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004298:	f7fe fac0 	bl	800281c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042a6:	d901      	bls.n	80042ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e007      	b.n	80042bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042ac:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <HAL_PWREx_EnableOverDrive+0x98>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b8:	d1ee      	bne.n	8004298 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	420e0040 	.word	0x420e0040
 80042cc:	40007000 	.word	0x40007000
 80042d0:	420e0044 	.word	0x420e0044

080042d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0cc      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b68      	ldr	r3, [pc, #416]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d90c      	bls.n	8004310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b65      	ldr	r3, [pc, #404]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a58      	ldr	r2, [pc, #352]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a52      	ldr	r2, [pc, #328]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800434a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d044      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	4b3f      	ldr	r3, [pc, #252]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e067      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	4b37      	ldr	r3, [pc, #220]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4934      	ldr	r1, [pc, #208]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c4:	f7fe fa2a 	bl	800281c <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fe fa26 	bl	800281c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e04f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 020c 	and.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1eb      	bne.n	80043cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f4:	4b25      	ldr	r3, [pc, #148]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20c      	bcs.n	800441c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b22      	ldr	r3, [pc, #136]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004446:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f855 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe f98a 	bl	8002794 <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00
 8004490:	40023800 	.word	0x40023800
 8004494:	0800a400 	.word	0x0800a400
 8004498:	20000010 	.word	0x20000010
 800449c:	20000014 	.word	0x20000014

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000010 	.word	0x20000010

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044bc:	f7ff fff0 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0a9b      	lsrs	r3, r3, #10
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	@ (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800a410 	.word	0x0800a410

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff ffdc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0b5b      	lsrs	r3, r3, #13
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	@ (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	0800a410 	.word	0x0800a410

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b0ae      	sub	sp, #184	@ 0xb8
 800450e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452e:	4bcb      	ldr	r3, [pc, #812]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b0c      	cmp	r3, #12
 8004538:	f200 8206 	bhi.w	8004948 <HAL_RCC_GetSysClockFreq+0x440>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579
 8004548:	08004949 	.word	0x08004949
 800454c:	08004949 	.word	0x08004949
 8004550:	08004949 	.word	0x08004949
 8004554:	08004581 	.word	0x08004581
 8004558:	08004949 	.word	0x08004949
 800455c:	08004949 	.word	0x08004949
 8004560:	08004949 	.word	0x08004949
 8004564:	08004589 	.word	0x08004589
 8004568:	08004949 	.word	0x08004949
 800456c:	08004949 	.word	0x08004949
 8004570:	08004949 	.word	0x08004949
 8004574:	08004779 	.word	0x08004779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4bb9      	ldr	r3, [pc, #740]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x358>)
 800457a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800457e:	e1e7      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004580:	4bb8      	ldr	r3, [pc, #736]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004586:	e1e3      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004588:	4bb4      	ldr	r3, [pc, #720]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004594:	4bb1      	ldr	r3, [pc, #708]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d071      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a0:	4bae      	ldr	r3, [pc, #696]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	f04f 0000 	mov.w	r0, #0
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	0159      	lsls	r1, r3, #5
 80045d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d8:	0150      	lsls	r0, r2, #5
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4621      	mov	r1, r4
 80045e0:	1a51      	subs	r1, r2, r1
 80045e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80045e4:	4629      	mov	r1, r5
 80045e6:	eb63 0301 	sbc.w	r3, r3, r1
 80045ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80045f8:	4649      	mov	r1, r9
 80045fa:	018b      	lsls	r3, r1, #6
 80045fc:	4641      	mov	r1, r8
 80045fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004602:	4641      	mov	r1, r8
 8004604:	018a      	lsls	r2, r1, #6
 8004606:	4641      	mov	r1, r8
 8004608:	1a51      	subs	r1, r2, r1
 800460a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800460c:	4649      	mov	r1, r9
 800460e:	eb63 0301 	sbc.w	r3, r3, r1
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004620:	4649      	mov	r1, r9
 8004622:	00cb      	lsls	r3, r1, #3
 8004624:	4641      	mov	r1, r8
 8004626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462a:	4641      	mov	r1, r8
 800462c:	00ca      	lsls	r2, r1, #3
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	4603      	mov	r3, r0
 8004634:	4622      	mov	r2, r4
 8004636:	189b      	adds	r3, r3, r2
 8004638:	633b      	str	r3, [r7, #48]	@ 0x30
 800463a:	462b      	mov	r3, r5
 800463c:	460a      	mov	r2, r1
 800463e:	eb42 0303 	adc.w	r3, r2, r3
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004650:	4629      	mov	r1, r5
 8004652:	024b      	lsls	r3, r1, #9
 8004654:	4621      	mov	r1, r4
 8004656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800465a:	4621      	mov	r1, r4
 800465c:	024a      	lsls	r2, r1, #9
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004666:	2200      	movs	r2, #0
 8004668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800466c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004674:	f7fc fb08 	bl	8000c88 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4613      	mov	r3, r2
 800467e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004682:	e067      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004684:	4b75      	ldr	r3, [pc, #468]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800469e:	2300      	movs	r3, #0
 80046a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80046a6:	4622      	mov	r2, r4
 80046a8:	462b      	mov	r3, r5
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	0159      	lsls	r1, r3, #5
 80046b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b8:	0150      	lsls	r0, r2, #5
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4621      	mov	r1, r4
 80046c0:	1a51      	subs	r1, r2, r1
 80046c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046c4:	4629      	mov	r1, r5
 80046c6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80046d8:	4649      	mov	r1, r9
 80046da:	018b      	lsls	r3, r1, #6
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046e2:	4641      	mov	r1, r8
 80046e4:	018a      	lsls	r2, r1, #6
 80046e6:	4641      	mov	r1, r8
 80046e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ec:	4649      	mov	r1, r9
 80046ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004706:	4692      	mov	sl, r2
 8004708:	469b      	mov	fp, r3
 800470a:	4623      	mov	r3, r4
 800470c:	eb1a 0303 	adds.w	r3, sl, r3
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	462b      	mov	r3, r5
 8004714:	eb4b 0303 	adc.w	r3, fp, r3
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004726:	4629      	mov	r1, r5
 8004728:	028b      	lsls	r3, r1, #10
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004730:	4621      	mov	r1, r4
 8004732:	028a      	lsls	r2, r1, #10
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800473c:	2200      	movs	r2, #0
 800473e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004740:	677a      	str	r2, [r7, #116]	@ 0x74
 8004742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004746:	f7fc fa9f 	bl	8000c88 <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4613      	mov	r3, r2
 8004750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004754:	4b41      	ldr	r3, [pc, #260]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800476a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004776:	e0eb      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b38      	ldr	r3, [pc, #224]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004784:	4b35      	ldr	r3, [pc, #212]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d06b      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004790:	4b32      	ldr	r3, [pc, #200]	@ (800485c <HAL_RCC_GetSysClockFreq+0x354>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	2200      	movs	r2, #0
 8004798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800479c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047a4:	2300      	movs	r3, #0
 80047a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047ac:	4622      	mov	r2, r4
 80047ae:	462b      	mov	r3, r5
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047be:	0150      	lsls	r0, r2, #5
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4621      	mov	r1, r4
 80047c6:	1a51      	subs	r1, r2, r1
 80047c8:	61b9      	str	r1, [r7, #24]
 80047ca:	4629      	mov	r1, r5
 80047cc:	eb63 0301 	sbc.w	r3, r3, r1
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047de:	4659      	mov	r1, fp
 80047e0:	018b      	lsls	r3, r1, #6
 80047e2:	4651      	mov	r1, sl
 80047e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e8:	4651      	mov	r1, sl
 80047ea:	018a      	lsls	r2, r1, #6
 80047ec:	4651      	mov	r1, sl
 80047ee:	ebb2 0801 	subs.w	r8, r2, r1
 80047f2:	4659      	mov	r1, fp
 80047f4:	eb63 0901 	sbc.w	r9, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480c:	4690      	mov	r8, r2
 800480e:	4699      	mov	r9, r3
 8004810:	4623      	mov	r3, r4
 8004812:	eb18 0303 	adds.w	r3, r8, r3
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	462b      	mov	r3, r5
 800481a:	eb49 0303 	adc.w	r3, r9, r3
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800482c:	4629      	mov	r1, r5
 800482e:	024b      	lsls	r3, r1, #9
 8004830:	4621      	mov	r1, r4
 8004832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004836:	4621      	mov	r1, r4
 8004838:	024a      	lsls	r2, r1, #9
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004842:	2200      	movs	r2, #0
 8004844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004846:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800484c:	f7fc fa1c 	bl	8000c88 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800485a:	e065      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x420>
 800485c:	40023800 	.word	0x40023800
 8004860:	00f42400 	.word	0x00f42400
 8004864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004868:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x458>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	2200      	movs	r2, #0
 8004870:	4618      	mov	r0, r3
 8004872:	4611      	mov	r1, r2
 8004874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004878:	653b      	str	r3, [r7, #80]	@ 0x50
 800487a:	2300      	movs	r3, #0
 800487c:	657b      	str	r3, [r7, #84]	@ 0x54
 800487e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	f04f 0000 	mov.w	r0, #0
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	0159      	lsls	r1, r3, #5
 8004890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004894:	0150      	lsls	r0, r2, #5
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4641      	mov	r1, r8
 800489c:	1a51      	subs	r1, r2, r1
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	4649      	mov	r1, r9
 80048a2:	eb63 0301 	sbc.w	r3, r3, r1
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048b4:	4659      	mov	r1, fp
 80048b6:	018b      	lsls	r3, r1, #6
 80048b8:	4651      	mov	r1, sl
 80048ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048be:	4651      	mov	r1, sl
 80048c0:	018a      	lsls	r2, r1, #6
 80048c2:	4651      	mov	r1, sl
 80048c4:	1a54      	subs	r4, r2, r1
 80048c6:	4659      	mov	r1, fp
 80048c8:	eb63 0501 	sbc.w	r5, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	00eb      	lsls	r3, r5, #3
 80048d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048da:	00e2      	lsls	r2, r4, #3
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	18e3      	adds	r3, r4, r3
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	464b      	mov	r3, r9
 80048e8:	eb45 0303 	adc.w	r3, r5, r3
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004910:	2200      	movs	r2, #0
 8004912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004914:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800491a:	f7fc f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4613      	mov	r3, r2
 8004924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004928:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x458>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0f1b      	lsrs	r3, r3, #28
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800493a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004946:	e003      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800494a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800494e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004954:	4618      	mov	r0, r3
 8004956:	37b8      	adds	r7, #184	@ 0xb8
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400

08004968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e28d      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8083 	beq.w	8004a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004988:	4b94      	ldr	r3, [pc, #592]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b04      	cmp	r3, #4
 8004992:	d019      	beq.n	80049c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004994:	4b91      	ldr	r3, [pc, #580]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
        || \
 800499c:	2b08      	cmp	r3, #8
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049a0:	4b8e      	ldr	r3, [pc, #568]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ae:	4b8b      	ldr	r3, [pc, #556]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b88      	ldr	r3, [pc, #544]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b84      	ldr	r3, [pc, #528]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x124>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d157      	bne.n	8004a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e25a      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x90>
 80049ea:	4b7c      	ldr	r3, [pc, #496]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7b      	ldr	r2, [pc, #492]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xcc>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0xb4>
 8004a02:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a75      	ldr	r2, [pc, #468]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b73      	ldr	r3, [pc, #460]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a72      	ldr	r2, [pc, #456]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xcc>
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a6e      	ldr	r2, [pc, #440]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd feee 	bl	800281c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd feea 	bl	800281c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e21f      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b61      	ldr	r3, [pc, #388]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xdc>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd feda 	bl	800281c <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fed6 	bl	800281c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e20b      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b57      	ldr	r3, [pc, #348]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x104>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06f      	beq.n	8004b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a9a:	4b50      	ldr	r3, [pc, #320]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d017      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
        || \
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d105      	bne.n	8004abe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b44      	ldr	r3, [pc, #272]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x186>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e1d3      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4937      	ldr	r1, [pc, #220]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	e03a      	b.n	8004b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b34      	ldr	r3, [pc, #208]	@ (8004be0 <HAL_RCC_OscConfig+0x278>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fe83 	bl	800281c <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fe7f 	bl	800281c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1b4      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4925      	ldr	r1, [pc, #148]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <HAL_RCC_OscConfig+0x278>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fe62 	bl	800281c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fe5e 	bl	800281c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e193      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d036      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fd fe42 	bl	800281c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fd fe3e 	bl	800281c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e173      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_OscConfig+0x274>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x234>
 8004bba:	e01b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fe2b 	bl	800281c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	e00e      	b.n	8004be8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fd fe27 	bl	800281c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d907      	bls.n	8004be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e15c      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470000 	.word	0x42470000
 8004be4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ea      	bne.n	8004bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8097 	beq.w	8004d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c06:	4b83      	ldr	r3, [pc, #524]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	4b7f      	ldr	r3, [pc, #508]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c22:	4b7c      	ldr	r3, [pc, #496]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b79      	ldr	r3, [pc, #484]	@ (8004e18 <HAL_RCC_OscConfig+0x4b0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d118      	bne.n	8004c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3e:	4b76      	ldr	r3, [pc, #472]	@ (8004e18 <HAL_RCC_OscConfig+0x4b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a75      	ldr	r2, [pc, #468]	@ (8004e18 <HAL_RCC_OscConfig+0x4b0>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fde7 	bl	800281c <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c52:	f7fd fde3 	bl	800281c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e118      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	4b6c      	ldr	r3, [pc, #432]	@ (8004e18 <HAL_RCC_OscConfig+0x4b0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x31e>
 8004c78:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7c:	4a65      	ldr	r2, [pc, #404]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c84:	e01c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x358>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x340>
 8004c8e:	4b61      	ldr	r3, [pc, #388]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	4a60      	ldr	r2, [pc, #384]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x358>
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cac:	4a59      	ldr	r2, [pc, #356]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb4:	4b57      	ldr	r3, [pc, #348]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004cba:	f023 0304 	bic.w	r3, r3, #4
 8004cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd fda8 	bl	800281c <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fd fda4 	bl	800281c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0d7      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ee      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x368>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fd92 	bl	800281c <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fd8e 	bl	800281c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0c1      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d12:	4b40      	ldr	r3, [pc, #256]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ee      	bne.n	8004cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d105      	bne.n	8004d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	4a3a      	ldr	r2, [pc, #232]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80ad 	beq.w	8004e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d3a:	4b36      	ldr	r3, [pc, #216]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d060      	beq.n	8004e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d145      	bne.n	8004dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b33      	ldr	r3, [pc, #204]	@ (8004e1c <HAL_RCC_OscConfig+0x4b4>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd fd62 	bl	800281c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fd fd5e 	bl	800281c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e093      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b29      	ldr	r3, [pc, #164]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	019b      	lsls	r3, r3, #6
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	041b      	lsls	r3, r3, #16
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	071b      	lsls	r3, r3, #28
 8004da6:	491b      	ldr	r1, [pc, #108]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dac:	4b1b      	ldr	r3, [pc, #108]	@ (8004e1c <HAL_RCC_OscConfig+0x4b4>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd fd33 	bl	800281c <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7fd fd2f 	bl	800281c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e064      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dcc:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x452>
 8004dd8:	e05c      	b.n	8004e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dda:	4b10      	ldr	r3, [pc, #64]	@ (8004e1c <HAL_RCC_OscConfig+0x4b4>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fd1c 	bl	800281c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd fd18 	bl	800281c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e04d      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_RCC_OscConfig+0x4ac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x480>
 8004e06:	e045      	b.n	8004e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e040      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e20:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea0 <HAL_RCC_OscConfig+0x538>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d030      	beq.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d129      	bne.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d122      	bne.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e50:	4013      	ands	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d119      	bne.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d10f      	bne.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e042      	b.n	8004f3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd fab4 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	@ 0x24
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fd7f 	bl	80059ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	@ 0x28
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d175      	bne.n	8005050 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Transmit+0x2c>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e06e      	b.n	8005052 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2221      	movs	r2, #33	@ 0x21
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f82:	f7fd fc4b 	bl	800281c <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	88fa      	ldrh	r2, [r7, #6]
 8004f92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d108      	bne.n	8004fb0 <HAL_UART_Transmit+0x6c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e003      	b.n	8004fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fb8:	e02e      	b.n	8005018 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	@ 0x80
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb1d 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e03a      	b.n	8005052 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e007      	b.n	800500a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1cb      	bne.n	8004fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	@ 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fae9 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e006      	b.n	8005052 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b0ba      	sub	sp, #232	@ 0xe8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005088:	2300      	movs	r3, #0
 800508a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800509a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_UART_IRQHandler+0x66>
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fbd7 	bl	800586e <UART_Receive_IT>
      return;
 80050c0:	e273      	b.n	80055aa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80de 	beq.w	8005288 <HAL_UART_IRQHandler+0x22c>
 80050cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80d1 	beq.w	8005288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_UART_IRQHandler+0xae>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_UART_IRQHandler+0xd2>
 8005116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	f043 0202 	orr.w	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_UART_IRQHandler+0xf6>
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f043 0204 	orr.w	r2, r3, #4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d011      	beq.n	8005182 <HAL_UART_IRQHandler+0x126>
 800515e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800516a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	f043 0208 	orr.w	r2, r3, #8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 820a 	beq.w	80055a0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_UART_IRQHandler+0x14e>
 8005198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb62 	bl	800586e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <HAL_UART_IRQHandler+0x17a>
 80051ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d04f      	beq.n	8005276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa6d 	bl	80056b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e6:	2b40      	cmp	r3, #64	@ 0x40
 80051e8:	d141      	bne.n	800526e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005200:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3314      	adds	r3, #20
 8005212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005216:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800521a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800522e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1d9      	bne.n	80051ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d013      	beq.n	8005266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005242:	4a8a      	ldr	r2, [pc, #552]	@ (800546c <HAL_UART_IRQHandler+0x410>)
 8005244:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524a:	4618      	mov	r0, r3
 800524c:	f7fd fc97 	bl	8002b7e <HAL_DMA_Abort_IT>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	e00e      	b.n	8005284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9b6 	bl	80055d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	e00a      	b.n	8005284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9b2 	bl	80055d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	e006      	b.n	8005284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9ae 	bl	80055d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005282:	e18d      	b.n	80055a0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	bf00      	nop
    return;
 8005286:	e18b      	b.n	80055a0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 8167 	bne.w	8005560 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8160 	beq.w	8005560 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8159 	beq.w	8005560 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ce:	2b40      	cmp	r3, #64	@ 0x40
 80052d0:	f040 80ce 	bne.w	8005470 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80a9 	beq.w	800543c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f080 80a2 	bcs.w	800543c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530a:	f000 8088 	beq.w	800541e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800532c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800533a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800533e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005346:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1d9      	bne.n	800530e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800536a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800537e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005382:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e1      	bne.n	800535a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e3      	bne.n	8005396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005400:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005402:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005406:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800540e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e3      	bne.n	80053dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005418:	4618      	mov	r0, r3
 800541a:	f7fd fb40 	bl	8002a9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800542c:	b29b      	uxth	r3, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	b29b      	uxth	r3, r3
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8d9 	bl	80055ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800543a:	e0b3      	b.n	80055a4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005444:	429a      	cmp	r2, r3
 8005446:	f040 80ad 	bne.w	80055a4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005454:	f040 80a6 	bne.w	80055a4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8c1 	bl	80055ec <HAL_UARTEx_RxEventCallback>
      return;
 800546a:	e09b      	b.n	80055a4 <HAL_UART_IRQHandler+0x548>
 800546c:	0800577d 	.word	0x0800577d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005478:	b29b      	uxth	r3, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 808e 	beq.w	80055a8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800548c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8089 	beq.w	80055a8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80054bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e3      	bne.n	8005496 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	623b      	str	r3, [r7, #32]
   return(result);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e3      	bne.n	80054ce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60fb      	str	r3, [r7, #12]
   return(result);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005538:	61fa      	str	r2, [r7, #28]
 800553a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	617b      	str	r3, [r7, #20]
   return(result);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e3      	bne.n	8005514 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f847 	bl	80055ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800555e:	e023      	b.n	80055a8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_UART_IRQHandler+0x524>
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f910 	bl	800579e <UART_Transmit_IT>
    return;
 800557e:	e014      	b.n	80055aa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <HAL_UART_IRQHandler+0x54e>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f950 	bl	800583e <UART_EndTransmit_IT>
    return;
 800559e:	e004      	b.n	80055aa <HAL_UART_IRQHandler+0x54e>
    return;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <HAL_UART_IRQHandler+0x54e>
      return;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_UART_IRQHandler+0x54e>
      return;
 80055a8:	bf00      	nop
  }
}
 80055aa:	37e8      	adds	r7, #232	@ 0xe8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005614:	e03b      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d037      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fd f8fd 	bl	800281c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	6a3a      	ldr	r2, [r7, #32]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <UART_WaitOnFlagUntilTimeout+0x30>
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e03a      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d023      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b80      	cmp	r3, #128	@ 0x80
 800564a:	d020      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b40      	cmp	r3, #64	@ 0x40
 8005650:	d01d      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d116      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f81d 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2208      	movs	r2, #8
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e00f      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0b4      	beq.n	8005616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	@ 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056de:	643a      	str	r2, [r7, #64]	@ 0x40
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	61fb      	str	r3, [r7, #28]
   return(result);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3314      	adds	r3, #20
 8005710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e5      	bne.n	80056f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	2b01      	cmp	r3, #1
 800572c:	d119      	bne.n	8005762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	60bb      	str	r3, [r7, #8]
   return(result);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 0310 	bic.w	r3, r3, #16
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800574e:	61ba      	str	r2, [r7, #24]
 8005750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	613b      	str	r3, [r7, #16]
   return(result);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005770:	bf00      	nop
 8005772:	3754      	adds	r7, #84	@ 0x54
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff21 	bl	80055d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b21      	cmp	r3, #33	@ 0x21
 80057b0:	d13e      	bne.n	8005830 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ba:	d114      	bne.n	80057e6 <UART_Transmit_IT+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	621a      	str	r2, [r3, #32]
 80057e4:	e008      	b.n	80057f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6211      	str	r1, [r2, #32]
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4619      	mov	r1, r3
 8005806:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800581a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005854:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fea6 	bl	80055b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b08c      	sub	sp, #48	@ 0x30
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b22      	cmp	r3, #34	@ 0x22
 8005888:	f040 80aa 	bne.w	80059e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005894:	d115      	bne.n	80058c2 <UART_Receive_IT+0x54>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d111      	bne.n	80058c2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
 80058c0:	e024      	b.n	800590c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d0:	d007      	beq.n	80058e2 <UART_Receive_IT+0x74>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <UART_Receive_IT+0x82>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e008      	b.n	8005902 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005900:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29b      	uxth	r3, r3
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4619      	mov	r1, r3
 800591a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800591c:	2b00      	cmp	r3, #0
 800591e:	d15d      	bne.n	80059dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0220 	bic.w	r2, r2, #32
 800592e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800593e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005962:	2b01      	cmp	r3, #1
 8005964:	d135      	bne.n	80059d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	613b      	str	r3, [r7, #16]
   return(result);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 0310 	bic.w	r3, r3, #16
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598c:	623a      	str	r2, [r7, #32]
 800598e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	69f9      	ldr	r1, [r7, #28]
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	61bb      	str	r3, [r7, #24]
   return(result);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d10a      	bne.n	80059c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff fe0e 	bl	80055ec <HAL_UARTEx_RxEventCallback>
 80059d0:	e002      	b.n	80059d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fdf6 	bl	80055c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	e002      	b.n	80059e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3730      	adds	r7, #48	@ 0x30
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f0:	b0c0      	sub	sp, #256	@ 0x100
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	68d9      	ldr	r1, [r3, #12]
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	ea40 0301 	orr.w	r3, r0, r1
 8005a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a44:	f021 010c 	bic.w	r1, r1, #12
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a52:	430b      	orrs	r3, r1
 8005a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a66:	6999      	ldr	r1, [r3, #24]
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	ea40 0301 	orr.w	r3, r0, r1
 8005a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb8 <UART_SetConfig+0x2cc>)
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d005      	beq.n	8005a8c <UART_SetConfig+0xa0>
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b8d      	ldr	r3, [pc, #564]	@ (8005cbc <UART_SetConfig+0x2d0>)
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d104      	bne.n	8005a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fd28 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005a90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a94:	e003      	b.n	8005a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a96:	f7fe fd0f 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8005a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa8:	f040 810c 	bne.w	8005cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005abe:	4622      	mov	r2, r4
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	1891      	adds	r1, r2, r2
 8005ac4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ac6:	415b      	adcs	r3, r3
 8005ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ace:	4621      	mov	r1, r4
 8005ad0:	eb12 0801 	adds.w	r8, r2, r1
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	eb43 0901 	adc.w	r9, r3, r1
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aee:	4690      	mov	r8, r2
 8005af0:	4699      	mov	r9, r3
 8005af2:	4623      	mov	r3, r4
 8005af4:	eb18 0303 	adds.w	r3, r8, r3
 8005af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005afc:	462b      	mov	r3, r5
 8005afe:	eb49 0303 	adc.w	r3, r9, r3
 8005b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	18db      	adds	r3, r3, r3
 8005b1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b20:	4613      	mov	r3, r2
 8005b22:	eb42 0303 	adc.w	r3, r2, r3
 8005b26:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b30:	f7fb f8aa 	bl	8000c88 <__aeabi_uldivmod>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4b61      	ldr	r3, [pc, #388]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	011c      	lsls	r4, r3, #4
 8005b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b54:	4642      	mov	r2, r8
 8005b56:	464b      	mov	r3, r9
 8005b58:	1891      	adds	r1, r2, r2
 8005b5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b5c:	415b      	adcs	r3, r3
 8005b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b64:	4641      	mov	r1, r8
 8005b66:	eb12 0a01 	adds.w	sl, r2, r1
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b84:	4692      	mov	sl, r2
 8005b86:	469b      	mov	fp, r3
 8005b88:	4643      	mov	r3, r8
 8005b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b92:	464b      	mov	r3, r9
 8005b94:	eb4b 0303 	adc.w	r3, fp, r3
 8005b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	18db      	adds	r3, r3, r3
 8005bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bc6:	f7fb f85f 	bl	8000c88 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2264      	movs	r2, #100	@ 0x64
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	1acb      	subs	r3, r1, r3
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005be6:	4b36      	ldr	r3, [pc, #216]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005be8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bf4:	441c      	add	r4, r3
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c10:	415b      	adcs	r3, r3
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c18:	4641      	mov	r1, r8
 8005c1a:	1851      	adds	r1, r2, r1
 8005c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c1e:	4649      	mov	r1, r9
 8005c20:	414b      	adcs	r3, r1
 8005c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c30:	4659      	mov	r1, fp
 8005c32:	00cb      	lsls	r3, r1, #3
 8005c34:	4651      	mov	r1, sl
 8005c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c3a:	4651      	mov	r1, sl
 8005c3c:	00ca      	lsls	r2, r1, #3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4619      	mov	r1, r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	4642      	mov	r2, r8
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	460a      	mov	r2, r1
 8005c50:	eb42 0303 	adc.w	r3, r2, r3
 8005c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	18db      	adds	r3, r3, r3
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c72:	4613      	mov	r3, r2
 8005c74:	eb42 0303 	adc.w	r3, r2, r3
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c82:	f7fb f801 	bl	8000c88 <__aeabi_uldivmod>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	2164      	movs	r1, #100	@ 0x64
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	3332      	adds	r3, #50	@ 0x32
 8005c9e:	4a08      	ldr	r2, [pc, #32]	@ (8005cc0 <UART_SetConfig+0x2d4>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0207 	and.w	r2, r3, #7
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4422      	add	r2, r4
 8005cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cb4:	e106      	b.n	8005ec4 <UART_SetConfig+0x4d8>
 8005cb6:	bf00      	nop
 8005cb8:	40011000 	.word	0x40011000
 8005cbc:	40011400 	.word	0x40011400
 8005cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	464b      	mov	r3, r9
 8005cda:	1891      	adds	r1, r2, r2
 8005cdc:	6239      	str	r1, [r7, #32]
 8005cde:	415b      	adcs	r3, r3
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	1854      	adds	r4, r2, r1
 8005cea:	4649      	mov	r1, r9
 8005cec:	eb43 0501 	adc.w	r5, r3, r1
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	00eb      	lsls	r3, r5, #3
 8005cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cfe:	00e2      	lsls	r2, r4, #3
 8005d00:	4614      	mov	r4, r2
 8005d02:	461d      	mov	r5, r3
 8005d04:	4643      	mov	r3, r8
 8005d06:	18e3      	adds	r3, r4, r3
 8005d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	eb45 0303 	adc.w	r3, r5, r3
 8005d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d32:	4629      	mov	r1, r5
 8005d34:	008b      	lsls	r3, r1, #2
 8005d36:	4621      	mov	r1, r4
 8005d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	008a      	lsls	r2, r1, #2
 8005d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d44:	f7fa ffa0 	bl	8000c88 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4b60      	ldr	r3, [pc, #384]	@ (8005ed0 <UART_SetConfig+0x4e4>)
 8005d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	011c      	lsls	r4, r3, #4
 8005d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d68:	4642      	mov	r2, r8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	1891      	adds	r1, r2, r2
 8005d6e:	61b9      	str	r1, [r7, #24]
 8005d70:	415b      	adcs	r3, r3
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d78:	4641      	mov	r1, r8
 8005d7a:	1851      	adds	r1, r2, r1
 8005d7c:	6139      	str	r1, [r7, #16]
 8005d7e:	4649      	mov	r1, r9
 8005d80:	414b      	adcs	r3, r1
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d90:	4659      	mov	r1, fp
 8005d92:	00cb      	lsls	r3, r1, #3
 8005d94:	4651      	mov	r1, sl
 8005d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	00ca      	lsls	r2, r1, #3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	4642      	mov	r2, r8
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dac:	464b      	mov	r3, r9
 8005dae:	460a      	mov	r2, r1
 8005db0:	eb42 0303 	adc.w	r3, r2, r3
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	008b      	lsls	r3, r1, #2
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dda:	4641      	mov	r1, r8
 8005ddc:	008a      	lsls	r2, r1, #2
 8005dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005de2:	f7fa ff51 	bl	8000c88 <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	4b38      	ldr	r3, [pc, #224]	@ (8005ed0 <UART_SetConfig+0x4e4>)
 8005dee:	fba3 2301 	umull	r2, r3, r3, r1
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	2264      	movs	r2, #100	@ 0x64
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	1acb      	subs	r3, r1, r3
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	3332      	adds	r3, #50	@ 0x32
 8005e00:	4a33      	ldr	r2, [pc, #204]	@ (8005ed0 <UART_SetConfig+0x4e4>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e0c:	441c      	add	r4, r3
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e16:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	415b      	adcs	r3, r3
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	1851      	adds	r1, r2, r1
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	4649      	mov	r1, r9
 8005e34:	414b      	adcs	r3, r1
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e44:	4659      	mov	r1, fp
 8005e46:	00cb      	lsls	r3, r1, #3
 8005e48:	4651      	mov	r1, sl
 8005e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4e:	4651      	mov	r1, sl
 8005e50:	00ca      	lsls	r2, r1, #3
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e5e:	464b      	mov	r3, r9
 8005e60:	460a      	mov	r2, r1
 8005e62:	eb42 0303 	adc.w	r3, r2, r3
 8005e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e72:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e80:	4649      	mov	r1, r9
 8005e82:	008b      	lsls	r3, r1, #2
 8005e84:	4641      	mov	r1, r8
 8005e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	008a      	lsls	r2, r1, #2
 8005e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e92:	f7fa fef9 	bl	8000c88 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <UART_SetConfig+0x4e4>)
 8005e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	2164      	movs	r1, #100	@ 0x64
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	3332      	adds	r3, #50	@ 0x32
 8005eae:	4a08      	ldr	r2, [pc, #32]	@ (8005ed0 <UART_SetConfig+0x4e4>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4422      	add	r2, r4
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed0:	51eb851f 	.word	0x51eb851f

08005ed4 <__cvt>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	ec57 6b10 	vmov	r6, r7, d0
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	bfbb      	ittet	lt
 8005ee6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005eea:	461f      	movlt	r7, r3
 8005eec:	2300      	movge	r3, #0
 8005eee:	232d      	movlt	r3, #45	@ 0x2d
 8005ef0:	700b      	strb	r3, [r1, #0]
 8005ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ef8:	4691      	mov	r9, r2
 8005efa:	f023 0820 	bic.w	r8, r3, #32
 8005efe:	bfbc      	itt	lt
 8005f00:	4632      	movlt	r2, r6
 8005f02:	4616      	movlt	r6, r2
 8005f04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f08:	d005      	beq.n	8005f16 <__cvt+0x42>
 8005f0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f0e:	d100      	bne.n	8005f12 <__cvt+0x3e>
 8005f10:	3401      	adds	r4, #1
 8005f12:	2102      	movs	r1, #2
 8005f14:	e000      	b.n	8005f18 <__cvt+0x44>
 8005f16:	2103      	movs	r1, #3
 8005f18:	ab03      	add	r3, sp, #12
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	ab02      	add	r3, sp, #8
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	ec47 6b10 	vmov	d0, r6, r7
 8005f24:	4653      	mov	r3, sl
 8005f26:	4622      	mov	r2, r4
 8005f28:	f000 fe6e 	bl	8006c08 <_dtoa_r>
 8005f2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f30:	4605      	mov	r5, r0
 8005f32:	d119      	bne.n	8005f68 <__cvt+0x94>
 8005f34:	f019 0f01 	tst.w	r9, #1
 8005f38:	d00e      	beq.n	8005f58 <__cvt+0x84>
 8005f3a:	eb00 0904 	add.w	r9, r0, r4
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa fddf 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4a:	b108      	cbz	r0, 8005f50 <__cvt+0x7c>
 8005f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f50:	2230      	movs	r2, #48	@ 0x30
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	454b      	cmp	r3, r9
 8005f56:	d31e      	bcc.n	8005f96 <__cvt+0xc2>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f5c:	1b5b      	subs	r3, r3, r5
 8005f5e:	4628      	mov	r0, r5
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	b004      	add	sp, #16
 8005f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f6c:	eb00 0904 	add.w	r9, r0, r4
 8005f70:	d1e5      	bne.n	8005f3e <__cvt+0x6a>
 8005f72:	7803      	ldrb	r3, [r0, #0]
 8005f74:	2b30      	cmp	r3, #48	@ 0x30
 8005f76:	d10a      	bne.n	8005f8e <__cvt+0xba>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 8005f84:	b918      	cbnz	r0, 8005f8e <__cvt+0xba>
 8005f86:	f1c4 0401 	rsb	r4, r4, #1
 8005f8a:	f8ca 4000 	str.w	r4, [sl]
 8005f8e:	f8da 3000 	ldr.w	r3, [sl]
 8005f92:	4499      	add	r9, r3
 8005f94:	e7d3      	b.n	8005f3e <__cvt+0x6a>
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	9103      	str	r1, [sp, #12]
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e7d9      	b.n	8005f52 <__cvt+0x7e>

08005f9e <__exponent>:
 8005f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	bfba      	itte	lt
 8005fa4:	4249      	neglt	r1, r1
 8005fa6:	232d      	movlt	r3, #45	@ 0x2d
 8005fa8:	232b      	movge	r3, #43	@ 0x2b
 8005faa:	2909      	cmp	r1, #9
 8005fac:	7002      	strb	r2, [r0, #0]
 8005fae:	7043      	strb	r3, [r0, #1]
 8005fb0:	dd29      	ble.n	8006006 <__exponent+0x68>
 8005fb2:	f10d 0307 	add.w	r3, sp, #7
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	270a      	movs	r7, #10
 8005fba:	461a      	mov	r2, r3
 8005fbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fc0:	fb07 1416 	mls	r4, r7, r6, r1
 8005fc4:	3430      	adds	r4, #48	@ 0x30
 8005fc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fca:	460c      	mov	r4, r1
 8005fcc:	2c63      	cmp	r4, #99	@ 0x63
 8005fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	dcf1      	bgt.n	8005fba <__exponent+0x1c>
 8005fd6:	3130      	adds	r1, #48	@ 0x30
 8005fd8:	1e94      	subs	r4, r2, #2
 8005fda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fde:	1c41      	adds	r1, r0, #1
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	42ab      	cmp	r3, r5
 8005fe4:	d30a      	bcc.n	8005ffc <__exponent+0x5e>
 8005fe6:	f10d 0309 	add.w	r3, sp, #9
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ac      	cmp	r4, r5
 8005fee:	bf88      	it	hi
 8005ff0:	2300      	movhi	r3, #0
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	4403      	add	r3, r0
 8005ff6:	1a18      	subs	r0, r3, r0
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006000:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006004:	e7ed      	b.n	8005fe2 <__exponent+0x44>
 8006006:	2330      	movs	r3, #48	@ 0x30
 8006008:	3130      	adds	r1, #48	@ 0x30
 800600a:	7083      	strb	r3, [r0, #2]
 800600c:	70c1      	strb	r1, [r0, #3]
 800600e:	1d03      	adds	r3, r0, #4
 8006010:	e7f1      	b.n	8005ff6 <__exponent+0x58>
	...

08006014 <_printf_float>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	b08d      	sub	sp, #52	@ 0x34
 800601a:	460c      	mov	r4, r1
 800601c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006020:	4616      	mov	r6, r2
 8006022:	461f      	mov	r7, r3
 8006024:	4605      	mov	r5, r0
 8006026:	f000 fcef 	bl	8006a08 <_localeconv_r>
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fa f93e 	bl	80002b0 <strlen>
 8006034:	2300      	movs	r3, #0
 8006036:	930a      	str	r3, [sp, #40]	@ 0x28
 8006038:	f8d8 3000 	ldr.w	r3, [r8]
 800603c:	9005      	str	r0, [sp, #20]
 800603e:	3307      	adds	r3, #7
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	f103 0208 	add.w	r2, r3, #8
 8006048:	f894 a018 	ldrb.w	sl, [r4, #24]
 800604c:	f8d4 b000 	ldr.w	fp, [r4]
 8006050:	f8c8 2000 	str.w	r2, [r8]
 8006054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006058:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800605c:	9307      	str	r3, [sp, #28]
 800605e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006062:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800606a:	4b9c      	ldr	r3, [pc, #624]	@ (80062dc <_printf_float+0x2c8>)
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	f7fa fd7c 	bl	8000b6c <__aeabi_dcmpun>
 8006074:	bb70      	cbnz	r0, 80060d4 <_printf_float+0xc0>
 8006076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607a:	4b98      	ldr	r3, [pc, #608]	@ (80062dc <_printf_float+0x2c8>)
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	f7fa fd56 	bl	8000b30 <__aeabi_dcmple>
 8006084:	bb30      	cbnz	r0, 80060d4 <_printf_float+0xc0>
 8006086:	2200      	movs	r2, #0
 8006088:	2300      	movs	r3, #0
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	f7fa fd45 	bl	8000b1c <__aeabi_dcmplt>
 8006092:	b110      	cbz	r0, 800609a <_printf_float+0x86>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609a:	4a91      	ldr	r2, [pc, #580]	@ (80062e0 <_printf_float+0x2cc>)
 800609c:	4b91      	ldr	r3, [pc, #580]	@ (80062e4 <_printf_float+0x2d0>)
 800609e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060a2:	bf94      	ite	ls
 80060a4:	4690      	movls	r8, r2
 80060a6:	4698      	movhi	r8, r3
 80060a8:	2303      	movs	r3, #3
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	f02b 0304 	bic.w	r3, fp, #4
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	f04f 0900 	mov.w	r9, #0
 80060b6:	9700      	str	r7, [sp, #0]
 80060b8:	4633      	mov	r3, r6
 80060ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f9d2 	bl	8006468 <_printf_common>
 80060c4:	3001      	adds	r0, #1
 80060c6:	f040 808d 	bne.w	80061e4 <_printf_float+0x1d0>
 80060ca:	f04f 30ff 	mov.w	r0, #4294967295
 80060ce:	b00d      	add	sp, #52	@ 0x34
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	4649      	mov	r1, r9
 80060dc:	f7fa fd46 	bl	8000b6c <__aeabi_dcmpun>
 80060e0:	b140      	cbz	r0, 80060f4 <_printf_float+0xe0>
 80060e2:	464b      	mov	r3, r9
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfbc      	itt	lt
 80060e8:	232d      	movlt	r3, #45	@ 0x2d
 80060ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060ee:	4a7e      	ldr	r2, [pc, #504]	@ (80062e8 <_printf_float+0x2d4>)
 80060f0:	4b7e      	ldr	r3, [pc, #504]	@ (80062ec <_printf_float+0x2d8>)
 80060f2:	e7d4      	b.n	800609e <_printf_float+0x8a>
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80060fa:	9206      	str	r2, [sp, #24]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	d13b      	bne.n	8006178 <_printf_float+0x164>
 8006100:	2306      	movs	r3, #6
 8006102:	6063      	str	r3, [r4, #4]
 8006104:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006108:	2300      	movs	r3, #0
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	9303      	str	r3, [sp, #12]
 800610e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006110:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006114:	ab09      	add	r3, sp, #36	@ 0x24
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6861      	ldr	r1, [r4, #4]
 800611a:	ec49 8b10 	vmov	d0, r8, r9
 800611e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006122:	4628      	mov	r0, r5
 8006124:	f7ff fed6 	bl	8005ed4 <__cvt>
 8006128:	9b06      	ldr	r3, [sp, #24]
 800612a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800612c:	2b47      	cmp	r3, #71	@ 0x47
 800612e:	4680      	mov	r8, r0
 8006130:	d129      	bne.n	8006186 <_printf_float+0x172>
 8006132:	1cc8      	adds	r0, r1, #3
 8006134:	db02      	blt.n	800613c <_printf_float+0x128>
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	4299      	cmp	r1, r3
 800613a:	dd41      	ble.n	80061c0 <_printf_float+0x1ac>
 800613c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006140:	fa5f fa8a 	uxtb.w	sl, sl
 8006144:	3901      	subs	r1, #1
 8006146:	4652      	mov	r2, sl
 8006148:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800614c:	9109      	str	r1, [sp, #36]	@ 0x24
 800614e:	f7ff ff26 	bl	8005f9e <__exponent>
 8006152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006154:	1813      	adds	r3, r2, r0
 8006156:	2a01      	cmp	r2, #1
 8006158:	4681      	mov	r9, r0
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	dc02      	bgt.n	8006164 <_printf_float+0x150>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	07d2      	lsls	r2, r2, #31
 8006162:	d501      	bpl.n	8006168 <_printf_float+0x154>
 8006164:	3301      	adds	r3, #1
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0a2      	beq.n	80060b6 <_printf_float+0xa2>
 8006170:	232d      	movs	r3, #45	@ 0x2d
 8006172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006176:	e79e      	b.n	80060b6 <_printf_float+0xa2>
 8006178:	9a06      	ldr	r2, [sp, #24]
 800617a:	2a47      	cmp	r2, #71	@ 0x47
 800617c:	d1c2      	bne.n	8006104 <_printf_float+0xf0>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1c0      	bne.n	8006104 <_printf_float+0xf0>
 8006182:	2301      	movs	r3, #1
 8006184:	e7bd      	b.n	8006102 <_printf_float+0xee>
 8006186:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800618a:	d9db      	bls.n	8006144 <_printf_float+0x130>
 800618c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006190:	d118      	bne.n	80061c4 <_printf_float+0x1b0>
 8006192:	2900      	cmp	r1, #0
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	dd0b      	ble.n	80061b0 <_printf_float+0x19c>
 8006198:	6121      	str	r1, [r4, #16]
 800619a:	b913      	cbnz	r3, 80061a2 <_printf_float+0x18e>
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	07d0      	lsls	r0, r2, #31
 80061a0:	d502      	bpl.n	80061a8 <_printf_float+0x194>
 80061a2:	3301      	adds	r3, #1
 80061a4:	440b      	add	r3, r1
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	e7db      	b.n	8006168 <_printf_float+0x154>
 80061b0:	b913      	cbnz	r3, 80061b8 <_printf_float+0x1a4>
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	07d2      	lsls	r2, r2, #31
 80061b6:	d501      	bpl.n	80061bc <_printf_float+0x1a8>
 80061b8:	3302      	adds	r3, #2
 80061ba:	e7f4      	b.n	80061a6 <_printf_float+0x192>
 80061bc:	2301      	movs	r3, #1
 80061be:	e7f2      	b.n	80061a6 <_printf_float+0x192>
 80061c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c6:	4299      	cmp	r1, r3
 80061c8:	db05      	blt.n	80061d6 <_printf_float+0x1c2>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	6121      	str	r1, [r4, #16]
 80061ce:	07d8      	lsls	r0, r3, #31
 80061d0:	d5ea      	bpl.n	80061a8 <_printf_float+0x194>
 80061d2:	1c4b      	adds	r3, r1, #1
 80061d4:	e7e7      	b.n	80061a6 <_printf_float+0x192>
 80061d6:	2900      	cmp	r1, #0
 80061d8:	bfd4      	ite	le
 80061da:	f1c1 0202 	rsble	r2, r1, #2
 80061de:	2201      	movgt	r2, #1
 80061e0:	4413      	add	r3, r2
 80061e2:	e7e0      	b.n	80061a6 <_printf_float+0x192>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	055a      	lsls	r2, r3, #21
 80061e8:	d407      	bmi.n	80061fa <_printf_float+0x1e6>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	4642      	mov	r2, r8
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	d12b      	bne.n	8006250 <_printf_float+0x23c>
 80061f8:	e767      	b.n	80060ca <_printf_float+0xb6>
 80061fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061fe:	f240 80dd 	bls.w	80063bc <_printf_float+0x3a8>
 8006202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006206:	2200      	movs	r2, #0
 8006208:	2300      	movs	r3, #0
 800620a:	f7fa fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800620e:	2800      	cmp	r0, #0
 8006210:	d033      	beq.n	800627a <_printf_float+0x266>
 8006212:	4a37      	ldr	r2, [pc, #220]	@ (80062f0 <_printf_float+0x2dc>)
 8006214:	2301      	movs	r3, #1
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	f43f af54 	beq.w	80060ca <_printf_float+0xb6>
 8006222:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006226:	4543      	cmp	r3, r8
 8006228:	db02      	blt.n	8006230 <_printf_float+0x21c>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	07d8      	lsls	r0, r3, #31
 800622e:	d50f      	bpl.n	8006250 <_printf_float+0x23c>
 8006230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006234:	4631      	mov	r1, r6
 8006236:	4628      	mov	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f af45 	beq.w	80060ca <_printf_float+0xb6>
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	f108 38ff 	add.w	r8, r8, #4294967295
 8006248:	f104 0a1a 	add.w	sl, r4, #26
 800624c:	45c8      	cmp	r8, r9
 800624e:	dc09      	bgt.n	8006264 <_printf_float+0x250>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	079b      	lsls	r3, r3, #30
 8006254:	f100 8103 	bmi.w	800645e <_printf_float+0x44a>
 8006258:	68e0      	ldr	r0, [r4, #12]
 800625a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800625c:	4298      	cmp	r0, r3
 800625e:	bfb8      	it	lt
 8006260:	4618      	movlt	r0, r3
 8006262:	e734      	b.n	80060ce <_printf_float+0xba>
 8006264:	2301      	movs	r3, #1
 8006266:	4652      	mov	r2, sl
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f af2b 	beq.w	80060ca <_printf_float+0xb6>
 8006274:	f109 0901 	add.w	r9, r9, #1
 8006278:	e7e8      	b.n	800624c <_printf_float+0x238>
 800627a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	dc39      	bgt.n	80062f4 <_printf_float+0x2e0>
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <_printf_float+0x2dc>)
 8006282:	2301      	movs	r3, #1
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af1d 	beq.w	80060ca <_printf_float+0xb6>
 8006290:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006294:	ea59 0303 	orrs.w	r3, r9, r3
 8006298:	d102      	bne.n	80062a0 <_printf_float+0x28c>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	07d9      	lsls	r1, r3, #31
 800629e:	d5d7      	bpl.n	8006250 <_printf_float+0x23c>
 80062a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a4:	4631      	mov	r1, r6
 80062a6:	4628      	mov	r0, r5
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f af0d 	beq.w	80060ca <_printf_float+0xb6>
 80062b0:	f04f 0a00 	mov.w	sl, #0
 80062b4:	f104 0b1a 	add.w	fp, r4, #26
 80062b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ba:	425b      	negs	r3, r3
 80062bc:	4553      	cmp	r3, sl
 80062be:	dc01      	bgt.n	80062c4 <_printf_float+0x2b0>
 80062c0:	464b      	mov	r3, r9
 80062c2:	e793      	b.n	80061ec <_printf_float+0x1d8>
 80062c4:	2301      	movs	r3, #1
 80062c6:	465a      	mov	r2, fp
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f aefb 	beq.w	80060ca <_printf_float+0xb6>
 80062d4:	f10a 0a01 	add.w	sl, sl, #1
 80062d8:	e7ee      	b.n	80062b8 <_printf_float+0x2a4>
 80062da:	bf00      	nop
 80062dc:	7fefffff 	.word	0x7fefffff
 80062e0:	0800a418 	.word	0x0800a418
 80062e4:	0800a41c 	.word	0x0800a41c
 80062e8:	0800a420 	.word	0x0800a420
 80062ec:	0800a424 	.word	0x0800a424
 80062f0:	0800a428 	.word	0x0800a428
 80062f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062fa:	4553      	cmp	r3, sl
 80062fc:	bfa8      	it	ge
 80062fe:	4653      	movge	r3, sl
 8006300:	2b00      	cmp	r3, #0
 8006302:	4699      	mov	r9, r3
 8006304:	dc36      	bgt.n	8006374 <_printf_float+0x360>
 8006306:	f04f 0b00 	mov.w	fp, #0
 800630a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800630e:	f104 021a 	add.w	r2, r4, #26
 8006312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006314:	9306      	str	r3, [sp, #24]
 8006316:	eba3 0309 	sub.w	r3, r3, r9
 800631a:	455b      	cmp	r3, fp
 800631c:	dc31      	bgt.n	8006382 <_printf_float+0x36e>
 800631e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006320:	459a      	cmp	sl, r3
 8006322:	dc3a      	bgt.n	800639a <_printf_float+0x386>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	07da      	lsls	r2, r3, #31
 8006328:	d437      	bmi.n	800639a <_printf_float+0x386>
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	ebaa 0903 	sub.w	r9, sl, r3
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	ebaa 0303 	sub.w	r3, sl, r3
 8006336:	4599      	cmp	r9, r3
 8006338:	bfa8      	it	ge
 800633a:	4699      	movge	r9, r3
 800633c:	f1b9 0f00 	cmp.w	r9, #0
 8006340:	dc33      	bgt.n	80063aa <_printf_float+0x396>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800634a:	f104 0b1a 	add.w	fp, r4, #26
 800634e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006350:	ebaa 0303 	sub.w	r3, sl, r3
 8006354:	eba3 0309 	sub.w	r3, r3, r9
 8006358:	4543      	cmp	r3, r8
 800635a:	f77f af79 	ble.w	8006250 <_printf_float+0x23c>
 800635e:	2301      	movs	r3, #1
 8006360:	465a      	mov	r2, fp
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f aeae 	beq.w	80060ca <_printf_float+0xb6>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	e7ec      	b.n	800634e <_printf_float+0x33a>
 8006374:	4642      	mov	r2, r8
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	d1c2      	bne.n	8006306 <_printf_float+0x2f2>
 8006380:	e6a3      	b.n	80060ca <_printf_float+0xb6>
 8006382:	2301      	movs	r3, #1
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	9206      	str	r2, [sp, #24]
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae9c 	beq.w	80060ca <_printf_float+0xb6>
 8006392:	9a06      	ldr	r2, [sp, #24]
 8006394:	f10b 0b01 	add.w	fp, fp, #1
 8006398:	e7bb      	b.n	8006312 <_printf_float+0x2fe>
 800639a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	d1c0      	bne.n	800632a <_printf_float+0x316>
 80063a8:	e68f      	b.n	80060ca <_printf_float+0xb6>
 80063aa:	9a06      	ldr	r2, [sp, #24]
 80063ac:	464b      	mov	r3, r9
 80063ae:	4442      	add	r2, r8
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	d1c3      	bne.n	8006342 <_printf_float+0x32e>
 80063ba:	e686      	b.n	80060ca <_printf_float+0xb6>
 80063bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063c0:	f1ba 0f01 	cmp.w	sl, #1
 80063c4:	dc01      	bgt.n	80063ca <_printf_float+0x3b6>
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d536      	bpl.n	8006438 <_printf_float+0x424>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4642      	mov	r2, r8
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f ae78 	beq.w	80060ca <_printf_float+0xb6>
 80063da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f ae70 	beq.w	80060ca <_printf_float+0xb6>
 80063ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f6:	f7fa fb87 	bl	8000b08 <__aeabi_dcmpeq>
 80063fa:	b9c0      	cbnz	r0, 800642e <_printf_float+0x41a>
 80063fc:	4653      	mov	r3, sl
 80063fe:	f108 0201 	add.w	r2, r8, #1
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	d10c      	bne.n	8006426 <_printf_float+0x412>
 800640c:	e65d      	b.n	80060ca <_printf_float+0xb6>
 800640e:	2301      	movs	r3, #1
 8006410:	465a      	mov	r2, fp
 8006412:	4631      	mov	r1, r6
 8006414:	4628      	mov	r0, r5
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	f43f ae56 	beq.w	80060ca <_printf_float+0xb6>
 800641e:	f108 0801 	add.w	r8, r8, #1
 8006422:	45d0      	cmp	r8, sl
 8006424:	dbf3      	blt.n	800640e <_printf_float+0x3fa>
 8006426:	464b      	mov	r3, r9
 8006428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800642c:	e6df      	b.n	80061ee <_printf_float+0x1da>
 800642e:	f04f 0800 	mov.w	r8, #0
 8006432:	f104 0b1a 	add.w	fp, r4, #26
 8006436:	e7f4      	b.n	8006422 <_printf_float+0x40e>
 8006438:	2301      	movs	r3, #1
 800643a:	4642      	mov	r2, r8
 800643c:	e7e1      	b.n	8006402 <_printf_float+0x3ee>
 800643e:	2301      	movs	r3, #1
 8006440:	464a      	mov	r2, r9
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae3e 	beq.w	80060ca <_printf_float+0xb6>
 800644e:	f108 0801 	add.w	r8, r8, #1
 8006452:	68e3      	ldr	r3, [r4, #12]
 8006454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006456:	1a5b      	subs	r3, r3, r1
 8006458:	4543      	cmp	r3, r8
 800645a:	dcf0      	bgt.n	800643e <_printf_float+0x42a>
 800645c:	e6fc      	b.n	8006258 <_printf_float+0x244>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	f104 0919 	add.w	r9, r4, #25
 8006466:	e7f4      	b.n	8006452 <_printf_float+0x43e>

08006468 <_printf_common>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	4698      	mov	r8, r3
 8006470:	688a      	ldr	r2, [r1, #8]
 8006472:	690b      	ldr	r3, [r1, #16]
 8006474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006478:	4293      	cmp	r3, r2
 800647a:	bfb8      	it	lt
 800647c:	4613      	movlt	r3, r2
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006484:	4607      	mov	r7, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b10a      	cbz	r2, 800648e <_printf_common+0x26>
 800648a:	3301      	adds	r3, #1
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	0699      	lsls	r1, r3, #26
 8006492:	bf42      	ittt	mi
 8006494:	6833      	ldrmi	r3, [r6, #0]
 8006496:	3302      	addmi	r3, #2
 8006498:	6033      	strmi	r3, [r6, #0]
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	f015 0506 	ands.w	r5, r5, #6
 80064a0:	d106      	bne.n	80064b0 <_printf_common+0x48>
 80064a2:	f104 0a19 	add.w	sl, r4, #25
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc26      	bgt.n	80064fe <_printf_common+0x96>
 80064b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	3b00      	subs	r3, #0
 80064b8:	bf18      	it	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	0692      	lsls	r2, r2, #26
 80064be:	d42b      	bmi.n	8006518 <_printf_common+0xb0>
 80064c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c4:	4641      	mov	r1, r8
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c8      	blx	r9
 80064ca:	3001      	adds	r0, #1
 80064cc:	d01e      	beq.n	800650c <_printf_common+0xa4>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	6922      	ldr	r2, [r4, #16]
 80064d2:	f003 0306 	and.w	r3, r3, #6
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	bf02      	ittt	eq
 80064da:	68e5      	ldreq	r5, [r4, #12]
 80064dc:	6833      	ldreq	r3, [r6, #0]
 80064de:	1aed      	subeq	r5, r5, r3
 80064e0:	68a3      	ldr	r3, [r4, #8]
 80064e2:	bf0c      	ite	eq
 80064e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e8:	2500      	movne	r5, #0
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bfc4      	itt	gt
 80064ee:	1a9b      	subgt	r3, r3, r2
 80064f0:	18ed      	addgt	r5, r5, r3
 80064f2:	2600      	movs	r6, #0
 80064f4:	341a      	adds	r4, #26
 80064f6:	42b5      	cmp	r5, r6
 80064f8:	d11a      	bne.n	8006530 <_printf_common+0xc8>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e008      	b.n	8006510 <_printf_common+0xa8>
 80064fe:	2301      	movs	r3, #1
 8006500:	4652      	mov	r2, sl
 8006502:	4641      	mov	r1, r8
 8006504:	4638      	mov	r0, r7
 8006506:	47c8      	blx	r9
 8006508:	3001      	adds	r0, #1
 800650a:	d103      	bne.n	8006514 <_printf_common+0xac>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	3501      	adds	r5, #1
 8006516:	e7c6      	b.n	80064a6 <_printf_common+0x3e>
 8006518:	18e1      	adds	r1, r4, r3
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	2030      	movs	r0, #48	@ 0x30
 800651e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006522:	4422      	add	r2, r4
 8006524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800652c:	3302      	adds	r3, #2
 800652e:	e7c7      	b.n	80064c0 <_printf_common+0x58>
 8006530:	2301      	movs	r3, #1
 8006532:	4622      	mov	r2, r4
 8006534:	4641      	mov	r1, r8
 8006536:	4638      	mov	r0, r7
 8006538:	47c8      	blx	r9
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xa4>
 800653e:	3601      	adds	r6, #1
 8006540:	e7d9      	b.n	80064f6 <_printf_common+0x8e>
	...

08006544 <_printf_i>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	7e0f      	ldrb	r7, [r1, #24]
 800654a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800654c:	2f78      	cmp	r7, #120	@ 0x78
 800654e:	4691      	mov	r9, r2
 8006550:	4680      	mov	r8, r0
 8006552:	460c      	mov	r4, r1
 8006554:	469a      	mov	sl, r3
 8006556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800655a:	d807      	bhi.n	800656c <_printf_i+0x28>
 800655c:	2f62      	cmp	r7, #98	@ 0x62
 800655e:	d80a      	bhi.n	8006576 <_printf_i+0x32>
 8006560:	2f00      	cmp	r7, #0
 8006562:	f000 80d2 	beq.w	800670a <_printf_i+0x1c6>
 8006566:	2f58      	cmp	r7, #88	@ 0x58
 8006568:	f000 80b9 	beq.w	80066de <_printf_i+0x19a>
 800656c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006574:	e03a      	b.n	80065ec <_printf_i+0xa8>
 8006576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800657a:	2b15      	cmp	r3, #21
 800657c:	d8f6      	bhi.n	800656c <_printf_i+0x28>
 800657e:	a101      	add	r1, pc, #4	@ (adr r1, 8006584 <_printf_i+0x40>)
 8006580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006584:	080065dd 	.word	0x080065dd
 8006588:	080065f1 	.word	0x080065f1
 800658c:	0800656d 	.word	0x0800656d
 8006590:	0800656d 	.word	0x0800656d
 8006594:	0800656d 	.word	0x0800656d
 8006598:	0800656d 	.word	0x0800656d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800656d 	.word	0x0800656d
 80065a4:	0800656d 	.word	0x0800656d
 80065a8:	0800656d 	.word	0x0800656d
 80065ac:	0800656d 	.word	0x0800656d
 80065b0:	080066f1 	.word	0x080066f1
 80065b4:	0800661b 	.word	0x0800661b
 80065b8:	080066ab 	.word	0x080066ab
 80065bc:	0800656d 	.word	0x0800656d
 80065c0:	0800656d 	.word	0x0800656d
 80065c4:	08006713 	.word	0x08006713
 80065c8:	0800656d 	.word	0x0800656d
 80065cc:	0800661b 	.word	0x0800661b
 80065d0:	0800656d 	.word	0x0800656d
 80065d4:	0800656d 	.word	0x0800656d
 80065d8:	080066b3 	.word	0x080066b3
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6032      	str	r2, [r6, #0]
 80065e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065ec:	2301      	movs	r3, #1
 80065ee:	e09d      	b.n	800672c <_printf_i+0x1e8>
 80065f0:	6833      	ldr	r3, [r6, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6031      	str	r1, [r6, #0]
 80065f8:	0606      	lsls	r6, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xbc>
 80065fc:	681d      	ldr	r5, [r3, #0]
 80065fe:	e003      	b.n	8006608 <_printf_i+0xc4>
 8006600:	0645      	lsls	r5, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xb8>
 8006604:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006608:	2d00      	cmp	r5, #0
 800660a:	da03      	bge.n	8006614 <_printf_i+0xd0>
 800660c:	232d      	movs	r3, #45	@ 0x2d
 800660e:	426d      	negs	r5, r5
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006614:	4859      	ldr	r0, [pc, #356]	@ (800677c <_printf_i+0x238>)
 8006616:	230a      	movs	r3, #10
 8006618:	e011      	b.n	800663e <_printf_i+0xfa>
 800661a:	6821      	ldr	r1, [r4, #0]
 800661c:	6833      	ldr	r3, [r6, #0]
 800661e:	0608      	lsls	r0, r1, #24
 8006620:	f853 5b04 	ldr.w	r5, [r3], #4
 8006624:	d402      	bmi.n	800662c <_printf_i+0xe8>
 8006626:	0649      	lsls	r1, r1, #25
 8006628:	bf48      	it	mi
 800662a:	b2ad      	uxthmi	r5, r5
 800662c:	2f6f      	cmp	r7, #111	@ 0x6f
 800662e:	4853      	ldr	r0, [pc, #332]	@ (800677c <_printf_i+0x238>)
 8006630:	6033      	str	r3, [r6, #0]
 8006632:	bf14      	ite	ne
 8006634:	230a      	movne	r3, #10
 8006636:	2308      	moveq	r3, #8
 8006638:	2100      	movs	r1, #0
 800663a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800663e:	6866      	ldr	r6, [r4, #4]
 8006640:	60a6      	str	r6, [r4, #8]
 8006642:	2e00      	cmp	r6, #0
 8006644:	bfa2      	ittt	ge
 8006646:	6821      	ldrge	r1, [r4, #0]
 8006648:	f021 0104 	bicge.w	r1, r1, #4
 800664c:	6021      	strge	r1, [r4, #0]
 800664e:	b90d      	cbnz	r5, 8006654 <_printf_i+0x110>
 8006650:	2e00      	cmp	r6, #0
 8006652:	d04b      	beq.n	80066ec <_printf_i+0x1a8>
 8006654:	4616      	mov	r6, r2
 8006656:	fbb5 f1f3 	udiv	r1, r5, r3
 800665a:	fb03 5711 	mls	r7, r3, r1, r5
 800665e:	5dc7      	ldrb	r7, [r0, r7]
 8006660:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006664:	462f      	mov	r7, r5
 8006666:	42bb      	cmp	r3, r7
 8006668:	460d      	mov	r5, r1
 800666a:	d9f4      	bls.n	8006656 <_printf_i+0x112>
 800666c:	2b08      	cmp	r3, #8
 800666e:	d10b      	bne.n	8006688 <_printf_i+0x144>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07df      	lsls	r7, r3, #31
 8006674:	d508      	bpl.n	8006688 <_printf_i+0x144>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6861      	ldr	r1, [r4, #4]
 800667a:	4299      	cmp	r1, r3
 800667c:	bfde      	ittt	le
 800667e:	2330      	movle	r3, #48	@ 0x30
 8006680:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006684:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006688:	1b92      	subs	r2, r2, r6
 800668a:	6122      	str	r2, [r4, #16]
 800668c:	f8cd a000 	str.w	sl, [sp]
 8006690:	464b      	mov	r3, r9
 8006692:	aa03      	add	r2, sp, #12
 8006694:	4621      	mov	r1, r4
 8006696:	4640      	mov	r0, r8
 8006698:	f7ff fee6 	bl	8006468 <_printf_common>
 800669c:	3001      	adds	r0, #1
 800669e:	d14a      	bne.n	8006736 <_printf_i+0x1f2>
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	b004      	add	sp, #16
 80066a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	4833      	ldr	r0, [pc, #204]	@ (8006780 <_printf_i+0x23c>)
 80066b4:	2778      	movs	r7, #120	@ 0x78
 80066b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	6831      	ldr	r1, [r6, #0]
 80066be:	061f      	lsls	r7, r3, #24
 80066c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c4:	d402      	bmi.n	80066cc <_printf_i+0x188>
 80066c6:	065f      	lsls	r7, r3, #25
 80066c8:	bf48      	it	mi
 80066ca:	b2ad      	uxthmi	r5, r5
 80066cc:	6031      	str	r1, [r6, #0]
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	bf44      	itt	mi
 80066d2:	f043 0320 	orrmi.w	r3, r3, #32
 80066d6:	6023      	strmi	r3, [r4, #0]
 80066d8:	b11d      	cbz	r5, 80066e2 <_printf_i+0x19e>
 80066da:	2310      	movs	r3, #16
 80066dc:	e7ac      	b.n	8006638 <_printf_i+0xf4>
 80066de:	4827      	ldr	r0, [pc, #156]	@ (800677c <_printf_i+0x238>)
 80066e0:	e7e9      	b.n	80066b6 <_printf_i+0x172>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f023 0320 	bic.w	r3, r3, #32
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	e7f6      	b.n	80066da <_printf_i+0x196>
 80066ec:	4616      	mov	r6, r2
 80066ee:	e7bd      	b.n	800666c <_printf_i+0x128>
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	6961      	ldr	r1, [r4, #20]
 80066f6:	1d18      	adds	r0, r3, #4
 80066f8:	6030      	str	r0, [r6, #0]
 80066fa:	062e      	lsls	r6, r5, #24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	d501      	bpl.n	8006704 <_printf_i+0x1c0>
 8006700:	6019      	str	r1, [r3, #0]
 8006702:	e002      	b.n	800670a <_printf_i+0x1c6>
 8006704:	0668      	lsls	r0, r5, #25
 8006706:	d5fb      	bpl.n	8006700 <_printf_i+0x1bc>
 8006708:	8019      	strh	r1, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	4616      	mov	r6, r2
 8006710:	e7bc      	b.n	800668c <_printf_i+0x148>
 8006712:	6833      	ldr	r3, [r6, #0]
 8006714:	1d1a      	adds	r2, r3, #4
 8006716:	6032      	str	r2, [r6, #0]
 8006718:	681e      	ldr	r6, [r3, #0]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	2100      	movs	r1, #0
 800671e:	4630      	mov	r0, r6
 8006720:	f7f9 fd76 	bl	8000210 <memchr>
 8006724:	b108      	cbz	r0, 800672a <_printf_i+0x1e6>
 8006726:	1b80      	subs	r0, r0, r6
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	2300      	movs	r3, #0
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006734:	e7aa      	b.n	800668c <_printf_i+0x148>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	4632      	mov	r2, r6
 800673a:	4649      	mov	r1, r9
 800673c:	4640      	mov	r0, r8
 800673e:	47d0      	blx	sl
 8006740:	3001      	adds	r0, #1
 8006742:	d0ad      	beq.n	80066a0 <_printf_i+0x15c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	079b      	lsls	r3, r3, #30
 8006748:	d413      	bmi.n	8006772 <_printf_i+0x22e>
 800674a:	68e0      	ldr	r0, [r4, #12]
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	4298      	cmp	r0, r3
 8006750:	bfb8      	it	lt
 8006752:	4618      	movlt	r0, r3
 8006754:	e7a6      	b.n	80066a4 <_printf_i+0x160>
 8006756:	2301      	movs	r3, #1
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d09d      	beq.n	80066a0 <_printf_i+0x15c>
 8006764:	3501      	adds	r5, #1
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	9903      	ldr	r1, [sp, #12]
 800676a:	1a5b      	subs	r3, r3, r1
 800676c:	42ab      	cmp	r3, r5
 800676e:	dcf2      	bgt.n	8006756 <_printf_i+0x212>
 8006770:	e7eb      	b.n	800674a <_printf_i+0x206>
 8006772:	2500      	movs	r5, #0
 8006774:	f104 0619 	add.w	r6, r4, #25
 8006778:	e7f5      	b.n	8006766 <_printf_i+0x222>
 800677a:	bf00      	nop
 800677c:	0800a42a 	.word	0x0800a42a
 8006780:	0800a43b 	.word	0x0800a43b

08006784 <std>:
 8006784:	2300      	movs	r3, #0
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	e9c0 3300 	strd	r3, r3, [r0]
 800678e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	8181      	strh	r1, [r0, #12]
 8006796:	6643      	str	r3, [r0, #100]	@ 0x64
 8006798:	81c2      	strh	r2, [r0, #14]
 800679a:	6183      	str	r3, [r0, #24]
 800679c:	4619      	mov	r1, r3
 800679e:	2208      	movs	r2, #8
 80067a0:	305c      	adds	r0, #92	@ 0x5c
 80067a2:	f000 f928 	bl	80069f6 <memset>
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <std+0x58>)
 80067a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <std+0x5c>)
 80067ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x60>)
 80067b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <std+0x64>)
 80067b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x68>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d006      	beq.n	80067cc <std+0x48>
 80067be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067c2:	4294      	cmp	r4, r2
 80067c4:	d002      	beq.n	80067cc <std+0x48>
 80067c6:	33d0      	adds	r3, #208	@ 0xd0
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d105      	bne.n	80067d8 <std+0x54>
 80067cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f000 b98c 	b.w	8006af0 <__retarget_lock_init_recursive>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	08006971 	.word	0x08006971
 80067e0:	08006993 	.word	0x08006993
 80067e4:	080069cb 	.word	0x080069cb
 80067e8:	080069ef 	.word	0x080069ef
 80067ec:	200002f0 	.word	0x200002f0

080067f0 <stdio_exit_handler>:
 80067f0:	4a02      	ldr	r2, [pc, #8]	@ (80067fc <stdio_exit_handler+0xc>)
 80067f2:	4903      	ldr	r1, [pc, #12]	@ (8006800 <stdio_exit_handler+0x10>)
 80067f4:	4803      	ldr	r0, [pc, #12]	@ (8006804 <stdio_exit_handler+0x14>)
 80067f6:	f000 b869 	b.w	80068cc <_fwalk_sglue>
 80067fa:	bf00      	nop
 80067fc:	2000001c 	.word	0x2000001c
 8006800:	0800844d 	.word	0x0800844d
 8006804:	2000002c 	.word	0x2000002c

08006808 <cleanup_stdio>:
 8006808:	6841      	ldr	r1, [r0, #4]
 800680a:	4b0c      	ldr	r3, [pc, #48]	@ (800683c <cleanup_stdio+0x34>)
 800680c:	4299      	cmp	r1, r3
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	d001      	beq.n	8006818 <cleanup_stdio+0x10>
 8006814:	f001 fe1a 	bl	800844c <_fflush_r>
 8006818:	68a1      	ldr	r1, [r4, #8]
 800681a:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <cleanup_stdio+0x38>)
 800681c:	4299      	cmp	r1, r3
 800681e:	d002      	beq.n	8006826 <cleanup_stdio+0x1e>
 8006820:	4620      	mov	r0, r4
 8006822:	f001 fe13 	bl	800844c <_fflush_r>
 8006826:	68e1      	ldr	r1, [r4, #12]
 8006828:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <cleanup_stdio+0x3c>)
 800682a:	4299      	cmp	r1, r3
 800682c:	d004      	beq.n	8006838 <cleanup_stdio+0x30>
 800682e:	4620      	mov	r0, r4
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f001 be0a 	b.w	800844c <_fflush_r>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	200002f0 	.word	0x200002f0
 8006840:	20000358 	.word	0x20000358
 8006844:	200003c0 	.word	0x200003c0

08006848 <global_stdio_init.part.0>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <global_stdio_init.part.0+0x30>)
 800684c:	4c0b      	ldr	r4, [pc, #44]	@ (800687c <global_stdio_init.part.0+0x34>)
 800684e:	4a0c      	ldr	r2, [pc, #48]	@ (8006880 <global_stdio_init.part.0+0x38>)
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	4620      	mov	r0, r4
 8006854:	2200      	movs	r2, #0
 8006856:	2104      	movs	r1, #4
 8006858:	f7ff ff94 	bl	8006784 <std>
 800685c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006860:	2201      	movs	r2, #1
 8006862:	2109      	movs	r1, #9
 8006864:	f7ff ff8e 	bl	8006784 <std>
 8006868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800686c:	2202      	movs	r2, #2
 800686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006872:	2112      	movs	r1, #18
 8006874:	f7ff bf86 	b.w	8006784 <std>
 8006878:	20000428 	.word	0x20000428
 800687c:	200002f0 	.word	0x200002f0
 8006880:	080067f1 	.word	0x080067f1

08006884 <__sfp_lock_acquire>:
 8006884:	4801      	ldr	r0, [pc, #4]	@ (800688c <__sfp_lock_acquire+0x8>)
 8006886:	f000 b934 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	20000431 	.word	0x20000431

08006890 <__sfp_lock_release>:
 8006890:	4801      	ldr	r0, [pc, #4]	@ (8006898 <__sfp_lock_release+0x8>)
 8006892:	f000 b92f 	b.w	8006af4 <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	20000431 	.word	0x20000431

0800689c <__sinit>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	f7ff fff0 	bl	8006884 <__sfp_lock_acquire>
 80068a4:	6a23      	ldr	r3, [r4, #32]
 80068a6:	b11b      	cbz	r3, 80068b0 <__sinit+0x14>
 80068a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ac:	f7ff bff0 	b.w	8006890 <__sfp_lock_release>
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <__sinit+0x28>)
 80068b2:	6223      	str	r3, [r4, #32]
 80068b4:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <__sinit+0x2c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f5      	bne.n	80068a8 <__sinit+0xc>
 80068bc:	f7ff ffc4 	bl	8006848 <global_stdio_init.part.0>
 80068c0:	e7f2      	b.n	80068a8 <__sinit+0xc>
 80068c2:	bf00      	nop
 80068c4:	08006809 	.word	0x08006809
 80068c8:	20000428 	.word	0x20000428

080068cc <_fwalk_sglue>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4607      	mov	r7, r0
 80068d2:	4688      	mov	r8, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	2600      	movs	r6, #0
 80068d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068dc:	f1b9 0901 	subs.w	r9, r9, #1
 80068e0:	d505      	bpl.n	80068ee <_fwalk_sglue+0x22>
 80068e2:	6824      	ldr	r4, [r4, #0]
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	d1f7      	bne.n	80068d8 <_fwalk_sglue+0xc>
 80068e8:	4630      	mov	r0, r6
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	89ab      	ldrh	r3, [r5, #12]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d907      	bls.n	8006904 <_fwalk_sglue+0x38>
 80068f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f8:	3301      	adds	r3, #1
 80068fa:	d003      	beq.n	8006904 <_fwalk_sglue+0x38>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	4306      	orrs	r6, r0
 8006904:	3568      	adds	r5, #104	@ 0x68
 8006906:	e7e9      	b.n	80068dc <_fwalk_sglue+0x10>

08006908 <sniprintf>:
 8006908:	b40c      	push	{r2, r3}
 800690a:	b530      	push	{r4, r5, lr}
 800690c:	4b17      	ldr	r3, [pc, #92]	@ (800696c <sniprintf+0x64>)
 800690e:	1e0c      	subs	r4, r1, #0
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	b09d      	sub	sp, #116	@ 0x74
 8006914:	da08      	bge.n	8006928 <sniprintf+0x20>
 8006916:	238b      	movs	r3, #139	@ 0x8b
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	b01d      	add	sp, #116	@ 0x74
 8006920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006924:	b002      	add	sp, #8
 8006926:	4770      	bx	lr
 8006928:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800692c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006930:	bf14      	ite	ne
 8006932:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006936:	4623      	moveq	r3, r4
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006940:	9002      	str	r0, [sp, #8]
 8006942:	9006      	str	r0, [sp, #24]
 8006944:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800694a:	ab21      	add	r3, sp, #132	@ 0x84
 800694c:	a902      	add	r1, sp, #8
 800694e:	4628      	mov	r0, r5
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	f001 fbfb 	bl	800814c <_svfiprintf_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	bfbc      	itt	lt
 800695a:	238b      	movlt	r3, #139	@ 0x8b
 800695c:	602b      	strlt	r3, [r5, #0]
 800695e:	2c00      	cmp	r4, #0
 8006960:	d0dd      	beq.n	800691e <sniprintf+0x16>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	e7d9      	b.n	800691e <sniprintf+0x16>
 800696a:	bf00      	nop
 800696c:	20000028 	.word	0x20000028

08006970 <__sread>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	f000 f86c 	bl	8006a54 <_read_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	bfab      	itete	ge
 8006980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006982:	89a3      	ldrhlt	r3, [r4, #12]
 8006984:	181b      	addge	r3, r3, r0
 8006986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800698a:	bfac      	ite	ge
 800698c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800698e:	81a3      	strhlt	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__swrite>:
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	461f      	mov	r7, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	05db      	lsls	r3, r3, #23
 800699c:	4605      	mov	r5, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d505      	bpl.n	80069b0 <__swrite+0x1e>
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2302      	movs	r3, #2
 80069aa:	2200      	movs	r2, #0
 80069ac:	f000 f840 	bl	8006a30 <_lseek_r>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	f000 b857 	b.w	8006a78 <_write_r>

080069ca <__sseek>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 f82d 	bl	8006a30 <_lseek_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	bf15      	itete	ne
 80069dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069e6:	81a3      	strheq	r3, [r4, #12]
 80069e8:	bf18      	it	ne
 80069ea:	81a3      	strhne	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__sclose>:
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 b80d 	b.w	8006a10 <_close_r>

080069f6 <memset>:
 80069f6:	4402      	add	r2, r0
 80069f8:	4603      	mov	r3, r0
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d100      	bne.n	8006a00 <memset+0xa>
 80069fe:	4770      	bx	lr
 8006a00:	f803 1b01 	strb.w	r1, [r3], #1
 8006a04:	e7f9      	b.n	80069fa <memset+0x4>
	...

08006a08 <_localeconv_r>:
 8006a08:	4800      	ldr	r0, [pc, #0]	@ (8006a0c <_localeconv_r+0x4>)
 8006a0a:	4770      	bx	lr
 8006a0c:	20000168 	.word	0x20000168

08006a10 <_close_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d06      	ldr	r5, [pc, #24]	@ (8006a2c <_close_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fb fdf2 	bl	8002604 <_close>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_close_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_close_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	2000042c 	.word	0x2000042c

08006a30 <_lseek_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	@ (8006a50 <_lseek_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fb fe07 	bl	8002652 <_lseek>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_lseek_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_lseek_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	2000042c 	.word	0x2000042c

08006a54 <_read_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d07      	ldr	r5, [pc, #28]	@ (8006a74 <_read_r+0x20>)
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fb fd95 	bl	8002592 <_read>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_read_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_read_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	2000042c 	.word	0x2000042c

08006a78 <_write_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	@ (8006a98 <_write_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fb fda0 	bl	80025cc <_write>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_write_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_write_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	2000042c 	.word	0x2000042c

08006a9c <__errno>:
 8006a9c:	4b01      	ldr	r3, [pc, #4]	@ (8006aa4 <__errno+0x8>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000028 	.word	0x20000028

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8006ae0 <__libc_init_array+0x38>)
 8006aac:	4c0d      	ldr	r4, [pc, #52]	@ (8006ae4 <__libc_init_array+0x3c>)
 8006aae:	1b64      	subs	r4, r4, r5
 8006ab0:	10a4      	asrs	r4, r4, #2
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ae8 <__libc_init_array+0x40>)
 8006aba:	4c0c      	ldr	r4, [pc, #48]	@ (8006aec <__libc_init_array+0x44>)
 8006abc:	f003 fc88 	bl	800a3d0 <_init>
 8006ac0:	1b64      	subs	r4, r4, r5
 8006ac2:	10a4      	asrs	r4, r4, #2
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	0800a968 	.word	0x0800a968
 8006ae4:	0800a968 	.word	0x0800a968
 8006ae8:	0800a968 	.word	0x0800a968
 8006aec:	0800a96c 	.word	0x0800a96c

08006af0 <__retarget_lock_init_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_acquire_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_release_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <quorem>:
 8006af6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6903      	ldr	r3, [r0, #16]
 8006afc:	690c      	ldr	r4, [r1, #16]
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	4607      	mov	r7, r0
 8006b02:	db7e      	blt.n	8006c02 <quorem+0x10c>
 8006b04:	3c01      	subs	r4, #1
 8006b06:	f101 0814 	add.w	r8, r1, #20
 8006b0a:	00a3      	lsls	r3, r4, #2
 8006b0c:	f100 0514 	add.w	r5, r0, #20
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b20:	3301      	adds	r3, #1
 8006b22:	429a      	cmp	r2, r3
 8006b24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b2c:	d32e      	bcc.n	8006b8c <quorem+0x96>
 8006b2e:	f04f 0a00 	mov.w	sl, #0
 8006b32:	46c4      	mov	ip, r8
 8006b34:	46ae      	mov	lr, r5
 8006b36:	46d3      	mov	fp, sl
 8006b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b3c:	b298      	uxth	r0, r3
 8006b3e:	fb06 a000 	mla	r0, r6, r0, sl
 8006b42:	0c02      	lsrs	r2, r0, #16
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	fb06 2303 	mla	r3, r6, r3, r2
 8006b4a:	f8de 2000 	ldr.w	r2, [lr]
 8006b4e:	b280      	uxth	r0, r0
 8006b50:	b292      	uxth	r2, r2
 8006b52:	1a12      	subs	r2, r2, r0
 8006b54:	445a      	add	r2, fp
 8006b56:	f8de 0000 	ldr.w	r0, [lr]
 8006b5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b68:	b292      	uxth	r2, r2
 8006b6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b6e:	45e1      	cmp	r9, ip
 8006b70:	f84e 2b04 	str.w	r2, [lr], #4
 8006b74:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b78:	d2de      	bcs.n	8006b38 <quorem+0x42>
 8006b7a:	9b00      	ldr	r3, [sp, #0]
 8006b7c:	58eb      	ldr	r3, [r5, r3]
 8006b7e:	b92b      	cbnz	r3, 8006b8c <quorem+0x96>
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	3b04      	subs	r3, #4
 8006b84:	429d      	cmp	r5, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	d32f      	bcc.n	8006bea <quorem+0xf4>
 8006b8a:	613c      	str	r4, [r7, #16]
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f001 f979 	bl	8007e84 <__mcmp>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	db25      	blt.n	8006be2 <quorem+0xec>
 8006b96:	4629      	mov	r1, r5
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b9e:	f8d1 c000 	ldr.w	ip, [r1]
 8006ba2:	fa1f fe82 	uxth.w	lr, r2
 8006ba6:	fa1f f38c 	uxth.w	r3, ip
 8006baa:	eba3 030e 	sub.w	r3, r3, lr
 8006bae:	4403      	add	r3, r0
 8006bb0:	0c12      	lsrs	r2, r2, #16
 8006bb2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bb6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bc0:	45c1      	cmp	r9, r8
 8006bc2:	f841 3b04 	str.w	r3, [r1], #4
 8006bc6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bca:	d2e6      	bcs.n	8006b9a <quorem+0xa4>
 8006bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd4:	b922      	cbnz	r2, 8006be0 <quorem+0xea>
 8006bd6:	3b04      	subs	r3, #4
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	d30b      	bcc.n	8006bf6 <quorem+0x100>
 8006bde:	613c      	str	r4, [r7, #16]
 8006be0:	3601      	adds	r6, #1
 8006be2:	4630      	mov	r0, r6
 8006be4:	b003      	add	sp, #12
 8006be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d1cb      	bne.n	8006b8a <quorem+0x94>
 8006bf2:	3c01      	subs	r4, #1
 8006bf4:	e7c6      	b.n	8006b84 <quorem+0x8e>
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	d1ef      	bne.n	8006bde <quorem+0xe8>
 8006bfe:	3c01      	subs	r4, #1
 8006c00:	e7ea      	b.n	8006bd8 <quorem+0xe2>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7ee      	b.n	8006be4 <quorem+0xee>
	...

08006c08 <_dtoa_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	69c7      	ldr	r7, [r0, #28]
 8006c0e:	b099      	sub	sp, #100	@ 0x64
 8006c10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c14:	ec55 4b10 	vmov	r4, r5, d0
 8006c18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c1c:	4683      	mov	fp, r0
 8006c1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c22:	b97f      	cbnz	r7, 8006c44 <_dtoa_r+0x3c>
 8006c24:	2010      	movs	r0, #16
 8006c26:	f000 fdfd 	bl	8007824 <malloc>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c30:	b920      	cbnz	r0, 8006c3c <_dtoa_r+0x34>
 8006c32:	4ba7      	ldr	r3, [pc, #668]	@ (8006ed0 <_dtoa_r+0x2c8>)
 8006c34:	21ef      	movs	r1, #239	@ 0xef
 8006c36:	48a7      	ldr	r0, [pc, #668]	@ (8006ed4 <_dtoa_r+0x2cc>)
 8006c38:	f001 fc68 	bl	800850c <__assert_func>
 8006c3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c40:	6007      	str	r7, [r0, #0]
 8006c42:	60c7      	str	r7, [r0, #12]
 8006c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	b159      	cbz	r1, 8006c64 <_dtoa_r+0x5c>
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	604a      	str	r2, [r1, #4]
 8006c50:	2301      	movs	r3, #1
 8006c52:	4093      	lsls	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]
 8006c56:	4658      	mov	r0, fp
 8006c58:	f000 feda 	bl	8007a10 <_Bfree>
 8006c5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	1e2b      	subs	r3, r5, #0
 8006c66:	bfb9      	ittee	lt
 8006c68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c6c:	9303      	strlt	r3, [sp, #12]
 8006c6e:	2300      	movge	r3, #0
 8006c70:	6033      	strge	r3, [r6, #0]
 8006c72:	9f03      	ldr	r7, [sp, #12]
 8006c74:	4b98      	ldr	r3, [pc, #608]	@ (8006ed8 <_dtoa_r+0x2d0>)
 8006c76:	bfbc      	itt	lt
 8006c78:	2201      	movlt	r2, #1
 8006c7a:	6032      	strlt	r2, [r6, #0]
 8006c7c:	43bb      	bics	r3, r7
 8006c7e:	d112      	bne.n	8006ca6 <_dtoa_r+0x9e>
 8006c80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	f000 854d 	beq.w	800772c <_dtoa_r+0xb24>
 8006c92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006eec <_dtoa_r+0x2e4>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 854f 	beq.w	800773c <_dtoa_r+0xb34>
 8006c9e:	f10a 0303 	add.w	r3, sl, #3
 8006ca2:	f000 bd49 	b.w	8007738 <_dtoa_r+0xb30>
 8006ca6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	ec51 0b17 	vmov	r0, r1, d7
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cb6:	f7f9 ff27 	bl	8000b08 <__aeabi_dcmpeq>
 8006cba:	4680      	mov	r8, r0
 8006cbc:	b158      	cbz	r0, 8006cd6 <_dtoa_r+0xce>
 8006cbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cc6:	b113      	cbz	r3, 8006cce <_dtoa_r+0xc6>
 8006cc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006cca:	4b84      	ldr	r3, [pc, #528]	@ (8006edc <_dtoa_r+0x2d4>)
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ef0 <_dtoa_r+0x2e8>
 8006cd2:	f000 bd33 	b.w	800773c <_dtoa_r+0xb34>
 8006cd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006cda:	aa16      	add	r2, sp, #88	@ 0x58
 8006cdc:	a917      	add	r1, sp, #92	@ 0x5c
 8006cde:	4658      	mov	r0, fp
 8006ce0:	f001 f980 	bl	8007fe4 <__d2b>
 8006ce4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ce8:	4681      	mov	r9, r0
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	d077      	beq.n	8006dde <_dtoa_r+0x1d6>
 8006cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b74      	ldr	r3, [pc, #464]	@ (8006ee0 <_dtoa_r+0x2d8>)
 8006d0e:	f7f9 fadb 	bl	80002c8 <__aeabi_dsub>
 8006d12:	a369      	add	r3, pc, #420	@ (adr r3, 8006eb8 <_dtoa_r+0x2b0>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 fc8e 	bl	8000638 <__aeabi_dmul>
 8006d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006ec0 <_dtoa_r+0x2b8>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fad3 	bl	80002cc <__adddf3>
 8006d26:	4604      	mov	r4, r0
 8006d28:	4630      	mov	r0, r6
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	f7f9 fc1a 	bl	8000564 <__aeabi_i2d>
 8006d30:	a365      	add	r3, pc, #404	@ (adr r3, 8006ec8 <_dtoa_r+0x2c0>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fc7f 	bl	8000638 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fac3 	bl	80002cc <__adddf3>
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	f7f9 ff25 	bl	8000b98 <__aeabi_d2iz>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4607      	mov	r7, r0
 8006d52:	2300      	movs	r3, #0
 8006d54:	4620      	mov	r0, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	f7f9 fee0 	bl	8000b1c <__aeabi_dcmplt>
 8006d5c:	b140      	cbz	r0, 8006d70 <_dtoa_r+0x168>
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7f9 fc00 	bl	8000564 <__aeabi_i2d>
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	f7f9 fece 	bl	8000b08 <__aeabi_dcmpeq>
 8006d6c:	b900      	cbnz	r0, 8006d70 <_dtoa_r+0x168>
 8006d6e:	3f01      	subs	r7, #1
 8006d70:	2f16      	cmp	r7, #22
 8006d72:	d851      	bhi.n	8006e18 <_dtoa_r+0x210>
 8006d74:	4b5b      	ldr	r3, [pc, #364]	@ (8006ee4 <_dtoa_r+0x2dc>)
 8006d76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d82:	f7f9 fecb 	bl	8000b1c <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d048      	beq.n	8006e1c <_dtoa_r+0x214>
 8006d8a:	3f01      	subs	r7, #1
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d92:	1b9b      	subs	r3, r3, r6
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	bf44      	itt	mi
 8006d98:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d9c:	2300      	movmi	r3, #0
 8006d9e:	9208      	str	r2, [sp, #32]
 8006da0:	bf54      	ite	pl
 8006da2:	f04f 0800 	movpl.w	r8, #0
 8006da6:	9308      	strmi	r3, [sp, #32]
 8006da8:	2f00      	cmp	r7, #0
 8006daa:	db39      	blt.n	8006e20 <_dtoa_r+0x218>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006db0:	443b      	add	r3, r7
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	2300      	movs	r3, #0
 8006db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dba:	2b09      	cmp	r3, #9
 8006dbc:	d864      	bhi.n	8006e88 <_dtoa_r+0x280>
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	bfc4      	itt	gt
 8006dc2:	3b04      	subgt	r3, #4
 8006dc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc8:	f1a3 0302 	sub.w	r3, r3, #2
 8006dcc:	bfcc      	ite	gt
 8006dce:	2400      	movgt	r4, #0
 8006dd0:	2401      	movle	r4, #1
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d863      	bhi.n	8006e9e <_dtoa_r+0x296>
 8006dd6:	e8df f003 	tbb	[pc, r3]
 8006dda:	372a      	.short	0x372a
 8006ddc:	5535      	.short	0x5535
 8006dde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006de2:	441e      	add	r6, r3
 8006de4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	bfc1      	itttt	gt
 8006dec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006df0:	409f      	lslgt	r7, r3
 8006df2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006df6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dfa:	bfd6      	itet	le
 8006dfc:	f1c3 0320 	rsble	r3, r3, #32
 8006e00:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e04:	fa04 f003 	lslle.w	r0, r4, r3
 8006e08:	f7f9 fb9c 	bl	8000544 <__aeabi_ui2d>
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e12:	3e01      	subs	r6, #1
 8006e14:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e16:	e777      	b.n	8006d08 <_dtoa_r+0x100>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e7b8      	b.n	8006d8e <_dtoa_r+0x186>
 8006e1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e1e:	e7b7      	b.n	8006d90 <_dtoa_r+0x188>
 8006e20:	427b      	negs	r3, r7
 8006e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e24:	2300      	movs	r3, #0
 8006e26:	eba8 0807 	sub.w	r8, r8, r7
 8006e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e2c:	e7c4      	b.n	8006db8 <_dtoa_r+0x1b0>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc35      	bgt.n	8006ea4 <_dtoa_r+0x29c>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	9307      	str	r3, [sp, #28]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e42:	e00b      	b.n	8006e5c <_dtoa_r+0x254>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7f3      	b.n	8006e30 <_dtoa_r+0x228>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	bfb8      	it	lt
 8006e5a:	2301      	movlt	r3, #1
 8006e5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e60:	2100      	movs	r1, #0
 8006e62:	2204      	movs	r2, #4
 8006e64:	f102 0514 	add.w	r5, r2, #20
 8006e68:	429d      	cmp	r5, r3
 8006e6a:	d91f      	bls.n	8006eac <_dtoa_r+0x2a4>
 8006e6c:	6041      	str	r1, [r0, #4]
 8006e6e:	4658      	mov	r0, fp
 8006e70:	f000 fd8e 	bl	8007990 <_Balloc>
 8006e74:	4682      	mov	sl, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d13c      	bne.n	8006ef4 <_dtoa_r+0x2ec>
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <_dtoa_r+0x2e0>)
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e82:	e6d8      	b.n	8006c36 <_dtoa_r+0x2e>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7e0      	b.n	8006e4a <_dtoa_r+0x242>
 8006e88:	2401      	movs	r4, #1
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	9307      	str	r3, [sp, #28]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2312      	movs	r3, #18
 8006e9c:	e7d0      	b.n	8006e40 <_dtoa_r+0x238>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ea2:	e7f5      	b.n	8006e90 <_dtoa_r+0x288>
 8006ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	e7d7      	b.n	8006e5c <_dtoa_r+0x254>
 8006eac:	3101      	adds	r1, #1
 8006eae:	0052      	lsls	r2, r2, #1
 8006eb0:	e7d8      	b.n	8006e64 <_dtoa_r+0x25c>
 8006eb2:	bf00      	nop
 8006eb4:	f3af 8000 	nop.w
 8006eb8:	636f4361 	.word	0x636f4361
 8006ebc:	3fd287a7 	.word	0x3fd287a7
 8006ec0:	8b60c8b3 	.word	0x8b60c8b3
 8006ec4:	3fc68a28 	.word	0x3fc68a28
 8006ec8:	509f79fb 	.word	0x509f79fb
 8006ecc:	3fd34413 	.word	0x3fd34413
 8006ed0:	0800a459 	.word	0x0800a459
 8006ed4:	0800a470 	.word	0x0800a470
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	0800a429 	.word	0x0800a429
 8006ee0:	3ff80000 	.word	0x3ff80000
 8006ee4:	0800a568 	.word	0x0800a568
 8006ee8:	0800a4c8 	.word	0x0800a4c8
 8006eec:	0800a455 	.word	0x0800a455
 8006ef0:	0800a428 	.word	0x0800a428
 8006ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ef8:	6018      	str	r0, [r3, #0]
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	2b0e      	cmp	r3, #14
 8006efe:	f200 80a4 	bhi.w	800704a <_dtoa_r+0x442>
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	f000 80a1 	beq.w	800704a <_dtoa_r+0x442>
 8006f08:	2f00      	cmp	r7, #0
 8006f0a:	dd33      	ble.n	8006f74 <_dtoa_r+0x36c>
 8006f0c:	4bad      	ldr	r3, [pc, #692]	@ (80071c4 <_dtoa_r+0x5bc>)
 8006f0e:	f007 020f 	and.w	r2, r7, #15
 8006f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f16:	ed93 7b00 	vldr	d7, [r3]
 8006f1a:	05f8      	lsls	r0, r7, #23
 8006f1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f24:	d516      	bpl.n	8006f54 <_dtoa_r+0x34c>
 8006f26:	4ba8      	ldr	r3, [pc, #672]	@ (80071c8 <_dtoa_r+0x5c0>)
 8006f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f30:	f7f9 fcac 	bl	800088c <__aeabi_ddiv>
 8006f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f38:	f004 040f 	and.w	r4, r4, #15
 8006f3c:	2603      	movs	r6, #3
 8006f3e:	4da2      	ldr	r5, [pc, #648]	@ (80071c8 <_dtoa_r+0x5c0>)
 8006f40:	b954      	cbnz	r4, 8006f58 <_dtoa_r+0x350>
 8006f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4a:	f7f9 fc9f 	bl	800088c <__aeabi_ddiv>
 8006f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f52:	e028      	b.n	8006fa6 <_dtoa_r+0x39e>
 8006f54:	2602      	movs	r6, #2
 8006f56:	e7f2      	b.n	8006f3e <_dtoa_r+0x336>
 8006f58:	07e1      	lsls	r1, r4, #31
 8006f5a:	d508      	bpl.n	8006f6e <_dtoa_r+0x366>
 8006f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f64:	f7f9 fb68 	bl	8000638 <__aeabi_dmul>
 8006f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	1064      	asrs	r4, r4, #1
 8006f70:	3508      	adds	r5, #8
 8006f72:	e7e5      	b.n	8006f40 <_dtoa_r+0x338>
 8006f74:	f000 80d2 	beq.w	800711c <_dtoa_r+0x514>
 8006f78:	427c      	negs	r4, r7
 8006f7a:	4b92      	ldr	r3, [pc, #584]	@ (80071c4 <_dtoa_r+0x5bc>)
 8006f7c:	4d92      	ldr	r5, [pc, #584]	@ (80071c8 <_dtoa_r+0x5c0>)
 8006f7e:	f004 020f 	and.w	r2, r4, #15
 8006f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f8e:	f7f9 fb53 	bl	8000638 <__aeabi_dmul>
 8006f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f96:	1124      	asrs	r4, r4, #4
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2602      	movs	r6, #2
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	f040 80b2 	bne.w	8007106 <_dtoa_r+0x4fe>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d3      	bne.n	8006f4e <_dtoa_r+0x346>
 8006fa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80b7 	beq.w	8007120 <_dtoa_r+0x518>
 8006fb2:	4b86      	ldr	r3, [pc, #536]	@ (80071cc <_dtoa_r+0x5c4>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f000 80ae 	beq.w	8007120 <_dtoa_r+0x518>
 8006fc4:	9b07      	ldr	r3, [sp, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80aa 	beq.w	8007120 <_dtoa_r+0x518>
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd37      	ble.n	8007042 <_dtoa_r+0x43a>
 8006fd2:	1e7b      	subs	r3, r7, #1
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80071d0 <_dtoa_r+0x5c8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 fb2b 	bl	8000638 <__aeabi_dmul>
 8006fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe6:	9c00      	ldr	r4, [sp, #0]
 8006fe8:	3601      	adds	r6, #1
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7f9 faba 	bl	8000564 <__aeabi_i2d>
 8006ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ff4:	f7f9 fb20 	bl	8000638 <__aeabi_dmul>
 8006ff8:	4b76      	ldr	r3, [pc, #472]	@ (80071d4 <_dtoa_r+0x5cc>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f7f9 f966 	bl	80002cc <__adddf3>
 8007000:	4605      	mov	r5, r0
 8007002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007006:	2c00      	cmp	r4, #0
 8007008:	f040 808d 	bne.w	8007126 <_dtoa_r+0x51e>
 800700c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007010:	4b71      	ldr	r3, [pc, #452]	@ (80071d8 <_dtoa_r+0x5d0>)
 8007012:	2200      	movs	r2, #0
 8007014:	f7f9 f958 	bl	80002c8 <__aeabi_dsub>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007020:	462a      	mov	r2, r5
 8007022:	4633      	mov	r3, r6
 8007024:	f7f9 fd98 	bl	8000b58 <__aeabi_dcmpgt>
 8007028:	2800      	cmp	r0, #0
 800702a:	f040 828b 	bne.w	8007544 <_dtoa_r+0x93c>
 800702e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007032:	462a      	mov	r2, r5
 8007034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007038:	f7f9 fd70 	bl	8000b1c <__aeabi_dcmplt>
 800703c:	2800      	cmp	r0, #0
 800703e:	f040 8128 	bne.w	8007292 <_dtoa_r+0x68a>
 8007042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800704a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800704c:	2b00      	cmp	r3, #0
 800704e:	f2c0 815a 	blt.w	8007306 <_dtoa_r+0x6fe>
 8007052:	2f0e      	cmp	r7, #14
 8007054:	f300 8157 	bgt.w	8007306 <_dtoa_r+0x6fe>
 8007058:	4b5a      	ldr	r3, [pc, #360]	@ (80071c4 <_dtoa_r+0x5bc>)
 800705a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800705e:	ed93 7b00 	vldr	d7, [r3]
 8007062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	ed8d 7b00 	vstr	d7, [sp]
 800706a:	da03      	bge.n	8007074 <_dtoa_r+0x46c>
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f340 8101 	ble.w	8007276 <_dtoa_r+0x66e>
 8007074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007078:	4656      	mov	r6, sl
 800707a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fc03 	bl	800088c <__aeabi_ddiv>
 8007086:	f7f9 fd87 	bl	8000b98 <__aeabi_d2iz>
 800708a:	4680      	mov	r8, r0
 800708c:	f7f9 fa6a 	bl	8000564 <__aeabi_i2d>
 8007090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007094:	f7f9 fad0 	bl	8000638 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070a4:	f7f9 f910 	bl	80002c8 <__aeabi_dsub>
 80070a8:	f806 4b01 	strb.w	r4, [r6], #1
 80070ac:	9d07      	ldr	r5, [sp, #28]
 80070ae:	eba6 040a 	sub.w	r4, r6, sl
 80070b2:	42a5      	cmp	r5, r4
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	f040 8117 	bne.w	80072ea <_dtoa_r+0x6e2>
 80070bc:	f7f9 f906 	bl	80002cc <__adddf3>
 80070c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	f7f9 fd46 	bl	8000b58 <__aeabi_dcmpgt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f040 80f9 	bne.w	80072c4 <_dtoa_r+0x6bc>
 80070d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fd15 	bl	8000b08 <__aeabi_dcmpeq>
 80070de:	b118      	cbz	r0, 80070e8 <_dtoa_r+0x4e0>
 80070e0:	f018 0f01 	tst.w	r8, #1
 80070e4:	f040 80ee 	bne.w	80072c4 <_dtoa_r+0x6bc>
 80070e8:	4649      	mov	r1, r9
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 fc90 	bl	8007a10 <_Bfree>
 80070f0:	2300      	movs	r3, #0
 80070f2:	7033      	strb	r3, [r6, #0]
 80070f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070f6:	3701      	adds	r7, #1
 80070f8:	601f      	str	r7, [r3, #0]
 80070fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 831d 	beq.w	800773c <_dtoa_r+0xb34>
 8007102:	601e      	str	r6, [r3, #0]
 8007104:	e31a      	b.n	800773c <_dtoa_r+0xb34>
 8007106:	07e2      	lsls	r2, r4, #31
 8007108:	d505      	bpl.n	8007116 <_dtoa_r+0x50e>
 800710a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800710e:	f7f9 fa93 	bl	8000638 <__aeabi_dmul>
 8007112:	3601      	adds	r6, #1
 8007114:	2301      	movs	r3, #1
 8007116:	1064      	asrs	r4, r4, #1
 8007118:	3508      	adds	r5, #8
 800711a:	e73f      	b.n	8006f9c <_dtoa_r+0x394>
 800711c:	2602      	movs	r6, #2
 800711e:	e742      	b.n	8006fa6 <_dtoa_r+0x39e>
 8007120:	9c07      	ldr	r4, [sp, #28]
 8007122:	9704      	str	r7, [sp, #16]
 8007124:	e761      	b.n	8006fea <_dtoa_r+0x3e2>
 8007126:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <_dtoa_r+0x5bc>)
 8007128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800712a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800712e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007132:	4454      	add	r4, sl
 8007134:	2900      	cmp	r1, #0
 8007136:	d053      	beq.n	80071e0 <_dtoa_r+0x5d8>
 8007138:	4928      	ldr	r1, [pc, #160]	@ (80071dc <_dtoa_r+0x5d4>)
 800713a:	2000      	movs	r0, #0
 800713c:	f7f9 fba6 	bl	800088c <__aeabi_ddiv>
 8007140:	4633      	mov	r3, r6
 8007142:	462a      	mov	r2, r5
 8007144:	f7f9 f8c0 	bl	80002c8 <__aeabi_dsub>
 8007148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800714c:	4656      	mov	r6, sl
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	f7f9 fd21 	bl	8000b98 <__aeabi_d2iz>
 8007156:	4605      	mov	r5, r0
 8007158:	f7f9 fa04 	bl	8000564 <__aeabi_i2d>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007164:	f7f9 f8b0 	bl	80002c8 <__aeabi_dsub>
 8007168:	3530      	adds	r5, #48	@ 0x30
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007172:	f806 5b01 	strb.w	r5, [r6], #1
 8007176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800717a:	f7f9 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800717e:	2800      	cmp	r0, #0
 8007180:	d171      	bne.n	8007266 <_dtoa_r+0x65e>
 8007182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007186:	4911      	ldr	r1, [pc, #68]	@ (80071cc <_dtoa_r+0x5c4>)
 8007188:	2000      	movs	r0, #0
 800718a:	f7f9 f89d 	bl	80002c8 <__aeabi_dsub>
 800718e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007192:	f7f9 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8007196:	2800      	cmp	r0, #0
 8007198:	f040 8095 	bne.w	80072c6 <_dtoa_r+0x6be>
 800719c:	42a6      	cmp	r6, r4
 800719e:	f43f af50 	beq.w	8007042 <_dtoa_r+0x43a>
 80071a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071a6:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <_dtoa_r+0x5c8>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	f7f9 fa45 	bl	8000638 <__aeabi_dmul>
 80071ae:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <_dtoa_r+0x5c8>)
 80071b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071b4:	2200      	movs	r2, #0
 80071b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ba:	f7f9 fa3d 	bl	8000638 <__aeabi_dmul>
 80071be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c2:	e7c4      	b.n	800714e <_dtoa_r+0x546>
 80071c4:	0800a568 	.word	0x0800a568
 80071c8:	0800a540 	.word	0x0800a540
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	40240000 	.word	0x40240000
 80071d4:	401c0000 	.word	0x401c0000
 80071d8:	40140000 	.word	0x40140000
 80071dc:	3fe00000 	.word	0x3fe00000
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7f9 fa28 	bl	8000638 <__aeabi_dmul>
 80071e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80071ee:	4656      	mov	r6, sl
 80071f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f4:	f7f9 fcd0 	bl	8000b98 <__aeabi_d2iz>
 80071f8:	4605      	mov	r5, r0
 80071fa:	f7f9 f9b3 	bl	8000564 <__aeabi_i2d>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007206:	f7f9 f85f 	bl	80002c8 <__aeabi_dsub>
 800720a:	3530      	adds	r5, #48	@ 0x30
 800720c:	f806 5b01 	strb.w	r5, [r6], #1
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	42a6      	cmp	r6, r4
 8007216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	d124      	bne.n	800726a <_dtoa_r+0x662>
 8007220:	4bac      	ldr	r3, [pc, #688]	@ (80074d4 <_dtoa_r+0x8cc>)
 8007222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007226:	f7f9 f851 	bl	80002cc <__adddf3>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007232:	f7f9 fc91 	bl	8000b58 <__aeabi_dcmpgt>
 8007236:	2800      	cmp	r0, #0
 8007238:	d145      	bne.n	80072c6 <_dtoa_r+0x6be>
 800723a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800723e:	49a5      	ldr	r1, [pc, #660]	@ (80074d4 <_dtoa_r+0x8cc>)
 8007240:	2000      	movs	r0, #0
 8007242:	f7f9 f841 	bl	80002c8 <__aeabi_dsub>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724e:	f7f9 fc65 	bl	8000b1c <__aeabi_dcmplt>
 8007252:	2800      	cmp	r0, #0
 8007254:	f43f aef5 	beq.w	8007042 <_dtoa_r+0x43a>
 8007258:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800725a:	1e73      	subs	r3, r6, #1
 800725c:	9315      	str	r3, [sp, #84]	@ 0x54
 800725e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007262:	2b30      	cmp	r3, #48	@ 0x30
 8007264:	d0f8      	beq.n	8007258 <_dtoa_r+0x650>
 8007266:	9f04      	ldr	r7, [sp, #16]
 8007268:	e73e      	b.n	80070e8 <_dtoa_r+0x4e0>
 800726a:	4b9b      	ldr	r3, [pc, #620]	@ (80074d8 <_dtoa_r+0x8d0>)
 800726c:	f7f9 f9e4 	bl	8000638 <__aeabi_dmul>
 8007270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007274:	e7bc      	b.n	80071f0 <_dtoa_r+0x5e8>
 8007276:	d10c      	bne.n	8007292 <_dtoa_r+0x68a>
 8007278:	4b98      	ldr	r3, [pc, #608]	@ (80074dc <_dtoa_r+0x8d4>)
 800727a:	2200      	movs	r2, #0
 800727c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007280:	f7f9 f9da 	bl	8000638 <__aeabi_dmul>
 8007284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007288:	f7f9 fc5c 	bl	8000b44 <__aeabi_dcmpge>
 800728c:	2800      	cmp	r0, #0
 800728e:	f000 8157 	beq.w	8007540 <_dtoa_r+0x938>
 8007292:	2400      	movs	r4, #0
 8007294:	4625      	mov	r5, r4
 8007296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007298:	43db      	mvns	r3, r3
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	4656      	mov	r6, sl
 800729e:	2700      	movs	r7, #0
 80072a0:	4621      	mov	r1, r4
 80072a2:	4658      	mov	r0, fp
 80072a4:	f000 fbb4 	bl	8007a10 <_Bfree>
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	d0dc      	beq.n	8007266 <_dtoa_r+0x65e>
 80072ac:	b12f      	cbz	r7, 80072ba <_dtoa_r+0x6b2>
 80072ae:	42af      	cmp	r7, r5
 80072b0:	d003      	beq.n	80072ba <_dtoa_r+0x6b2>
 80072b2:	4639      	mov	r1, r7
 80072b4:	4658      	mov	r0, fp
 80072b6:	f000 fbab 	bl	8007a10 <_Bfree>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4658      	mov	r0, fp
 80072be:	f000 fba7 	bl	8007a10 <_Bfree>
 80072c2:	e7d0      	b.n	8007266 <_dtoa_r+0x65e>
 80072c4:	9704      	str	r7, [sp, #16]
 80072c6:	4633      	mov	r3, r6
 80072c8:	461e      	mov	r6, r3
 80072ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ce:	2a39      	cmp	r2, #57	@ 0x39
 80072d0:	d107      	bne.n	80072e2 <_dtoa_r+0x6da>
 80072d2:	459a      	cmp	sl, r3
 80072d4:	d1f8      	bne.n	80072c8 <_dtoa_r+0x6c0>
 80072d6:	9a04      	ldr	r2, [sp, #16]
 80072d8:	3201      	adds	r2, #1
 80072da:	9204      	str	r2, [sp, #16]
 80072dc:	2230      	movs	r2, #48	@ 0x30
 80072de:	f88a 2000 	strb.w	r2, [sl]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	3201      	adds	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e7bd      	b.n	8007266 <_dtoa_r+0x65e>
 80072ea:	4b7b      	ldr	r3, [pc, #492]	@ (80074d8 <_dtoa_r+0x8d0>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7f9 f9a3 	bl	8000638 <__aeabi_dmul>
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	f7f9 fc05 	bl	8000b08 <__aeabi_dcmpeq>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f aebb 	beq.w	800707a <_dtoa_r+0x472>
 8007304:	e6f0      	b.n	80070e8 <_dtoa_r+0x4e0>
 8007306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007308:	2a00      	cmp	r2, #0
 800730a:	f000 80db 	beq.w	80074c4 <_dtoa_r+0x8bc>
 800730e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007310:	2a01      	cmp	r2, #1
 8007312:	f300 80bf 	bgt.w	8007494 <_dtoa_r+0x88c>
 8007316:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007318:	2a00      	cmp	r2, #0
 800731a:	f000 80b7 	beq.w	800748c <_dtoa_r+0x884>
 800731e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007322:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007324:	4646      	mov	r6, r8
 8007326:	9a08      	ldr	r2, [sp, #32]
 8007328:	2101      	movs	r1, #1
 800732a:	441a      	add	r2, r3
 800732c:	4658      	mov	r0, fp
 800732e:	4498      	add	r8, r3
 8007330:	9208      	str	r2, [sp, #32]
 8007332:	f000 fc21 	bl	8007b78 <__i2b>
 8007336:	4605      	mov	r5, r0
 8007338:	b15e      	cbz	r6, 8007352 <_dtoa_r+0x74a>
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd08      	ble.n	8007352 <_dtoa_r+0x74a>
 8007340:	42b3      	cmp	r3, r6
 8007342:	9a08      	ldr	r2, [sp, #32]
 8007344:	bfa8      	it	ge
 8007346:	4633      	movge	r3, r6
 8007348:	eba8 0803 	sub.w	r8, r8, r3
 800734c:	1af6      	subs	r6, r6, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	9308      	str	r3, [sp, #32]
 8007352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007354:	b1f3      	cbz	r3, 8007394 <_dtoa_r+0x78c>
 8007356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80b7 	beq.w	80074cc <_dtoa_r+0x8c4>
 800735e:	b18c      	cbz	r4, 8007384 <_dtoa_r+0x77c>
 8007360:	4629      	mov	r1, r5
 8007362:	4622      	mov	r2, r4
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fcc7 	bl	8007cf8 <__pow5mult>
 800736a:	464a      	mov	r2, r9
 800736c:	4601      	mov	r1, r0
 800736e:	4605      	mov	r5, r0
 8007370:	4658      	mov	r0, fp
 8007372:	f000 fc17 	bl	8007ba4 <__multiply>
 8007376:	4649      	mov	r1, r9
 8007378:	9004      	str	r0, [sp, #16]
 800737a:	4658      	mov	r0, fp
 800737c:	f000 fb48 	bl	8007a10 <_Bfree>
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	4699      	mov	r9, r3
 8007384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007386:	1b1a      	subs	r2, r3, r4
 8007388:	d004      	beq.n	8007394 <_dtoa_r+0x78c>
 800738a:	4649      	mov	r1, r9
 800738c:	4658      	mov	r0, fp
 800738e:	f000 fcb3 	bl	8007cf8 <__pow5mult>
 8007392:	4681      	mov	r9, r0
 8007394:	2101      	movs	r1, #1
 8007396:	4658      	mov	r0, fp
 8007398:	f000 fbee 	bl	8007b78 <__i2b>
 800739c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800739e:	4604      	mov	r4, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 81cf 	beq.w	8007744 <_dtoa_r+0xb3c>
 80073a6:	461a      	mov	r2, r3
 80073a8:	4601      	mov	r1, r0
 80073aa:	4658      	mov	r0, fp
 80073ac:	f000 fca4 	bl	8007cf8 <__pow5mult>
 80073b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	4604      	mov	r4, r0
 80073b6:	f300 8095 	bgt.w	80074e4 <_dtoa_r+0x8dc>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 8087 	bne.w	80074d0 <_dtoa_r+0x8c8>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 8089 	bne.w	80074e0 <_dtoa_r+0x8d8>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073d4:	0d1b      	lsrs	r3, r3, #20
 80073d6:	051b      	lsls	r3, r3, #20
 80073d8:	b12b      	cbz	r3, 80073e6 <_dtoa_r+0x7de>
 80073da:	9b08      	ldr	r3, [sp, #32]
 80073dc:	3301      	adds	r3, #1
 80073de:	9308      	str	r3, [sp, #32]
 80073e0:	f108 0801 	add.w	r8, r8, #1
 80073e4:	2301      	movs	r3, #1
 80073e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 81b0 	beq.w	8007750 <_dtoa_r+0xb48>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073f6:	6918      	ldr	r0, [r3, #16]
 80073f8:	f000 fb72 	bl	8007ae0 <__hi0bits>
 80073fc:	f1c0 0020 	rsb	r0, r0, #32
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	4418      	add	r0, r3
 8007404:	f010 001f 	ands.w	r0, r0, #31
 8007408:	d077      	beq.n	80074fa <_dtoa_r+0x8f2>
 800740a:	f1c0 0320 	rsb	r3, r0, #32
 800740e:	2b04      	cmp	r3, #4
 8007410:	dd6b      	ble.n	80074ea <_dtoa_r+0x8e2>
 8007412:	9b08      	ldr	r3, [sp, #32]
 8007414:	f1c0 001c 	rsb	r0, r0, #28
 8007418:	4403      	add	r3, r0
 800741a:	4480      	add	r8, r0
 800741c:	4406      	add	r6, r0
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	dd05      	ble.n	8007432 <_dtoa_r+0x82a>
 8007426:	4649      	mov	r1, r9
 8007428:	4642      	mov	r2, r8
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fcbe 	bl	8007dac <__lshift>
 8007430:	4681      	mov	r9, r0
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dd05      	ble.n	8007444 <_dtoa_r+0x83c>
 8007438:	4621      	mov	r1, r4
 800743a:	461a      	mov	r2, r3
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fcb5 	bl	8007dac <__lshift>
 8007442:	4604      	mov	r4, r0
 8007444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007446:	2b00      	cmp	r3, #0
 8007448:	d059      	beq.n	80074fe <_dtoa_r+0x8f6>
 800744a:	4621      	mov	r1, r4
 800744c:	4648      	mov	r0, r9
 800744e:	f000 fd19 	bl	8007e84 <__mcmp>
 8007452:	2800      	cmp	r0, #0
 8007454:	da53      	bge.n	80074fe <_dtoa_r+0x8f6>
 8007456:	1e7b      	subs	r3, r7, #1
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	4649      	mov	r1, r9
 800745c:	2300      	movs	r3, #0
 800745e:	220a      	movs	r2, #10
 8007460:	4658      	mov	r0, fp
 8007462:	f000 faf7 	bl	8007a54 <__multadd>
 8007466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007468:	4681      	mov	r9, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8172 	beq.w	8007754 <_dtoa_r+0xb4c>
 8007470:	2300      	movs	r3, #0
 8007472:	4629      	mov	r1, r5
 8007474:	220a      	movs	r2, #10
 8007476:	4658      	mov	r0, fp
 8007478:	f000 faec 	bl	8007a54 <__multadd>
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	4605      	mov	r5, r0
 8007482:	dc67      	bgt.n	8007554 <_dtoa_r+0x94c>
 8007484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007486:	2b02      	cmp	r3, #2
 8007488:	dc41      	bgt.n	800750e <_dtoa_r+0x906>
 800748a:	e063      	b.n	8007554 <_dtoa_r+0x94c>
 800748c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800748e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007492:	e746      	b.n	8007322 <_dtoa_r+0x71a>
 8007494:	9b07      	ldr	r3, [sp, #28]
 8007496:	1e5c      	subs	r4, r3, #1
 8007498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800749a:	42a3      	cmp	r3, r4
 800749c:	bfbf      	itttt	lt
 800749e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074a4:	1ae3      	sublt	r3, r4, r3
 80074a6:	bfb4      	ite	lt
 80074a8:	18d2      	addlt	r2, r2, r3
 80074aa:	1b1c      	subge	r4, r3, r4
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	bfbc      	itt	lt
 80074b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074b2:	2400      	movlt	r4, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bfb5      	itete	lt
 80074b8:	eba8 0603 	sublt.w	r6, r8, r3
 80074bc:	9b07      	ldrge	r3, [sp, #28]
 80074be:	2300      	movlt	r3, #0
 80074c0:	4646      	movge	r6, r8
 80074c2:	e730      	b.n	8007326 <_dtoa_r+0x71e>
 80074c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074c8:	4646      	mov	r6, r8
 80074ca:	e735      	b.n	8007338 <_dtoa_r+0x730>
 80074cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ce:	e75c      	b.n	800738a <_dtoa_r+0x782>
 80074d0:	2300      	movs	r3, #0
 80074d2:	e788      	b.n	80073e6 <_dtoa_r+0x7de>
 80074d4:	3fe00000 	.word	0x3fe00000
 80074d8:	40240000 	.word	0x40240000
 80074dc:	40140000 	.word	0x40140000
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	e780      	b.n	80073e6 <_dtoa_r+0x7de>
 80074e4:	2300      	movs	r3, #0
 80074e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e8:	e782      	b.n	80073f0 <_dtoa_r+0x7e8>
 80074ea:	d099      	beq.n	8007420 <_dtoa_r+0x818>
 80074ec:	9a08      	ldr	r2, [sp, #32]
 80074ee:	331c      	adds	r3, #28
 80074f0:	441a      	add	r2, r3
 80074f2:	4498      	add	r8, r3
 80074f4:	441e      	add	r6, r3
 80074f6:	9208      	str	r2, [sp, #32]
 80074f8:	e792      	b.n	8007420 <_dtoa_r+0x818>
 80074fa:	4603      	mov	r3, r0
 80074fc:	e7f6      	b.n	80074ec <_dtoa_r+0x8e4>
 80074fe:	9b07      	ldr	r3, [sp, #28]
 8007500:	9704      	str	r7, [sp, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	dc20      	bgt.n	8007548 <_dtoa_r+0x940>
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750a:	2b02      	cmp	r3, #2
 800750c:	dd1e      	ble.n	800754c <_dtoa_r+0x944>
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f47f aec0 	bne.w	8007296 <_dtoa_r+0x68e>
 8007516:	4621      	mov	r1, r4
 8007518:	2205      	movs	r2, #5
 800751a:	4658      	mov	r0, fp
 800751c:	f000 fa9a 	bl	8007a54 <__multadd>
 8007520:	4601      	mov	r1, r0
 8007522:	4604      	mov	r4, r0
 8007524:	4648      	mov	r0, r9
 8007526:	f000 fcad 	bl	8007e84 <__mcmp>
 800752a:	2800      	cmp	r0, #0
 800752c:	f77f aeb3 	ble.w	8007296 <_dtoa_r+0x68e>
 8007530:	4656      	mov	r6, sl
 8007532:	2331      	movs	r3, #49	@ 0x31
 8007534:	f806 3b01 	strb.w	r3, [r6], #1
 8007538:	9b04      	ldr	r3, [sp, #16]
 800753a:	3301      	adds	r3, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	e6ae      	b.n	800729e <_dtoa_r+0x696>
 8007540:	9c07      	ldr	r4, [sp, #28]
 8007542:	9704      	str	r7, [sp, #16]
 8007544:	4625      	mov	r5, r4
 8007546:	e7f3      	b.n	8007530 <_dtoa_r+0x928>
 8007548:	9b07      	ldr	r3, [sp, #28]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8104 	beq.w	800775c <_dtoa_r+0xb54>
 8007554:	2e00      	cmp	r6, #0
 8007556:	dd05      	ble.n	8007564 <_dtoa_r+0x95c>
 8007558:	4629      	mov	r1, r5
 800755a:	4632      	mov	r2, r6
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fc25 	bl	8007dac <__lshift>
 8007562:	4605      	mov	r5, r0
 8007564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d05a      	beq.n	8007620 <_dtoa_r+0xa18>
 800756a:	6869      	ldr	r1, [r5, #4]
 800756c:	4658      	mov	r0, fp
 800756e:	f000 fa0f 	bl	8007990 <_Balloc>
 8007572:	4606      	mov	r6, r0
 8007574:	b928      	cbnz	r0, 8007582 <_dtoa_r+0x97a>
 8007576:	4b84      	ldr	r3, [pc, #528]	@ (8007788 <_dtoa_r+0xb80>)
 8007578:	4602      	mov	r2, r0
 800757a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800757e:	f7ff bb5a 	b.w	8006c36 <_dtoa_r+0x2e>
 8007582:	692a      	ldr	r2, [r5, #16]
 8007584:	3202      	adds	r2, #2
 8007586:	0092      	lsls	r2, r2, #2
 8007588:	f105 010c 	add.w	r1, r5, #12
 800758c:	300c      	adds	r0, #12
 800758e:	f000 ffaf 	bl	80084f0 <memcpy>
 8007592:	2201      	movs	r2, #1
 8007594:	4631      	mov	r1, r6
 8007596:	4658      	mov	r0, fp
 8007598:	f000 fc08 	bl	8007dac <__lshift>
 800759c:	f10a 0301 	add.w	r3, sl, #1
 80075a0:	9307      	str	r3, [sp, #28]
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	4453      	add	r3, sl
 80075a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075a8:	9b02      	ldr	r3, [sp, #8]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	462f      	mov	r7, r5
 80075b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b2:	4605      	mov	r5, r0
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	4621      	mov	r1, r4
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4648      	mov	r0, r9
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	f7ff fa9a 	bl	8006af6 <quorem>
 80075c2:	4639      	mov	r1, r7
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075ca:	4648      	mov	r0, r9
 80075cc:	f000 fc5a 	bl	8007e84 <__mcmp>
 80075d0:	462a      	mov	r2, r5
 80075d2:	9008      	str	r0, [sp, #32]
 80075d4:	4621      	mov	r1, r4
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 fc70 	bl	8007ebc <__mdiff>
 80075dc:	68c2      	ldr	r2, [r0, #12]
 80075de:	4606      	mov	r6, r0
 80075e0:	bb02      	cbnz	r2, 8007624 <_dtoa_r+0xa1c>
 80075e2:	4601      	mov	r1, r0
 80075e4:	4648      	mov	r0, r9
 80075e6:	f000 fc4d 	bl	8007e84 <__mcmp>
 80075ea:	4602      	mov	r2, r0
 80075ec:	4631      	mov	r1, r6
 80075ee:	4658      	mov	r0, fp
 80075f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075f2:	f000 fa0d 	bl	8007a10 <_Bfree>
 80075f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075fa:	9e07      	ldr	r6, [sp, #28]
 80075fc:	ea43 0102 	orr.w	r1, r3, r2
 8007600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007602:	4319      	orrs	r1, r3
 8007604:	d110      	bne.n	8007628 <_dtoa_r+0xa20>
 8007606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800760a:	d029      	beq.n	8007660 <_dtoa_r+0xa58>
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd02      	ble.n	8007618 <_dtoa_r+0xa10>
 8007612:	9b02      	ldr	r3, [sp, #8]
 8007614:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007618:	9b00      	ldr	r3, [sp, #0]
 800761a:	f883 8000 	strb.w	r8, [r3]
 800761e:	e63f      	b.n	80072a0 <_dtoa_r+0x698>
 8007620:	4628      	mov	r0, r5
 8007622:	e7bb      	b.n	800759c <_dtoa_r+0x994>
 8007624:	2201      	movs	r2, #1
 8007626:	e7e1      	b.n	80075ec <_dtoa_r+0x9e4>
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	2b00      	cmp	r3, #0
 800762c:	db04      	blt.n	8007638 <_dtoa_r+0xa30>
 800762e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007630:	430b      	orrs	r3, r1
 8007632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007634:	430b      	orrs	r3, r1
 8007636:	d120      	bne.n	800767a <_dtoa_r+0xa72>
 8007638:	2a00      	cmp	r2, #0
 800763a:	dded      	ble.n	8007618 <_dtoa_r+0xa10>
 800763c:	4649      	mov	r1, r9
 800763e:	2201      	movs	r2, #1
 8007640:	4658      	mov	r0, fp
 8007642:	f000 fbb3 	bl	8007dac <__lshift>
 8007646:	4621      	mov	r1, r4
 8007648:	4681      	mov	r9, r0
 800764a:	f000 fc1b 	bl	8007e84 <__mcmp>
 800764e:	2800      	cmp	r0, #0
 8007650:	dc03      	bgt.n	800765a <_dtoa_r+0xa52>
 8007652:	d1e1      	bne.n	8007618 <_dtoa_r+0xa10>
 8007654:	f018 0f01 	tst.w	r8, #1
 8007658:	d0de      	beq.n	8007618 <_dtoa_r+0xa10>
 800765a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800765e:	d1d8      	bne.n	8007612 <_dtoa_r+0xa0a>
 8007660:	9a00      	ldr	r2, [sp, #0]
 8007662:	2339      	movs	r3, #57	@ 0x39
 8007664:	7013      	strb	r3, [r2, #0]
 8007666:	4633      	mov	r3, r6
 8007668:	461e      	mov	r6, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007670:	2a39      	cmp	r2, #57	@ 0x39
 8007672:	d052      	beq.n	800771a <_dtoa_r+0xb12>
 8007674:	3201      	adds	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e612      	b.n	80072a0 <_dtoa_r+0x698>
 800767a:	2a00      	cmp	r2, #0
 800767c:	dd07      	ble.n	800768e <_dtoa_r+0xa86>
 800767e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007682:	d0ed      	beq.n	8007660 <_dtoa_r+0xa58>
 8007684:	9a00      	ldr	r2, [sp, #0]
 8007686:	f108 0301 	add.w	r3, r8, #1
 800768a:	7013      	strb	r3, [r2, #0]
 800768c:	e608      	b.n	80072a0 <_dtoa_r+0x698>
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	9a07      	ldr	r2, [sp, #28]
 8007692:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007698:	4293      	cmp	r3, r2
 800769a:	d028      	beq.n	80076ee <_dtoa_r+0xae6>
 800769c:	4649      	mov	r1, r9
 800769e:	2300      	movs	r3, #0
 80076a0:	220a      	movs	r2, #10
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 f9d6 	bl	8007a54 <__multadd>
 80076a8:	42af      	cmp	r7, r5
 80076aa:	4681      	mov	r9, r0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	f04f 020a 	mov.w	r2, #10
 80076b4:	4639      	mov	r1, r7
 80076b6:	4658      	mov	r0, fp
 80076b8:	d107      	bne.n	80076ca <_dtoa_r+0xac2>
 80076ba:	f000 f9cb 	bl	8007a54 <__multadd>
 80076be:	4607      	mov	r7, r0
 80076c0:	4605      	mov	r5, r0
 80076c2:	9b07      	ldr	r3, [sp, #28]
 80076c4:	3301      	adds	r3, #1
 80076c6:	9307      	str	r3, [sp, #28]
 80076c8:	e774      	b.n	80075b4 <_dtoa_r+0x9ac>
 80076ca:	f000 f9c3 	bl	8007a54 <__multadd>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4607      	mov	r7, r0
 80076d2:	2300      	movs	r3, #0
 80076d4:	220a      	movs	r2, #10
 80076d6:	4658      	mov	r0, fp
 80076d8:	f000 f9bc 	bl	8007a54 <__multadd>
 80076dc:	4605      	mov	r5, r0
 80076de:	e7f0      	b.n	80076c2 <_dtoa_r+0xaba>
 80076e0:	9b00      	ldr	r3, [sp, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfcc      	ite	gt
 80076e6:	461e      	movgt	r6, r3
 80076e8:	2601      	movle	r6, #1
 80076ea:	4456      	add	r6, sl
 80076ec:	2700      	movs	r7, #0
 80076ee:	4649      	mov	r1, r9
 80076f0:	2201      	movs	r2, #1
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fb5a 	bl	8007dac <__lshift>
 80076f8:	4621      	mov	r1, r4
 80076fa:	4681      	mov	r9, r0
 80076fc:	f000 fbc2 	bl	8007e84 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	dcb0      	bgt.n	8007666 <_dtoa_r+0xa5e>
 8007704:	d102      	bne.n	800770c <_dtoa_r+0xb04>
 8007706:	f018 0f01 	tst.w	r8, #1
 800770a:	d1ac      	bne.n	8007666 <_dtoa_r+0xa5e>
 800770c:	4633      	mov	r3, r6
 800770e:	461e      	mov	r6, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a30      	cmp	r2, #48	@ 0x30
 8007716:	d0fa      	beq.n	800770e <_dtoa_r+0xb06>
 8007718:	e5c2      	b.n	80072a0 <_dtoa_r+0x698>
 800771a:	459a      	cmp	sl, r3
 800771c:	d1a4      	bne.n	8007668 <_dtoa_r+0xa60>
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	3301      	adds	r3, #1
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	2331      	movs	r3, #49	@ 0x31
 8007726:	f88a 3000 	strb.w	r3, [sl]
 800772a:	e5b9      	b.n	80072a0 <_dtoa_r+0x698>
 800772c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800772e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800778c <_dtoa_r+0xb84>
 8007732:	b11b      	cbz	r3, 800773c <_dtoa_r+0xb34>
 8007734:	f10a 0308 	add.w	r3, sl, #8
 8007738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	4650      	mov	r0, sl
 800773e:	b019      	add	sp, #100	@ 0x64
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007746:	2b01      	cmp	r3, #1
 8007748:	f77f ae37 	ble.w	80073ba <_dtoa_r+0x7b2>
 800774c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007750:	2001      	movs	r0, #1
 8007752:	e655      	b.n	8007400 <_dtoa_r+0x7f8>
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f77f aed6 	ble.w	8007508 <_dtoa_r+0x900>
 800775c:	4656      	mov	r6, sl
 800775e:	4621      	mov	r1, r4
 8007760:	4648      	mov	r0, r9
 8007762:	f7ff f9c8 	bl	8006af6 <quorem>
 8007766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800776a:	f806 8b01 	strb.w	r8, [r6], #1
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	eba6 020a 	sub.w	r2, r6, sl
 8007774:	4293      	cmp	r3, r2
 8007776:	ddb3      	ble.n	80076e0 <_dtoa_r+0xad8>
 8007778:	4649      	mov	r1, r9
 800777a:	2300      	movs	r3, #0
 800777c:	220a      	movs	r2, #10
 800777e:	4658      	mov	r0, fp
 8007780:	f000 f968 	bl	8007a54 <__multadd>
 8007784:	4681      	mov	r9, r0
 8007786:	e7ea      	b.n	800775e <_dtoa_r+0xb56>
 8007788:	0800a4c8 	.word	0x0800a4c8
 800778c:	0800a44c 	.word	0x0800a44c

08007790 <_free_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4605      	mov	r5, r0
 8007794:	2900      	cmp	r1, #0
 8007796:	d041      	beq.n	800781c <_free_r+0x8c>
 8007798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779c:	1f0c      	subs	r4, r1, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bfb8      	it	lt
 80077a2:	18e4      	addlt	r4, r4, r3
 80077a4:	f000 f8e8 	bl	8007978 <__malloc_lock>
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <_free_r+0x90>)
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	b933      	cbnz	r3, 80077bc <_free_r+0x2c>
 80077ae:	6063      	str	r3, [r4, #4]
 80077b0:	6014      	str	r4, [r2, #0]
 80077b2:	4628      	mov	r0, r5
 80077b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b8:	f000 b8e4 	b.w	8007984 <__malloc_unlock>
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d908      	bls.n	80077d2 <_free_r+0x42>
 80077c0:	6820      	ldr	r0, [r4, #0]
 80077c2:	1821      	adds	r1, r4, r0
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf01      	itttt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	1809      	addeq	r1, r1, r0
 80077ce:	6021      	streq	r1, [r4, #0]
 80077d0:	e7ed      	b.n	80077ae <_free_r+0x1e>
 80077d2:	461a      	mov	r2, r3
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	b10b      	cbz	r3, 80077dc <_free_r+0x4c>
 80077d8:	42a3      	cmp	r3, r4
 80077da:	d9fa      	bls.n	80077d2 <_free_r+0x42>
 80077dc:	6811      	ldr	r1, [r2, #0]
 80077de:	1850      	adds	r0, r2, r1
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d10b      	bne.n	80077fc <_free_r+0x6c>
 80077e4:	6820      	ldr	r0, [r4, #0]
 80077e6:	4401      	add	r1, r0
 80077e8:	1850      	adds	r0, r2, r1
 80077ea:	4283      	cmp	r3, r0
 80077ec:	6011      	str	r1, [r2, #0]
 80077ee:	d1e0      	bne.n	80077b2 <_free_r+0x22>
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	6053      	str	r3, [r2, #4]
 80077f6:	4408      	add	r0, r1
 80077f8:	6010      	str	r0, [r2, #0]
 80077fa:	e7da      	b.n	80077b2 <_free_r+0x22>
 80077fc:	d902      	bls.n	8007804 <_free_r+0x74>
 80077fe:	230c      	movs	r3, #12
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	e7d6      	b.n	80077b2 <_free_r+0x22>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	1821      	adds	r1, r4, r0
 8007808:	428b      	cmp	r3, r1
 800780a:	bf04      	itt	eq
 800780c:	6819      	ldreq	r1, [r3, #0]
 800780e:	685b      	ldreq	r3, [r3, #4]
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	bf04      	itt	eq
 8007814:	1809      	addeq	r1, r1, r0
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	6054      	str	r4, [r2, #4]
 800781a:	e7ca      	b.n	80077b2 <_free_r+0x22>
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	bf00      	nop
 8007820:	20000438 	.word	0x20000438

08007824 <malloc>:
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <malloc+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f000 b825 	b.w	8007878 <_malloc_r>
 800782e:	bf00      	nop
 8007830:	20000028 	.word	0x20000028

08007834 <sbrk_aligned>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4e0f      	ldr	r6, [pc, #60]	@ (8007874 <sbrk_aligned+0x40>)
 8007838:	460c      	mov	r4, r1
 800783a:	6831      	ldr	r1, [r6, #0]
 800783c:	4605      	mov	r5, r0
 800783e:	b911      	cbnz	r1, 8007846 <sbrk_aligned+0x12>
 8007840:	f000 fe46 	bl	80084d0 <_sbrk_r>
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fe41 	bl	80084d0 <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d103      	bne.n	800785a <sbrk_aligned+0x26>
 8007852:	f04f 34ff 	mov.w	r4, #4294967295
 8007856:	4620      	mov	r0, r4
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d0f8      	beq.n	8007856 <sbrk_aligned+0x22>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fe32 	bl	80084d0 <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d1f2      	bne.n	8007856 <sbrk_aligned+0x22>
 8007870:	e7ef      	b.n	8007852 <sbrk_aligned+0x1e>
 8007872:	bf00      	nop
 8007874:	20000434 	.word	0x20000434

08007878 <_malloc_r>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	1ccd      	adds	r5, r1, #3
 800787e:	f025 0503 	bic.w	r5, r5, #3
 8007882:	3508      	adds	r5, #8
 8007884:	2d0c      	cmp	r5, #12
 8007886:	bf38      	it	cc
 8007888:	250c      	movcc	r5, #12
 800788a:	2d00      	cmp	r5, #0
 800788c:	4606      	mov	r6, r0
 800788e:	db01      	blt.n	8007894 <_malloc_r+0x1c>
 8007890:	42a9      	cmp	r1, r5
 8007892:	d904      	bls.n	800789e <_malloc_r+0x26>
 8007894:	230c      	movs	r3, #12
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	2000      	movs	r0, #0
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007974 <_malloc_r+0xfc>
 80078a2:	f000 f869 	bl	8007978 <__malloc_lock>
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	461c      	mov	r4, r3
 80078ac:	bb44      	cbnz	r4, 8007900 <_malloc_r+0x88>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff ffbf 	bl	8007834 <sbrk_aligned>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	4604      	mov	r4, r0
 80078ba:	d158      	bne.n	800796e <_malloc_r+0xf6>
 80078bc:	f8d8 4000 	ldr.w	r4, [r8]
 80078c0:	4627      	mov	r7, r4
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	d143      	bne.n	800794e <_malloc_r+0xd6>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d04b      	beq.n	8007962 <_malloc_r+0xea>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4639      	mov	r1, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	eb04 0903 	add.w	r9, r4, r3
 80078d4:	f000 fdfc 	bl	80084d0 <_sbrk_r>
 80078d8:	4581      	cmp	r9, r0
 80078da:	d142      	bne.n	8007962 <_malloc_r+0xea>
 80078dc:	6821      	ldr	r1, [r4, #0]
 80078de:	1a6d      	subs	r5, r5, r1
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffa6 	bl	8007834 <sbrk_aligned>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d03a      	beq.n	8007962 <_malloc_r+0xea>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	442b      	add	r3, r5
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	f8d8 3000 	ldr.w	r3, [r8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	bb62      	cbnz	r2, 8007954 <_malloc_r+0xdc>
 80078fa:	f8c8 7000 	str.w	r7, [r8]
 80078fe:	e00f      	b.n	8007920 <_malloc_r+0xa8>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	d420      	bmi.n	8007948 <_malloc_r+0xd0>
 8007906:	2a0b      	cmp	r2, #11
 8007908:	d917      	bls.n	800793a <_malloc_r+0xc2>
 800790a:	1961      	adds	r1, r4, r5
 800790c:	42a3      	cmp	r3, r4
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	6059      	strne	r1, [r3, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	bf08      	it	eq
 8007918:	f8c8 1000 	streq.w	r1, [r8]
 800791c:	5162      	str	r2, [r4, r5]
 800791e:	604b      	str	r3, [r1, #4]
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f82f 	bl	8007984 <__malloc_unlock>
 8007926:	f104 000b 	add.w	r0, r4, #11
 800792a:	1d23      	adds	r3, r4, #4
 800792c:	f020 0007 	bic.w	r0, r0, #7
 8007930:	1ac2      	subs	r2, r0, r3
 8007932:	bf1c      	itt	ne
 8007934:	1a1b      	subne	r3, r3, r0
 8007936:	50a3      	strne	r3, [r4, r2]
 8007938:	e7af      	b.n	800789a <_malloc_r+0x22>
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	42a3      	cmp	r3, r4
 800793e:	bf0c      	ite	eq
 8007940:	f8c8 2000 	streq.w	r2, [r8]
 8007944:	605a      	strne	r2, [r3, #4]
 8007946:	e7eb      	b.n	8007920 <_malloc_r+0xa8>
 8007948:	4623      	mov	r3, r4
 800794a:	6864      	ldr	r4, [r4, #4]
 800794c:	e7ae      	b.n	80078ac <_malloc_r+0x34>
 800794e:	463c      	mov	r4, r7
 8007950:	687f      	ldr	r7, [r7, #4]
 8007952:	e7b6      	b.n	80078c2 <_malloc_r+0x4a>
 8007954:	461a      	mov	r2, r3
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	42a3      	cmp	r3, r4
 800795a:	d1fb      	bne.n	8007954 <_malloc_r+0xdc>
 800795c:	2300      	movs	r3, #0
 800795e:	6053      	str	r3, [r2, #4]
 8007960:	e7de      	b.n	8007920 <_malloc_r+0xa8>
 8007962:	230c      	movs	r3, #12
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	4630      	mov	r0, r6
 8007968:	f000 f80c 	bl	8007984 <__malloc_unlock>
 800796c:	e794      	b.n	8007898 <_malloc_r+0x20>
 800796e:	6005      	str	r5, [r0, #0]
 8007970:	e7d6      	b.n	8007920 <_malloc_r+0xa8>
 8007972:	bf00      	nop
 8007974:	20000438 	.word	0x20000438

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_lock+0x8>)
 800797a:	f7ff b8ba 	b.w	8006af2 <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	20000430 	.word	0x20000430

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__malloc_unlock+0x8>)
 8007986:	f7ff b8b5 	b.w	8006af4 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	20000430 	.word	0x20000430

08007990 <_Balloc>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	69c6      	ldr	r6, [r0, #28]
 8007994:	4604      	mov	r4, r0
 8007996:	460d      	mov	r5, r1
 8007998:	b976      	cbnz	r6, 80079b8 <_Balloc+0x28>
 800799a:	2010      	movs	r0, #16
 800799c:	f7ff ff42 	bl	8007824 <malloc>
 80079a0:	4602      	mov	r2, r0
 80079a2:	61e0      	str	r0, [r4, #28]
 80079a4:	b920      	cbnz	r0, 80079b0 <_Balloc+0x20>
 80079a6:	4b18      	ldr	r3, [pc, #96]	@ (8007a08 <_Balloc+0x78>)
 80079a8:	4818      	ldr	r0, [pc, #96]	@ (8007a0c <_Balloc+0x7c>)
 80079aa:	216b      	movs	r1, #107	@ 0x6b
 80079ac:	f000 fdae 	bl	800850c <__assert_func>
 80079b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079b4:	6006      	str	r6, [r0, #0]
 80079b6:	60c6      	str	r6, [r0, #12]
 80079b8:	69e6      	ldr	r6, [r4, #28]
 80079ba:	68f3      	ldr	r3, [r6, #12]
 80079bc:	b183      	cbz	r3, 80079e0 <_Balloc+0x50>
 80079be:	69e3      	ldr	r3, [r4, #28]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079c6:	b9b8      	cbnz	r0, 80079f8 <_Balloc+0x68>
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f605 	lsl.w	r6, r1, r5
 80079ce:	1d72      	adds	r2, r6, #5
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fdb8 	bl	8008548 <_calloc_r>
 80079d8:	b160      	cbz	r0, 80079f4 <_Balloc+0x64>
 80079da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079de:	e00e      	b.n	80079fe <_Balloc+0x6e>
 80079e0:	2221      	movs	r2, #33	@ 0x21
 80079e2:	2104      	movs	r1, #4
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fdaf 	bl	8008548 <_calloc_r>
 80079ea:	69e3      	ldr	r3, [r4, #28]
 80079ec:	60f0      	str	r0, [r6, #12]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e4      	bne.n	80079be <_Balloc+0x2e>
 80079f4:	2000      	movs	r0, #0
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	6802      	ldr	r2, [r0, #0]
 80079fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079fe:	2300      	movs	r3, #0
 8007a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a04:	e7f7      	b.n	80079f6 <_Balloc+0x66>
 8007a06:	bf00      	nop
 8007a08:	0800a459 	.word	0x0800a459
 8007a0c:	0800a4d9 	.word	0x0800a4d9

08007a10 <_Bfree>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	69c6      	ldr	r6, [r0, #28]
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	b976      	cbnz	r6, 8007a38 <_Bfree+0x28>
 8007a1a:	2010      	movs	r0, #16
 8007a1c:	f7ff ff02 	bl	8007824 <malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	61e8      	str	r0, [r5, #28]
 8007a24:	b920      	cbnz	r0, 8007a30 <_Bfree+0x20>
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <_Bfree+0x3c>)
 8007a28:	4809      	ldr	r0, [pc, #36]	@ (8007a50 <_Bfree+0x40>)
 8007a2a:	218f      	movs	r1, #143	@ 0x8f
 8007a2c:	f000 fd6e 	bl	800850c <__assert_func>
 8007a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a34:	6006      	str	r6, [r0, #0]
 8007a36:	60c6      	str	r6, [r0, #12]
 8007a38:	b13c      	cbz	r4, 8007a4a <_Bfree+0x3a>
 8007a3a:	69eb      	ldr	r3, [r5, #28]
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a44:	6021      	str	r1, [r4, #0]
 8007a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	0800a459 	.word	0x0800a459
 8007a50:	0800a4d9 	.word	0x0800a4d9

08007a54 <__multadd>:
 8007a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a58:	690d      	ldr	r5, [r1, #16]
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461e      	mov	r6, r3
 8007a60:	f101 0c14 	add.w	ip, r1, #20
 8007a64:	2000      	movs	r0, #0
 8007a66:	f8dc 3000 	ldr.w	r3, [ip]
 8007a6a:	b299      	uxth	r1, r3
 8007a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a70:	0c1e      	lsrs	r6, r3, #16
 8007a72:	0c0b      	lsrs	r3, r1, #16
 8007a74:	fb02 3306 	mla	r3, r2, r6, r3
 8007a78:	b289      	uxth	r1, r1
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a80:	4285      	cmp	r5, r0
 8007a82:	f84c 1b04 	str.w	r1, [ip], #4
 8007a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a8a:	dcec      	bgt.n	8007a66 <__multadd+0x12>
 8007a8c:	b30e      	cbz	r6, 8007ad2 <__multadd+0x7e>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	dc19      	bgt.n	8007ac8 <__multadd+0x74>
 8007a94:	6861      	ldr	r1, [r4, #4]
 8007a96:	4638      	mov	r0, r7
 8007a98:	3101      	adds	r1, #1
 8007a9a:	f7ff ff79 	bl	8007990 <_Balloc>
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	b928      	cbnz	r0, 8007aae <__multadd+0x5a>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <__multadd+0x84>)
 8007aa6:	480d      	ldr	r0, [pc, #52]	@ (8007adc <__multadd+0x88>)
 8007aa8:	21ba      	movs	r1, #186	@ 0xba
 8007aaa:	f000 fd2f 	bl	800850c <__assert_func>
 8007aae:	6922      	ldr	r2, [r4, #16]
 8007ab0:	3202      	adds	r2, #2
 8007ab2:	f104 010c 	add.w	r1, r4, #12
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	300c      	adds	r0, #12
 8007aba:	f000 fd19 	bl	80084f0 <memcpy>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ffa5 	bl	8007a10 <_Bfree>
 8007ac6:	4644      	mov	r4, r8
 8007ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007acc:	3501      	adds	r5, #1
 8007ace:	615e      	str	r6, [r3, #20]
 8007ad0:	6125      	str	r5, [r4, #16]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	0800a4c8 	.word	0x0800a4c8
 8007adc:	0800a4d9 	.word	0x0800a4d9

08007ae0 <__hi0bits>:
 8007ae0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	bf36      	itet	cc
 8007ae8:	0403      	lslcc	r3, r0, #16
 8007aea:	2000      	movcs	r0, #0
 8007aec:	2010      	movcc	r0, #16
 8007aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007af2:	bf3c      	itt	cc
 8007af4:	021b      	lslcc	r3, r3, #8
 8007af6:	3008      	addcc	r0, #8
 8007af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007afc:	bf3c      	itt	cc
 8007afe:	011b      	lslcc	r3, r3, #4
 8007b00:	3004      	addcc	r0, #4
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	bf3c      	itt	cc
 8007b08:	009b      	lslcc	r3, r3, #2
 8007b0a:	3002      	addcc	r0, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db05      	blt.n	8007b1c <__hi0bits+0x3c>
 8007b10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b14:	f100 0001 	add.w	r0, r0, #1
 8007b18:	bf08      	it	eq
 8007b1a:	2020      	moveq	r0, #32
 8007b1c:	4770      	bx	lr

08007b1e <__lo0bits>:
 8007b1e:	6803      	ldr	r3, [r0, #0]
 8007b20:	4602      	mov	r2, r0
 8007b22:	f013 0007 	ands.w	r0, r3, #7
 8007b26:	d00b      	beq.n	8007b40 <__lo0bits+0x22>
 8007b28:	07d9      	lsls	r1, r3, #31
 8007b2a:	d421      	bmi.n	8007b70 <__lo0bits+0x52>
 8007b2c:	0798      	lsls	r0, r3, #30
 8007b2e:	bf49      	itett	mi
 8007b30:	085b      	lsrmi	r3, r3, #1
 8007b32:	089b      	lsrpl	r3, r3, #2
 8007b34:	2001      	movmi	r0, #1
 8007b36:	6013      	strmi	r3, [r2, #0]
 8007b38:	bf5c      	itt	pl
 8007b3a:	6013      	strpl	r3, [r2, #0]
 8007b3c:	2002      	movpl	r0, #2
 8007b3e:	4770      	bx	lr
 8007b40:	b299      	uxth	r1, r3
 8007b42:	b909      	cbnz	r1, 8007b48 <__lo0bits+0x2a>
 8007b44:	0c1b      	lsrs	r3, r3, #16
 8007b46:	2010      	movs	r0, #16
 8007b48:	b2d9      	uxtb	r1, r3
 8007b4a:	b909      	cbnz	r1, 8007b50 <__lo0bits+0x32>
 8007b4c:	3008      	adds	r0, #8
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	0719      	lsls	r1, r3, #28
 8007b52:	bf04      	itt	eq
 8007b54:	091b      	lsreq	r3, r3, #4
 8007b56:	3004      	addeq	r0, #4
 8007b58:	0799      	lsls	r1, r3, #30
 8007b5a:	bf04      	itt	eq
 8007b5c:	089b      	lsreq	r3, r3, #2
 8007b5e:	3002      	addeq	r0, #2
 8007b60:	07d9      	lsls	r1, r3, #31
 8007b62:	d403      	bmi.n	8007b6c <__lo0bits+0x4e>
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	f100 0001 	add.w	r0, r0, #1
 8007b6a:	d003      	beq.n	8007b74 <__lo0bits+0x56>
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	4770      	bx	lr
 8007b70:	2000      	movs	r0, #0
 8007b72:	4770      	bx	lr
 8007b74:	2020      	movs	r0, #32
 8007b76:	4770      	bx	lr

08007b78 <__i2b>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	f7ff ff07 	bl	8007990 <_Balloc>
 8007b82:	4602      	mov	r2, r0
 8007b84:	b928      	cbnz	r0, 8007b92 <__i2b+0x1a>
 8007b86:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <__i2b+0x24>)
 8007b88:	4805      	ldr	r0, [pc, #20]	@ (8007ba0 <__i2b+0x28>)
 8007b8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b8e:	f000 fcbd 	bl	800850c <__assert_func>
 8007b92:	2301      	movs	r3, #1
 8007b94:	6144      	str	r4, [r0, #20]
 8007b96:	6103      	str	r3, [r0, #16]
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	0800a4c8 	.word	0x0800a4c8
 8007ba0:	0800a4d9 	.word	0x0800a4d9

08007ba4 <__multiply>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	4614      	mov	r4, r2
 8007baa:	690a      	ldr	r2, [r1, #16]
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	bfa8      	it	ge
 8007bb2:	4623      	movge	r3, r4
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	bfa4      	itt	ge
 8007bb8:	460c      	movge	r4, r1
 8007bba:	461f      	movge	r7, r3
 8007bbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	6861      	ldr	r1, [r4, #4]
 8007bc8:	eb0a 0609 	add.w	r6, sl, r9
 8007bcc:	42b3      	cmp	r3, r6
 8007bce:	b085      	sub	sp, #20
 8007bd0:	bfb8      	it	lt
 8007bd2:	3101      	addlt	r1, #1
 8007bd4:	f7ff fedc 	bl	8007990 <_Balloc>
 8007bd8:	b930      	cbnz	r0, 8007be8 <__multiply+0x44>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4b44      	ldr	r3, [pc, #272]	@ (8007cf0 <__multiply+0x14c>)
 8007bde:	4845      	ldr	r0, [pc, #276]	@ (8007cf4 <__multiply+0x150>)
 8007be0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007be4:	f000 fc92 	bl	800850c <__assert_func>
 8007be8:	f100 0514 	add.w	r5, r0, #20
 8007bec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4543      	cmp	r3, r8
 8007bf6:	d321      	bcc.n	8007c3c <__multiply+0x98>
 8007bf8:	f107 0114 	add.w	r1, r7, #20
 8007bfc:	f104 0214 	add.w	r2, r4, #20
 8007c00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	1b13      	subs	r3, r2, r4
 8007c0c:	3b15      	subs	r3, #21
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	3304      	adds	r3, #4
 8007c14:	f104 0715 	add.w	r7, r4, #21
 8007c18:	42ba      	cmp	r2, r7
 8007c1a:	bf38      	it	cc
 8007c1c:	2304      	movcc	r3, #4
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	9b02      	ldr	r3, [sp, #8]
 8007c22:	9103      	str	r1, [sp, #12]
 8007c24:	428b      	cmp	r3, r1
 8007c26:	d80c      	bhi.n	8007c42 <__multiply+0x9e>
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	dd03      	ble.n	8007c34 <__multiply+0x90>
 8007c2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d05b      	beq.n	8007cec <__multiply+0x148>
 8007c34:	6106      	str	r6, [r0, #16]
 8007c36:	b005      	add	sp, #20
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	f843 2b04 	str.w	r2, [r3], #4
 8007c40:	e7d8      	b.n	8007bf4 <__multiply+0x50>
 8007c42:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c46:	f1ba 0f00 	cmp.w	sl, #0
 8007c4a:	d024      	beq.n	8007c96 <__multiply+0xf2>
 8007c4c:	f104 0e14 	add.w	lr, r4, #20
 8007c50:	46a9      	mov	r9, r5
 8007c52:	f04f 0c00 	mov.w	ip, #0
 8007c56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007c5e:	fa1f fb87 	uxth.w	fp, r7
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007c6c:	f8d9 7000 	ldr.w	r7, [r9]
 8007c70:	4463      	add	r3, ip
 8007c72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c76:	fb0a c70b 	mla	r7, sl, fp, ip
 8007c7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c84:	4572      	cmp	r2, lr
 8007c86:	f849 3b04 	str.w	r3, [r9], #4
 8007c8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c8e:	d8e2      	bhi.n	8007c56 <__multiply+0xb2>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f845 c003 	str.w	ip, [r5, r3]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c9c:	3104      	adds	r1, #4
 8007c9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ca2:	d021      	beq.n	8007ce8 <__multiply+0x144>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	f104 0c14 	add.w	ip, r4, #20
 8007caa:	46ae      	mov	lr, r5
 8007cac:	f04f 0a00 	mov.w	sl, #0
 8007cb0:	f8bc b000 	ldrh.w	fp, [ip]
 8007cb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cb8:	fb09 770b 	mla	r7, r9, fp, r7
 8007cbc:	4457      	add	r7, sl
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cc4:	f84e 3b04 	str.w	r3, [lr], #4
 8007cc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cd0:	f8be 3000 	ldrh.w	r3, [lr]
 8007cd4:	fb09 330a 	mla	r3, r9, sl, r3
 8007cd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007cdc:	4562      	cmp	r2, ip
 8007cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce2:	d8e5      	bhi.n	8007cb0 <__multiply+0x10c>
 8007ce4:	9f01      	ldr	r7, [sp, #4]
 8007ce6:	51eb      	str	r3, [r5, r7]
 8007ce8:	3504      	adds	r5, #4
 8007cea:	e799      	b.n	8007c20 <__multiply+0x7c>
 8007cec:	3e01      	subs	r6, #1
 8007cee:	e79b      	b.n	8007c28 <__multiply+0x84>
 8007cf0:	0800a4c8 	.word	0x0800a4c8
 8007cf4:	0800a4d9 	.word	0x0800a4d9

08007cf8 <__pow5mult>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	f012 0203 	ands.w	r2, r2, #3
 8007d02:	4607      	mov	r7, r0
 8007d04:	460e      	mov	r6, r1
 8007d06:	d007      	beq.n	8007d18 <__pow5mult+0x20>
 8007d08:	4c25      	ldr	r4, [pc, #148]	@ (8007da0 <__pow5mult+0xa8>)
 8007d0a:	3a01      	subs	r2, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d12:	f7ff fe9f 	bl	8007a54 <__multadd>
 8007d16:	4606      	mov	r6, r0
 8007d18:	10ad      	asrs	r5, r5, #2
 8007d1a:	d03d      	beq.n	8007d98 <__pow5mult+0xa0>
 8007d1c:	69fc      	ldr	r4, [r7, #28]
 8007d1e:	b97c      	cbnz	r4, 8007d40 <__pow5mult+0x48>
 8007d20:	2010      	movs	r0, #16
 8007d22:	f7ff fd7f 	bl	8007824 <malloc>
 8007d26:	4602      	mov	r2, r0
 8007d28:	61f8      	str	r0, [r7, #28]
 8007d2a:	b928      	cbnz	r0, 8007d38 <__pow5mult+0x40>
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007da4 <__pow5mult+0xac>)
 8007d2e:	481e      	ldr	r0, [pc, #120]	@ (8007da8 <__pow5mult+0xb0>)
 8007d30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d34:	f000 fbea 	bl	800850c <__assert_func>
 8007d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d3c:	6004      	str	r4, [r0, #0]
 8007d3e:	60c4      	str	r4, [r0, #12]
 8007d40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d48:	b94c      	cbnz	r4, 8007d5e <__pow5mult+0x66>
 8007d4a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ff12 	bl	8007b78 <__i2b>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	f04f 0900 	mov.w	r9, #0
 8007d62:	07eb      	lsls	r3, r5, #31
 8007d64:	d50a      	bpl.n	8007d7c <__pow5mult+0x84>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f7ff ff1a 	bl	8007ba4 <__multiply>
 8007d70:	4631      	mov	r1, r6
 8007d72:	4680      	mov	r8, r0
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff fe4b 	bl	8007a10 <_Bfree>
 8007d7a:	4646      	mov	r6, r8
 8007d7c:	106d      	asrs	r5, r5, #1
 8007d7e:	d00b      	beq.n	8007d98 <__pow5mult+0xa0>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	b938      	cbnz	r0, 8007d94 <__pow5mult+0x9c>
 8007d84:	4622      	mov	r2, r4
 8007d86:	4621      	mov	r1, r4
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ff0b 	bl	8007ba4 <__multiply>
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f8c0 9000 	str.w	r9, [r0]
 8007d94:	4604      	mov	r4, r0
 8007d96:	e7e4      	b.n	8007d62 <__pow5mult+0x6a>
 8007d98:	4630      	mov	r0, r6
 8007d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9e:	bf00      	nop
 8007da0:	0800a534 	.word	0x0800a534
 8007da4:	0800a459 	.word	0x0800a459
 8007da8:	0800a4d9 	.word	0x0800a4d9

08007dac <__lshift>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	460c      	mov	r4, r1
 8007db2:	6849      	ldr	r1, [r1, #4]
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dba:	68a3      	ldr	r3, [r4, #8]
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	4691      	mov	r9, r2
 8007dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dc4:	f108 0601 	add.w	r6, r8, #1
 8007dc8:	42b3      	cmp	r3, r6
 8007dca:	db0b      	blt.n	8007de4 <__lshift+0x38>
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff fddf 	bl	8007990 <_Balloc>
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	b948      	cbnz	r0, 8007dea <__lshift+0x3e>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <__lshift+0xd0>)
 8007dda:	4829      	ldr	r0, [pc, #164]	@ (8007e80 <__lshift+0xd4>)
 8007ddc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007de0:	f000 fb94 	bl	800850c <__assert_func>
 8007de4:	3101      	adds	r1, #1
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	e7ee      	b.n	8007dc8 <__lshift+0x1c>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f100 0114 	add.w	r1, r0, #20
 8007df0:	f100 0210 	add.w	r2, r0, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	4553      	cmp	r3, sl
 8007df8:	db33      	blt.n	8007e62 <__lshift+0xb6>
 8007dfa:	6920      	ldr	r0, [r4, #16]
 8007dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e00:	f104 0314 	add.w	r3, r4, #20
 8007e04:	f019 091f 	ands.w	r9, r9, #31
 8007e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e10:	d02b      	beq.n	8007e6a <__lshift+0xbe>
 8007e12:	f1c9 0e20 	rsb	lr, r9, #32
 8007e16:	468a      	mov	sl, r1
 8007e18:	2200      	movs	r2, #0
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e20:	4310      	orrs	r0, r2
 8007e22:	f84a 0b04 	str.w	r0, [sl], #4
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	459c      	cmp	ip, r3
 8007e2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e30:	d8f3      	bhi.n	8007e1a <__lshift+0x6e>
 8007e32:	ebac 0304 	sub.w	r3, ip, r4
 8007e36:	3b15      	subs	r3, #21
 8007e38:	f023 0303 	bic.w	r3, r3, #3
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	f104 0015 	add.w	r0, r4, #21
 8007e42:	4584      	cmp	ip, r0
 8007e44:	bf38      	it	cc
 8007e46:	2304      	movcc	r3, #4
 8007e48:	50ca      	str	r2, [r1, r3]
 8007e4a:	b10a      	cbz	r2, 8007e50 <__lshift+0xa4>
 8007e4c:	f108 0602 	add.w	r6, r8, #2
 8007e50:	3e01      	subs	r6, #1
 8007e52:	4638      	mov	r0, r7
 8007e54:	612e      	str	r6, [r5, #16]
 8007e56:	4621      	mov	r1, r4
 8007e58:	f7ff fdda 	bl	8007a10 <_Bfree>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e66:	3301      	adds	r3, #1
 8007e68:	e7c5      	b.n	8007df6 <__lshift+0x4a>
 8007e6a:	3904      	subs	r1, #4
 8007e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e74:	459c      	cmp	ip, r3
 8007e76:	d8f9      	bhi.n	8007e6c <__lshift+0xc0>
 8007e78:	e7ea      	b.n	8007e50 <__lshift+0xa4>
 8007e7a:	bf00      	nop
 8007e7c:	0800a4c8 	.word	0x0800a4c8
 8007e80:	0800a4d9 	.word	0x0800a4d9

08007e84 <__mcmp>:
 8007e84:	690a      	ldr	r2, [r1, #16]
 8007e86:	4603      	mov	r3, r0
 8007e88:	6900      	ldr	r0, [r0, #16]
 8007e8a:	1a80      	subs	r0, r0, r2
 8007e8c:	b530      	push	{r4, r5, lr}
 8007e8e:	d10e      	bne.n	8007eae <__mcmp+0x2a>
 8007e90:	3314      	adds	r3, #20
 8007e92:	3114      	adds	r1, #20
 8007e94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ea4:	4295      	cmp	r5, r2
 8007ea6:	d003      	beq.n	8007eb0 <__mcmp+0x2c>
 8007ea8:	d205      	bcs.n	8007eb6 <__mcmp+0x32>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	bd30      	pop	{r4, r5, pc}
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d3f3      	bcc.n	8007e9c <__mcmp+0x18>
 8007eb4:	e7fb      	b.n	8007eae <__mcmp+0x2a>
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	e7f9      	b.n	8007eae <__mcmp+0x2a>
	...

08007ebc <__mdiff>:
 8007ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	4614      	mov	r4, r2
 8007eca:	f7ff ffdb 	bl	8007e84 <__mcmp>
 8007ece:	1e05      	subs	r5, r0, #0
 8007ed0:	d112      	bne.n	8007ef8 <__mdiff+0x3c>
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff fd5b 	bl	8007990 <_Balloc>
 8007eda:	4602      	mov	r2, r0
 8007edc:	b928      	cbnz	r0, 8007eea <__mdiff+0x2e>
 8007ede:	4b3f      	ldr	r3, [pc, #252]	@ (8007fdc <__mdiff+0x120>)
 8007ee0:	f240 2137 	movw	r1, #567	@ 0x237
 8007ee4:	483e      	ldr	r0, [pc, #248]	@ (8007fe0 <__mdiff+0x124>)
 8007ee6:	f000 fb11 	bl	800850c <__assert_func>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	bfbc      	itt	lt
 8007efa:	464b      	movlt	r3, r9
 8007efc:	46a1      	movlt	r9, r4
 8007efe:	4630      	mov	r0, r6
 8007f00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f04:	bfba      	itte	lt
 8007f06:	461c      	movlt	r4, r3
 8007f08:	2501      	movlt	r5, #1
 8007f0a:	2500      	movge	r5, #0
 8007f0c:	f7ff fd40 	bl	8007990 <_Balloc>
 8007f10:	4602      	mov	r2, r0
 8007f12:	b918      	cbnz	r0, 8007f1c <__mdiff+0x60>
 8007f14:	4b31      	ldr	r3, [pc, #196]	@ (8007fdc <__mdiff+0x120>)
 8007f16:	f240 2145 	movw	r1, #581	@ 0x245
 8007f1a:	e7e3      	b.n	8007ee4 <__mdiff+0x28>
 8007f1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f20:	6926      	ldr	r6, [r4, #16]
 8007f22:	60c5      	str	r5, [r0, #12]
 8007f24:	f109 0310 	add.w	r3, r9, #16
 8007f28:	f109 0514 	add.w	r5, r9, #20
 8007f2c:	f104 0e14 	add.w	lr, r4, #20
 8007f30:	f100 0b14 	add.w	fp, r0, #20
 8007f34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	46d9      	mov	r9, fp
 8007f40:	f04f 0c00 	mov.w	ip, #0
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	fa1f f38a 	uxth.w	r3, sl
 8007f54:	4619      	mov	r1, r3
 8007f56:	b283      	uxth	r3, r0
 8007f58:	1acb      	subs	r3, r1, r3
 8007f5a:	0c00      	lsrs	r0, r0, #16
 8007f5c:	4463      	add	r3, ip
 8007f5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f6c:	4576      	cmp	r6, lr
 8007f6e:	f849 3b04 	str.w	r3, [r9], #4
 8007f72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f76:	d8e5      	bhi.n	8007f44 <__mdiff+0x88>
 8007f78:	1b33      	subs	r3, r6, r4
 8007f7a:	3b15      	subs	r3, #21
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	3415      	adds	r4, #21
 8007f82:	3304      	adds	r3, #4
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	bf38      	it	cc
 8007f88:	2304      	movcc	r3, #4
 8007f8a:	441d      	add	r5, r3
 8007f8c:	445b      	add	r3, fp
 8007f8e:	461e      	mov	r6, r3
 8007f90:	462c      	mov	r4, r5
 8007f92:	4544      	cmp	r4, r8
 8007f94:	d30e      	bcc.n	8007fb4 <__mdiff+0xf8>
 8007f96:	f108 0103 	add.w	r1, r8, #3
 8007f9a:	1b49      	subs	r1, r1, r5
 8007f9c:	f021 0103 	bic.w	r1, r1, #3
 8007fa0:	3d03      	subs	r5, #3
 8007fa2:	45a8      	cmp	r8, r5
 8007fa4:	bf38      	it	cc
 8007fa6:	2100      	movcc	r1, #0
 8007fa8:	440b      	add	r3, r1
 8007faa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fae:	b191      	cbz	r1, 8007fd6 <__mdiff+0x11a>
 8007fb0:	6117      	str	r7, [r2, #16]
 8007fb2:	e79d      	b.n	8007ef0 <__mdiff+0x34>
 8007fb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fb8:	46e6      	mov	lr, ip
 8007fba:	0c08      	lsrs	r0, r1, #16
 8007fbc:	fa1c fc81 	uxtah	ip, ip, r1
 8007fc0:	4471      	add	r1, lr
 8007fc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fcc:	f846 1b04 	str.w	r1, [r6], #4
 8007fd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fd4:	e7dd      	b.n	8007f92 <__mdiff+0xd6>
 8007fd6:	3f01      	subs	r7, #1
 8007fd8:	e7e7      	b.n	8007faa <__mdiff+0xee>
 8007fda:	bf00      	nop
 8007fdc:	0800a4c8 	.word	0x0800a4c8
 8007fe0:	0800a4d9 	.word	0x0800a4d9

08007fe4 <__d2b>:
 8007fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	460f      	mov	r7, r1
 8007fea:	2101      	movs	r1, #1
 8007fec:	ec59 8b10 	vmov	r8, r9, d0
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	f7ff fccd 	bl	8007990 <_Balloc>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	b930      	cbnz	r0, 8008008 <__d2b+0x24>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4b23      	ldr	r3, [pc, #140]	@ (800808c <__d2b+0xa8>)
 8007ffe:	4824      	ldr	r0, [pc, #144]	@ (8008090 <__d2b+0xac>)
 8008000:	f240 310f 	movw	r1, #783	@ 0x30f
 8008004:	f000 fa82 	bl	800850c <__assert_func>
 8008008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800800c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008010:	b10d      	cbz	r5, 8008016 <__d2b+0x32>
 8008012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	f1b8 0300 	subs.w	r3, r8, #0
 800801c:	d023      	beq.n	8008066 <__d2b+0x82>
 800801e:	4668      	mov	r0, sp
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	f7ff fd7c 	bl	8007b1e <__lo0bits>
 8008026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800802a:	b1d0      	cbz	r0, 8008062 <__d2b+0x7e>
 800802c:	f1c0 0320 	rsb	r3, r0, #32
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	430b      	orrs	r3, r1
 8008036:	40c2      	lsrs	r2, r0
 8008038:	6163      	str	r3, [r4, #20]
 800803a:	9201      	str	r2, [sp, #4]
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	bf0c      	ite	eq
 8008044:	2201      	moveq	r2, #1
 8008046:	2202      	movne	r2, #2
 8008048:	6122      	str	r2, [r4, #16]
 800804a:	b1a5      	cbz	r5, 8008076 <__d2b+0x92>
 800804c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008050:	4405      	add	r5, r0
 8008052:	603d      	str	r5, [r7, #0]
 8008054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008058:	6030      	str	r0, [r6, #0]
 800805a:	4620      	mov	r0, r4
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008062:	6161      	str	r1, [r4, #20]
 8008064:	e7ea      	b.n	800803c <__d2b+0x58>
 8008066:	a801      	add	r0, sp, #4
 8008068:	f7ff fd59 	bl	8007b1e <__lo0bits>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	3020      	adds	r0, #32
 8008072:	2201      	movs	r2, #1
 8008074:	e7e8      	b.n	8008048 <__d2b+0x64>
 8008076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800807a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800807e:	6038      	str	r0, [r7, #0]
 8008080:	6918      	ldr	r0, [r3, #16]
 8008082:	f7ff fd2d 	bl	8007ae0 <__hi0bits>
 8008086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800808a:	e7e5      	b.n	8008058 <__d2b+0x74>
 800808c:	0800a4c8 	.word	0x0800a4c8
 8008090:	0800a4d9 	.word	0x0800a4d9

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	688e      	ldr	r6, [r1, #8]
 800809a:	461f      	mov	r7, r3
 800809c:	42be      	cmp	r6, r7
 800809e:	680b      	ldr	r3, [r1, #0]
 80080a0:	4682      	mov	sl, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4690      	mov	r8, r2
 80080a6:	d82d      	bhi.n	8008104 <__ssputs_r+0x70>
 80080a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b0:	d026      	beq.n	8008100 <__ssputs_r+0x6c>
 80080b2:	6965      	ldr	r5, [r4, #20]
 80080b4:	6909      	ldr	r1, [r1, #16]
 80080b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ba:	eba3 0901 	sub.w	r9, r3, r1
 80080be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c2:	1c7b      	adds	r3, r7, #1
 80080c4:	444b      	add	r3, r9
 80080c6:	106d      	asrs	r5, r5, #1
 80080c8:	429d      	cmp	r5, r3
 80080ca:	bf38      	it	cc
 80080cc:	461d      	movcc	r5, r3
 80080ce:	0553      	lsls	r3, r2, #21
 80080d0:	d527      	bpl.n	8008122 <__ssputs_r+0x8e>
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7ff fbd0 	bl	8007878 <_malloc_r>
 80080d8:	4606      	mov	r6, r0
 80080da:	b360      	cbz	r0, 8008136 <__ssputs_r+0xa2>
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	464a      	mov	r2, r9
 80080e0:	f000 fa06 	bl	80084f0 <memcpy>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	6126      	str	r6, [r4, #16]
 80080f2:	6165      	str	r5, [r4, #20]
 80080f4:	444e      	add	r6, r9
 80080f6:	eba5 0509 	sub.w	r5, r5, r9
 80080fa:	6026      	str	r6, [r4, #0]
 80080fc:	60a5      	str	r5, [r4, #8]
 80080fe:	463e      	mov	r6, r7
 8008100:	42be      	cmp	r6, r7
 8008102:	d900      	bls.n	8008106 <__ssputs_r+0x72>
 8008104:	463e      	mov	r6, r7
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	4632      	mov	r2, r6
 800810a:	4641      	mov	r1, r8
 800810c:	f000 f9c6 	bl	800849c <memmove>
 8008110:	68a3      	ldr	r3, [r4, #8]
 8008112:	1b9b      	subs	r3, r3, r6
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	4433      	add	r3, r6
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	462a      	mov	r2, r5
 8008124:	f000 fa36 	bl	8008594 <_realloc_r>
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e0      	bne.n	80080f0 <__ssputs_r+0x5c>
 800812e:	6921      	ldr	r1, [r4, #16]
 8008130:	4650      	mov	r0, sl
 8008132:	f7ff fb2d 	bl	8007790 <_free_r>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e7e9      	b.n	800811e <__ssputs_r+0x8a>
	...

0800814c <_svfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4698      	mov	r8, r3
 8008152:	898b      	ldrh	r3, [r1, #12]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	b09d      	sub	sp, #116	@ 0x74
 8008158:	4607      	mov	r7, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4614      	mov	r4, r2
 800815e:	d510      	bpl.n	8008182 <_svfiprintf_r+0x36>
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b973      	cbnz	r3, 8008182 <_svfiprintf_r+0x36>
 8008164:	2140      	movs	r1, #64	@ 0x40
 8008166:	f7ff fb87 	bl	8007878 <_malloc_r>
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	6128      	str	r0, [r5, #16]
 800816e:	b930      	cbnz	r0, 800817e <_svfiprintf_r+0x32>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	@ 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	2340      	movs	r3, #64	@ 0x40
 8008180:	616b      	str	r3, [r5, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	2320      	movs	r3, #32
 8008188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800818c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008190:	2330      	movs	r3, #48	@ 0x30
 8008192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008330 <_svfiprintf_r+0x1e4>
 8008196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819a:	f04f 0901 	mov.w	r9, #1
 800819e:	4623      	mov	r3, r4
 80081a0:	469a      	mov	sl, r3
 80081a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a6:	b10a      	cbz	r2, 80081ac <_svfiprintf_r+0x60>
 80081a8:	2a25      	cmp	r2, #37	@ 0x25
 80081aa:	d1f9      	bne.n	80081a0 <_svfiprintf_r+0x54>
 80081ac:	ebba 0b04 	subs.w	fp, sl, r4
 80081b0:	d00b      	beq.n	80081ca <_svfiprintf_r+0x7e>
 80081b2:	465b      	mov	r3, fp
 80081b4:	4622      	mov	r2, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff6b 	bl	8008094 <__ssputs_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	f000 80a7 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c6:	445a      	add	r2, fp
 80081c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 809f 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081de:	f10a 0a01 	add.w	sl, sl, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80081ec:	4654      	mov	r4, sl
 80081ee:	2205      	movs	r2, #5
 80081f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f4:	484e      	ldr	r0, [pc, #312]	@ (8008330 <_svfiprintf_r+0x1e4>)
 80081f6:	f7f8 f80b 	bl	8000210 <memchr>
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	b9d8      	cbnz	r0, 8008236 <_svfiprintf_r+0xea>
 80081fe:	06d0      	lsls	r0, r2, #27
 8008200:	bf44      	itt	mi
 8008202:	2320      	movmi	r3, #32
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008208:	0711      	lsls	r1, r2, #28
 800820a:	bf44      	itt	mi
 800820c:	232b      	movmi	r3, #43	@ 0x2b
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b2a      	cmp	r3, #42	@ 0x2a
 8008218:	d015      	beq.n	8008246 <_svfiprintf_r+0xfa>
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	4654      	mov	r4, sl
 800821e:	2000      	movs	r0, #0
 8008220:	f04f 0c0a 	mov.w	ip, #10
 8008224:	4621      	mov	r1, r4
 8008226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822a:	3b30      	subs	r3, #48	@ 0x30
 800822c:	2b09      	cmp	r3, #9
 800822e:	d94b      	bls.n	80082c8 <_svfiprintf_r+0x17c>
 8008230:	b1b0      	cbz	r0, 8008260 <_svfiprintf_r+0x114>
 8008232:	9207      	str	r2, [sp, #28]
 8008234:	e014      	b.n	8008260 <_svfiprintf_r+0x114>
 8008236:	eba0 0308 	sub.w	r3, r0, r8
 800823a:	fa09 f303 	lsl.w	r3, r9, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	46a2      	mov	sl, r4
 8008244:	e7d2      	b.n	80081ec <_svfiprintf_r+0xa0>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbb      	ittet	lt
 8008252:	425b      	neglt	r3, r3
 8008254:	f042 0202 	orrlt.w	r2, r2, #2
 8008258:	9307      	strge	r3, [sp, #28]
 800825a:	9307      	strlt	r3, [sp, #28]
 800825c:	bfb8      	it	lt
 800825e:	9204      	strlt	r2, [sp, #16]
 8008260:	7823      	ldrb	r3, [r4, #0]
 8008262:	2b2e      	cmp	r3, #46	@ 0x2e
 8008264:	d10a      	bne.n	800827c <_svfiprintf_r+0x130>
 8008266:	7863      	ldrb	r3, [r4, #1]
 8008268:	2b2a      	cmp	r3, #42	@ 0x2a
 800826a:	d132      	bne.n	80082d2 <_svfiprintf_r+0x186>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	9203      	str	r2, [sp, #12]
 8008274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008278:	3402      	adds	r4, #2
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008340 <_svfiprintf_r+0x1f4>
 8008280:	7821      	ldrb	r1, [r4, #0]
 8008282:	2203      	movs	r2, #3
 8008284:	4650      	mov	r0, sl
 8008286:	f7f7 ffc3 	bl	8000210 <memchr>
 800828a:	b138      	cbz	r0, 800829c <_svfiprintf_r+0x150>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	eba0 000a 	sub.w	r0, r0, sl
 8008292:	2240      	movs	r2, #64	@ 0x40
 8008294:	4082      	lsls	r2, r0
 8008296:	4313      	orrs	r3, r2
 8008298:	3401      	adds	r4, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	4824      	ldr	r0, [pc, #144]	@ (8008334 <_svfiprintf_r+0x1e8>)
 80082a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082a6:	2206      	movs	r2, #6
 80082a8:	f7f7 ffb2 	bl	8000210 <memchr>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d036      	beq.n	800831e <_svfiprintf_r+0x1d2>
 80082b0:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <_svfiprintf_r+0x1ec>)
 80082b2:	bb1b      	cbnz	r3, 80082fc <_svfiprintf_r+0x1b0>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	3307      	adds	r3, #7
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	3308      	adds	r3, #8
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	4433      	add	r3, r6
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	e76a      	b.n	800819e <_svfiprintf_r+0x52>
 80082c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082cc:	460c      	mov	r4, r1
 80082ce:	2001      	movs	r0, #1
 80082d0:	e7a8      	b.n	8008224 <_svfiprintf_r+0xd8>
 80082d2:	2300      	movs	r3, #0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	4619      	mov	r1, r3
 80082da:	f04f 0c0a 	mov.w	ip, #10
 80082de:	4620      	mov	r0, r4
 80082e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e4:	3a30      	subs	r2, #48	@ 0x30
 80082e6:	2a09      	cmp	r2, #9
 80082e8:	d903      	bls.n	80082f2 <_svfiprintf_r+0x1a6>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0c6      	beq.n	800827c <_svfiprintf_r+0x130>
 80082ee:	9105      	str	r1, [sp, #20]
 80082f0:	e7c4      	b.n	800827c <_svfiprintf_r+0x130>
 80082f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f6:	4604      	mov	r4, r0
 80082f8:	2301      	movs	r3, #1
 80082fa:	e7f0      	b.n	80082de <_svfiprintf_r+0x192>
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4b0e      	ldr	r3, [pc, #56]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4638      	mov	r0, r7
 8008308:	f7fd fe84 	bl	8006014 <_printf_float>
 800830c:	1c42      	adds	r2, r0, #1
 800830e:	4606      	mov	r6, r0
 8008310:	d1d6      	bne.n	80082c0 <_svfiprintf_r+0x174>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	065b      	lsls	r3, r3, #25
 8008316:	f53f af2d 	bmi.w	8008174 <_svfiprintf_r+0x28>
 800831a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800831c:	e72c      	b.n	8008178 <_svfiprintf_r+0x2c>
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	4638      	mov	r0, r7
 800832a:	f7fe f90b 	bl	8006544 <_printf_i>
 800832e:	e7ed      	b.n	800830c <_svfiprintf_r+0x1c0>
 8008330:	0800a630 	.word	0x0800a630
 8008334:	0800a63a 	.word	0x0800a63a
 8008338:	08006015 	.word	0x08006015
 800833c:	08008095 	.word	0x08008095
 8008340:	0800a636 	.word	0x0800a636

08008344 <__sflush_r>:
 8008344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	0716      	lsls	r6, r2, #28
 800834e:	4605      	mov	r5, r0
 8008350:	460c      	mov	r4, r1
 8008352:	d454      	bmi.n	80083fe <__sflush_r+0xba>
 8008354:	684b      	ldr	r3, [r1, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	dc02      	bgt.n	8008360 <__sflush_r+0x1c>
 800835a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd48      	ble.n	80083f2 <__sflush_r+0xae>
 8008360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008362:	2e00      	cmp	r6, #0
 8008364:	d045      	beq.n	80083f2 <__sflush_r+0xae>
 8008366:	2300      	movs	r3, #0
 8008368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800836c:	682f      	ldr	r7, [r5, #0]
 800836e:	6a21      	ldr	r1, [r4, #32]
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	d030      	beq.n	80083d6 <__sflush_r+0x92>
 8008374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0759      	lsls	r1, r3, #29
 800837a:	d505      	bpl.n	8008388 <__sflush_r+0x44>
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008382:	b10b      	cbz	r3, 8008388 <__sflush_r+0x44>
 8008384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008386:	1ad2      	subs	r2, r2, r3
 8008388:	2300      	movs	r3, #0
 800838a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	4628      	mov	r0, r5
 8008390:	47b0      	blx	r6
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	d106      	bne.n	80083a6 <__sflush_r+0x62>
 8008398:	6829      	ldr	r1, [r5, #0]
 800839a:	291d      	cmp	r1, #29
 800839c:	d82b      	bhi.n	80083f6 <__sflush_r+0xb2>
 800839e:	4a2a      	ldr	r2, [pc, #168]	@ (8008448 <__sflush_r+0x104>)
 80083a0:	410a      	asrs	r2, r1
 80083a2:	07d6      	lsls	r6, r2, #31
 80083a4:	d427      	bmi.n	80083f6 <__sflush_r+0xb2>
 80083a6:	2200      	movs	r2, #0
 80083a8:	6062      	str	r2, [r4, #4]
 80083aa:	04d9      	lsls	r1, r3, #19
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	6022      	str	r2, [r4, #0]
 80083b0:	d504      	bpl.n	80083bc <__sflush_r+0x78>
 80083b2:	1c42      	adds	r2, r0, #1
 80083b4:	d101      	bne.n	80083ba <__sflush_r+0x76>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b903      	cbnz	r3, 80083bc <__sflush_r+0x78>
 80083ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80083bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083be:	602f      	str	r7, [r5, #0]
 80083c0:	b1b9      	cbz	r1, 80083f2 <__sflush_r+0xae>
 80083c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c6:	4299      	cmp	r1, r3
 80083c8:	d002      	beq.n	80083d0 <__sflush_r+0x8c>
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7ff f9e0 	bl	8007790 <_free_r>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d4:	e00d      	b.n	80083f2 <__sflush_r+0xae>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4628      	mov	r0, r5
 80083da:	47b0      	blx	r6
 80083dc:	4602      	mov	r2, r0
 80083de:	1c50      	adds	r0, r2, #1
 80083e0:	d1c9      	bne.n	8008376 <__sflush_r+0x32>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <__sflush_r+0x32>
 80083e8:	2b1d      	cmp	r3, #29
 80083ea:	d001      	beq.n	80083f0 <__sflush_r+0xac>
 80083ec:	2b16      	cmp	r3, #22
 80083ee:	d11e      	bne.n	800842e <__sflush_r+0xea>
 80083f0:	602f      	str	r7, [r5, #0]
 80083f2:	2000      	movs	r0, #0
 80083f4:	e022      	b.n	800843c <__sflush_r+0xf8>
 80083f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	e01b      	b.n	8008436 <__sflush_r+0xf2>
 80083fe:	690f      	ldr	r7, [r1, #16]
 8008400:	2f00      	cmp	r7, #0
 8008402:	d0f6      	beq.n	80083f2 <__sflush_r+0xae>
 8008404:	0793      	lsls	r3, r2, #30
 8008406:	680e      	ldr	r6, [r1, #0]
 8008408:	bf08      	it	eq
 800840a:	694b      	ldreq	r3, [r1, #20]
 800840c:	600f      	str	r7, [r1, #0]
 800840e:	bf18      	it	ne
 8008410:	2300      	movne	r3, #0
 8008412:	eba6 0807 	sub.w	r8, r6, r7
 8008416:	608b      	str	r3, [r1, #8]
 8008418:	f1b8 0f00 	cmp.w	r8, #0
 800841c:	dde9      	ble.n	80083f2 <__sflush_r+0xae>
 800841e:	6a21      	ldr	r1, [r4, #32]
 8008420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008422:	4643      	mov	r3, r8
 8008424:	463a      	mov	r2, r7
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	2800      	cmp	r0, #0
 800842c:	dc08      	bgt.n	8008440 <__sflush_r+0xfc>
 800842e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008440:	4407      	add	r7, r0
 8008442:	eba8 0800 	sub.w	r8, r8, r0
 8008446:	e7e7      	b.n	8008418 <__sflush_r+0xd4>
 8008448:	dfbffffe 	.word	0xdfbffffe

0800844c <_fflush_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	690b      	ldr	r3, [r1, #16]
 8008450:	4605      	mov	r5, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b913      	cbnz	r3, 800845c <_fflush_r+0x10>
 8008456:	2500      	movs	r5, #0
 8008458:	4628      	mov	r0, r5
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	b118      	cbz	r0, 8008466 <_fflush_r+0x1a>
 800845e:	6a03      	ldr	r3, [r0, #32]
 8008460:	b90b      	cbnz	r3, 8008466 <_fflush_r+0x1a>
 8008462:	f7fe fa1b 	bl	800689c <__sinit>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f3      	beq.n	8008456 <_fflush_r+0xa>
 800846e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008470:	07d0      	lsls	r0, r2, #31
 8008472:	d404      	bmi.n	800847e <_fflush_r+0x32>
 8008474:	0599      	lsls	r1, r3, #22
 8008476:	d402      	bmi.n	800847e <_fflush_r+0x32>
 8008478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847a:	f7fe fb3a 	bl	8006af2 <__retarget_lock_acquire_recursive>
 800847e:	4628      	mov	r0, r5
 8008480:	4621      	mov	r1, r4
 8008482:	f7ff ff5f 	bl	8008344 <__sflush_r>
 8008486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	4605      	mov	r5, r0
 800848c:	d4e4      	bmi.n	8008458 <_fflush_r+0xc>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	059b      	lsls	r3, r3, #22
 8008492:	d4e1      	bmi.n	8008458 <_fflush_r+0xc>
 8008494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008496:	f7fe fb2d 	bl	8006af4 <__retarget_lock_release_recursive>
 800849a:	e7dd      	b.n	8008458 <_fflush_r+0xc>

0800849c <memmove>:
 800849c:	4288      	cmp	r0, r1
 800849e:	b510      	push	{r4, lr}
 80084a0:	eb01 0402 	add.w	r4, r1, r2
 80084a4:	d902      	bls.n	80084ac <memmove+0x10>
 80084a6:	4284      	cmp	r4, r0
 80084a8:	4623      	mov	r3, r4
 80084aa:	d807      	bhi.n	80084bc <memmove+0x20>
 80084ac:	1e43      	subs	r3, r0, #1
 80084ae:	42a1      	cmp	r1, r4
 80084b0:	d008      	beq.n	80084c4 <memmove+0x28>
 80084b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ba:	e7f8      	b.n	80084ae <memmove+0x12>
 80084bc:	4402      	add	r2, r0
 80084be:	4601      	mov	r1, r0
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d100      	bne.n	80084c6 <memmove+0x2a>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ce:	e7f7      	b.n	80084c0 <memmove+0x24>

080084d0 <_sbrk_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d06      	ldr	r5, [pc, #24]	@ (80084ec <_sbrk_r+0x1c>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	f7fa f8c6 	bl	800266c <_sbrk>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_sbrk_r+0x1a>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_sbrk_r+0x1a>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	2000042c 	.word	0x2000042c

080084f0 <memcpy>:
 80084f0:	440a      	add	r2, r1
 80084f2:	4291      	cmp	r1, r2
 80084f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f8:	d100      	bne.n	80084fc <memcpy+0xc>
 80084fa:	4770      	bx	lr
 80084fc:	b510      	push	{r4, lr}
 80084fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008506:	4291      	cmp	r1, r2
 8008508:	d1f9      	bne.n	80084fe <memcpy+0xe>
 800850a:	bd10      	pop	{r4, pc}

0800850c <__assert_func>:
 800850c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850e:	4614      	mov	r4, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <__assert_func+0x2c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4605      	mov	r5, r0
 8008518:	68d8      	ldr	r0, [r3, #12]
 800851a:	b954      	cbnz	r4, 8008532 <__assert_func+0x26>
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <__assert_func+0x30>)
 800851e:	461c      	mov	r4, r3
 8008520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008524:	9100      	str	r1, [sp, #0]
 8008526:	462b      	mov	r3, r5
 8008528:	4905      	ldr	r1, [pc, #20]	@ (8008540 <__assert_func+0x34>)
 800852a:	f000 f86f 	bl	800860c <fiprintf>
 800852e:	f000 f87f 	bl	8008630 <abort>
 8008532:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__assert_func+0x38>)
 8008534:	e7f4      	b.n	8008520 <__assert_func+0x14>
 8008536:	bf00      	nop
 8008538:	20000028 	.word	0x20000028
 800853c:	0800a686 	.word	0x0800a686
 8008540:	0800a658 	.word	0x0800a658
 8008544:	0800a64b 	.word	0x0800a64b

08008548 <_calloc_r>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	fba1 5402 	umull	r5, r4, r1, r2
 800854e:	b93c      	cbnz	r4, 8008560 <_calloc_r+0x18>
 8008550:	4629      	mov	r1, r5
 8008552:	f7ff f991 	bl	8007878 <_malloc_r>
 8008556:	4606      	mov	r6, r0
 8008558:	b928      	cbnz	r0, 8008566 <_calloc_r+0x1e>
 800855a:	2600      	movs	r6, #0
 800855c:	4630      	mov	r0, r6
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	220c      	movs	r2, #12
 8008562:	6002      	str	r2, [r0, #0]
 8008564:	e7f9      	b.n	800855a <_calloc_r+0x12>
 8008566:	462a      	mov	r2, r5
 8008568:	4621      	mov	r1, r4
 800856a:	f7fe fa44 	bl	80069f6 <memset>
 800856e:	e7f5      	b.n	800855c <_calloc_r+0x14>

08008570 <__ascii_mbtowc>:
 8008570:	b082      	sub	sp, #8
 8008572:	b901      	cbnz	r1, 8008576 <__ascii_mbtowc+0x6>
 8008574:	a901      	add	r1, sp, #4
 8008576:	b142      	cbz	r2, 800858a <__ascii_mbtowc+0x1a>
 8008578:	b14b      	cbz	r3, 800858e <__ascii_mbtowc+0x1e>
 800857a:	7813      	ldrb	r3, [r2, #0]
 800857c:	600b      	str	r3, [r1, #0]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	1e10      	subs	r0, r2, #0
 8008582:	bf18      	it	ne
 8008584:	2001      	movne	r0, #1
 8008586:	b002      	add	sp, #8
 8008588:	4770      	bx	lr
 800858a:	4610      	mov	r0, r2
 800858c:	e7fb      	b.n	8008586 <__ascii_mbtowc+0x16>
 800858e:	f06f 0001 	mvn.w	r0, #1
 8008592:	e7f8      	b.n	8008586 <__ascii_mbtowc+0x16>

08008594 <_realloc_r>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	4680      	mov	r8, r0
 800859a:	4615      	mov	r5, r2
 800859c:	460c      	mov	r4, r1
 800859e:	b921      	cbnz	r1, 80085aa <_realloc_r+0x16>
 80085a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	4611      	mov	r1, r2
 80085a6:	f7ff b967 	b.w	8007878 <_malloc_r>
 80085aa:	b92a      	cbnz	r2, 80085b8 <_realloc_r+0x24>
 80085ac:	f7ff f8f0 	bl	8007790 <_free_r>
 80085b0:	2400      	movs	r4, #0
 80085b2:	4620      	mov	r0, r4
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	f000 f841 	bl	800863e <_malloc_usable_size_r>
 80085bc:	4285      	cmp	r5, r0
 80085be:	4606      	mov	r6, r0
 80085c0:	d802      	bhi.n	80085c8 <_realloc_r+0x34>
 80085c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085c6:	d8f4      	bhi.n	80085b2 <_realloc_r+0x1e>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4640      	mov	r0, r8
 80085cc:	f7ff f954 	bl	8007878 <_malloc_r>
 80085d0:	4607      	mov	r7, r0
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d0ec      	beq.n	80085b0 <_realloc_r+0x1c>
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	462a      	mov	r2, r5
 80085da:	4621      	mov	r1, r4
 80085dc:	bf28      	it	cs
 80085de:	4632      	movcs	r2, r6
 80085e0:	f7ff ff86 	bl	80084f0 <memcpy>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4640      	mov	r0, r8
 80085e8:	f7ff f8d2 	bl	8007790 <_free_r>
 80085ec:	463c      	mov	r4, r7
 80085ee:	e7e0      	b.n	80085b2 <_realloc_r+0x1e>

080085f0 <__ascii_wctomb>:
 80085f0:	4603      	mov	r3, r0
 80085f2:	4608      	mov	r0, r1
 80085f4:	b141      	cbz	r1, 8008608 <__ascii_wctomb+0x18>
 80085f6:	2aff      	cmp	r2, #255	@ 0xff
 80085f8:	d904      	bls.n	8008604 <__ascii_wctomb+0x14>
 80085fa:	228a      	movs	r2, #138	@ 0x8a
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	4770      	bx	lr
 8008604:	700a      	strb	r2, [r1, #0]
 8008606:	2001      	movs	r0, #1
 8008608:	4770      	bx	lr
	...

0800860c <fiprintf>:
 800860c:	b40e      	push	{r1, r2, r3}
 800860e:	b503      	push	{r0, r1, lr}
 8008610:	4601      	mov	r1, r0
 8008612:	ab03      	add	r3, sp, #12
 8008614:	4805      	ldr	r0, [pc, #20]	@ (800862c <fiprintf+0x20>)
 8008616:	f853 2b04 	ldr.w	r2, [r3], #4
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	f000 f83f 	bl	80086a0 <_vfiprintf_r>
 8008622:	b002      	add	sp, #8
 8008624:	f85d eb04 	ldr.w	lr, [sp], #4
 8008628:	b003      	add	sp, #12
 800862a:	4770      	bx	lr
 800862c:	20000028 	.word	0x20000028

08008630 <abort>:
 8008630:	b508      	push	{r3, lr}
 8008632:	2006      	movs	r0, #6
 8008634:	f000 fa08 	bl	8008a48 <raise>
 8008638:	2001      	movs	r0, #1
 800863a:	f7f9 ff9f 	bl	800257c <_exit>

0800863e <_malloc_usable_size_r>:
 800863e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008642:	1f18      	subs	r0, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	bfbc      	itt	lt
 8008648:	580b      	ldrlt	r3, [r1, r0]
 800864a:	18c0      	addlt	r0, r0, r3
 800864c:	4770      	bx	lr

0800864e <__sfputc_r>:
 800864e:	6893      	ldr	r3, [r2, #8]
 8008650:	3b01      	subs	r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	b410      	push	{r4}
 8008656:	6093      	str	r3, [r2, #8]
 8008658:	da08      	bge.n	800866c <__sfputc_r+0x1e>
 800865a:	6994      	ldr	r4, [r2, #24]
 800865c:	42a3      	cmp	r3, r4
 800865e:	db01      	blt.n	8008664 <__sfputc_r+0x16>
 8008660:	290a      	cmp	r1, #10
 8008662:	d103      	bne.n	800866c <__sfputc_r+0x1e>
 8008664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008668:	f000 b932 	b.w	80088d0 <__swbuf_r>
 800866c:	6813      	ldr	r3, [r2, #0]
 800866e:	1c58      	adds	r0, r3, #1
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	7019      	strb	r1, [r3, #0]
 8008674:	4608      	mov	r0, r1
 8008676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867a:	4770      	bx	lr

0800867c <__sfputs_r>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4606      	mov	r6, r0
 8008680:	460f      	mov	r7, r1
 8008682:	4614      	mov	r4, r2
 8008684:	18d5      	adds	r5, r2, r3
 8008686:	42ac      	cmp	r4, r5
 8008688:	d101      	bne.n	800868e <__sfputs_r+0x12>
 800868a:	2000      	movs	r0, #0
 800868c:	e007      	b.n	800869e <__sfputs_r+0x22>
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	463a      	mov	r2, r7
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff ffda 	bl	800864e <__sfputc_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d1f3      	bne.n	8008686 <__sfputs_r+0xa>
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086a0 <_vfiprintf_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	460d      	mov	r5, r1
 80086a6:	b09d      	sub	sp, #116	@ 0x74
 80086a8:	4614      	mov	r4, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	4606      	mov	r6, r0
 80086ae:	b118      	cbz	r0, 80086b8 <_vfiprintf_r+0x18>
 80086b0:	6a03      	ldr	r3, [r0, #32]
 80086b2:	b90b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x18>
 80086b4:	f7fe f8f2 	bl	800689c <__sinit>
 80086b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ba:	07d9      	lsls	r1, r3, #31
 80086bc:	d405      	bmi.n	80086ca <_vfiprintf_r+0x2a>
 80086be:	89ab      	ldrh	r3, [r5, #12]
 80086c0:	059a      	lsls	r2, r3, #22
 80086c2:	d402      	bmi.n	80086ca <_vfiprintf_r+0x2a>
 80086c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086c6:	f7fe fa14 	bl	8006af2 <__retarget_lock_acquire_recursive>
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	071b      	lsls	r3, r3, #28
 80086ce:	d501      	bpl.n	80086d4 <_vfiprintf_r+0x34>
 80086d0:	692b      	ldr	r3, [r5, #16]
 80086d2:	b99b      	cbnz	r3, 80086fc <_vfiprintf_r+0x5c>
 80086d4:	4629      	mov	r1, r5
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 f938 	bl	800894c <__swsetup_r>
 80086dc:	b170      	cbz	r0, 80086fc <_vfiprintf_r+0x5c>
 80086de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086e0:	07dc      	lsls	r4, r3, #31
 80086e2:	d504      	bpl.n	80086ee <_vfiprintf_r+0x4e>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	b01d      	add	sp, #116	@ 0x74
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	0598      	lsls	r0, r3, #22
 80086f2:	d4f7      	bmi.n	80086e4 <_vfiprintf_r+0x44>
 80086f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086f6:	f7fe f9fd 	bl	8006af4 <__retarget_lock_release_recursive>
 80086fa:	e7f3      	b.n	80086e4 <_vfiprintf_r+0x44>
 80086fc:	2300      	movs	r3, #0
 80086fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008700:	2320      	movs	r3, #32
 8008702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008706:	f8cd 800c 	str.w	r8, [sp, #12]
 800870a:	2330      	movs	r3, #48	@ 0x30
 800870c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088bc <_vfiprintf_r+0x21c>
 8008710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008714:	f04f 0901 	mov.w	r9, #1
 8008718:	4623      	mov	r3, r4
 800871a:	469a      	mov	sl, r3
 800871c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008720:	b10a      	cbz	r2, 8008726 <_vfiprintf_r+0x86>
 8008722:	2a25      	cmp	r2, #37	@ 0x25
 8008724:	d1f9      	bne.n	800871a <_vfiprintf_r+0x7a>
 8008726:	ebba 0b04 	subs.w	fp, sl, r4
 800872a:	d00b      	beq.n	8008744 <_vfiprintf_r+0xa4>
 800872c:	465b      	mov	r3, fp
 800872e:	4622      	mov	r2, r4
 8008730:	4629      	mov	r1, r5
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ffa2 	bl	800867c <__sfputs_r>
 8008738:	3001      	adds	r0, #1
 800873a:	f000 80a7 	beq.w	800888c <_vfiprintf_r+0x1ec>
 800873e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008740:	445a      	add	r2, fp
 8008742:	9209      	str	r2, [sp, #36]	@ 0x24
 8008744:	f89a 3000 	ldrb.w	r3, [sl]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 809f 	beq.w	800888c <_vfiprintf_r+0x1ec>
 800874e:	2300      	movs	r3, #0
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008758:	f10a 0a01 	add.w	sl, sl, #1
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	9307      	str	r3, [sp, #28]
 8008760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008764:	931a      	str	r3, [sp, #104]	@ 0x68
 8008766:	4654      	mov	r4, sl
 8008768:	2205      	movs	r2, #5
 800876a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876e:	4853      	ldr	r0, [pc, #332]	@ (80088bc <_vfiprintf_r+0x21c>)
 8008770:	f7f7 fd4e 	bl	8000210 <memchr>
 8008774:	9a04      	ldr	r2, [sp, #16]
 8008776:	b9d8      	cbnz	r0, 80087b0 <_vfiprintf_r+0x110>
 8008778:	06d1      	lsls	r1, r2, #27
 800877a:	bf44      	itt	mi
 800877c:	2320      	movmi	r3, #32
 800877e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008782:	0713      	lsls	r3, r2, #28
 8008784:	bf44      	itt	mi
 8008786:	232b      	movmi	r3, #43	@ 0x2b
 8008788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800878c:	f89a 3000 	ldrb.w	r3, [sl]
 8008790:	2b2a      	cmp	r3, #42	@ 0x2a
 8008792:	d015      	beq.n	80087c0 <_vfiprintf_r+0x120>
 8008794:	9a07      	ldr	r2, [sp, #28]
 8008796:	4654      	mov	r4, sl
 8008798:	2000      	movs	r0, #0
 800879a:	f04f 0c0a 	mov.w	ip, #10
 800879e:	4621      	mov	r1, r4
 80087a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087a4:	3b30      	subs	r3, #48	@ 0x30
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d94b      	bls.n	8008842 <_vfiprintf_r+0x1a2>
 80087aa:	b1b0      	cbz	r0, 80087da <_vfiprintf_r+0x13a>
 80087ac:	9207      	str	r2, [sp, #28]
 80087ae:	e014      	b.n	80087da <_vfiprintf_r+0x13a>
 80087b0:	eba0 0308 	sub.w	r3, r0, r8
 80087b4:	fa09 f303 	lsl.w	r3, r9, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	46a2      	mov	sl, r4
 80087be:	e7d2      	b.n	8008766 <_vfiprintf_r+0xc6>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	1d19      	adds	r1, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	9103      	str	r1, [sp, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbb      	ittet	lt
 80087cc:	425b      	neglt	r3, r3
 80087ce:	f042 0202 	orrlt.w	r2, r2, #2
 80087d2:	9307      	strge	r3, [sp, #28]
 80087d4:	9307      	strlt	r3, [sp, #28]
 80087d6:	bfb8      	it	lt
 80087d8:	9204      	strlt	r2, [sp, #16]
 80087da:	7823      	ldrb	r3, [r4, #0]
 80087dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80087de:	d10a      	bne.n	80087f6 <_vfiprintf_r+0x156>
 80087e0:	7863      	ldrb	r3, [r4, #1]
 80087e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e4:	d132      	bne.n	800884c <_vfiprintf_r+0x1ac>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	1d1a      	adds	r2, r3, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	9203      	str	r2, [sp, #12]
 80087ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087f2:	3402      	adds	r4, #2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088cc <_vfiprintf_r+0x22c>
 80087fa:	7821      	ldrb	r1, [r4, #0]
 80087fc:	2203      	movs	r2, #3
 80087fe:	4650      	mov	r0, sl
 8008800:	f7f7 fd06 	bl	8000210 <memchr>
 8008804:	b138      	cbz	r0, 8008816 <_vfiprintf_r+0x176>
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	eba0 000a 	sub.w	r0, r0, sl
 800880c:	2240      	movs	r2, #64	@ 0x40
 800880e:	4082      	lsls	r2, r0
 8008810:	4313      	orrs	r3, r2
 8008812:	3401      	adds	r4, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881a:	4829      	ldr	r0, [pc, #164]	@ (80088c0 <_vfiprintf_r+0x220>)
 800881c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008820:	2206      	movs	r2, #6
 8008822:	f7f7 fcf5 	bl	8000210 <memchr>
 8008826:	2800      	cmp	r0, #0
 8008828:	d03f      	beq.n	80088aa <_vfiprintf_r+0x20a>
 800882a:	4b26      	ldr	r3, [pc, #152]	@ (80088c4 <_vfiprintf_r+0x224>)
 800882c:	bb1b      	cbnz	r3, 8008876 <_vfiprintf_r+0x1d6>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	3307      	adds	r3, #7
 8008832:	f023 0307 	bic.w	r3, r3, #7
 8008836:	3308      	adds	r3, #8
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883c:	443b      	add	r3, r7
 800883e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008840:	e76a      	b.n	8008718 <_vfiprintf_r+0x78>
 8008842:	fb0c 3202 	mla	r2, ip, r2, r3
 8008846:	460c      	mov	r4, r1
 8008848:	2001      	movs	r0, #1
 800884a:	e7a8      	b.n	800879e <_vfiprintf_r+0xfe>
 800884c:	2300      	movs	r3, #0
 800884e:	3401      	adds	r4, #1
 8008850:	9305      	str	r3, [sp, #20]
 8008852:	4619      	mov	r1, r3
 8008854:	f04f 0c0a 	mov.w	ip, #10
 8008858:	4620      	mov	r0, r4
 800885a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800885e:	3a30      	subs	r2, #48	@ 0x30
 8008860:	2a09      	cmp	r2, #9
 8008862:	d903      	bls.n	800886c <_vfiprintf_r+0x1cc>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0c6      	beq.n	80087f6 <_vfiprintf_r+0x156>
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	e7c4      	b.n	80087f6 <_vfiprintf_r+0x156>
 800886c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008870:	4604      	mov	r4, r0
 8008872:	2301      	movs	r3, #1
 8008874:	e7f0      	b.n	8008858 <_vfiprintf_r+0x1b8>
 8008876:	ab03      	add	r3, sp, #12
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	462a      	mov	r2, r5
 800887c:	4b12      	ldr	r3, [pc, #72]	@ (80088c8 <_vfiprintf_r+0x228>)
 800887e:	a904      	add	r1, sp, #16
 8008880:	4630      	mov	r0, r6
 8008882:	f7fd fbc7 	bl	8006014 <_printf_float>
 8008886:	4607      	mov	r7, r0
 8008888:	1c78      	adds	r0, r7, #1
 800888a:	d1d6      	bne.n	800883a <_vfiprintf_r+0x19a>
 800888c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800888e:	07d9      	lsls	r1, r3, #31
 8008890:	d405      	bmi.n	800889e <_vfiprintf_r+0x1fe>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	059a      	lsls	r2, r3, #22
 8008896:	d402      	bmi.n	800889e <_vfiprintf_r+0x1fe>
 8008898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800889a:	f7fe f92b 	bl	8006af4 <__retarget_lock_release_recursive>
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	065b      	lsls	r3, r3, #25
 80088a2:	f53f af1f 	bmi.w	80086e4 <_vfiprintf_r+0x44>
 80088a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088a8:	e71e      	b.n	80086e8 <_vfiprintf_r+0x48>
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	462a      	mov	r2, r5
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <_vfiprintf_r+0x228>)
 80088b2:	a904      	add	r1, sp, #16
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7fd fe45 	bl	8006544 <_printf_i>
 80088ba:	e7e4      	b.n	8008886 <_vfiprintf_r+0x1e6>
 80088bc:	0800a630 	.word	0x0800a630
 80088c0:	0800a63a 	.word	0x0800a63a
 80088c4:	08006015 	.word	0x08006015
 80088c8:	0800867d 	.word	0x0800867d
 80088cc:	0800a636 	.word	0x0800a636

080088d0 <__swbuf_r>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	460e      	mov	r6, r1
 80088d4:	4614      	mov	r4, r2
 80088d6:	4605      	mov	r5, r0
 80088d8:	b118      	cbz	r0, 80088e2 <__swbuf_r+0x12>
 80088da:	6a03      	ldr	r3, [r0, #32]
 80088dc:	b90b      	cbnz	r3, 80088e2 <__swbuf_r+0x12>
 80088de:	f7fd ffdd 	bl	800689c <__sinit>
 80088e2:	69a3      	ldr	r3, [r4, #24]
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	071a      	lsls	r2, r3, #28
 80088ea:	d501      	bpl.n	80088f0 <__swbuf_r+0x20>
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b943      	cbnz	r3, 8008902 <__swbuf_r+0x32>
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f82a 	bl	800894c <__swsetup_r>
 80088f8:	b118      	cbz	r0, 8008902 <__swbuf_r+0x32>
 80088fa:	f04f 37ff 	mov.w	r7, #4294967295
 80088fe:	4638      	mov	r0, r7
 8008900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	1a98      	subs	r0, r3, r2
 8008908:	6963      	ldr	r3, [r4, #20]
 800890a:	b2f6      	uxtb	r6, r6
 800890c:	4283      	cmp	r3, r0
 800890e:	4637      	mov	r7, r6
 8008910:	dc05      	bgt.n	800891e <__swbuf_r+0x4e>
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f7ff fd99 	bl	800844c <_fflush_r>
 800891a:	2800      	cmp	r0, #0
 800891c:	d1ed      	bne.n	80088fa <__swbuf_r+0x2a>
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	3b01      	subs	r3, #1
 8008922:	60a3      	str	r3, [r4, #8]
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	701e      	strb	r6, [r3, #0]
 800892c:	6962      	ldr	r2, [r4, #20]
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	429a      	cmp	r2, r3
 8008932:	d004      	beq.n	800893e <__swbuf_r+0x6e>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d5e1      	bpl.n	80088fe <__swbuf_r+0x2e>
 800893a:	2e0a      	cmp	r6, #10
 800893c:	d1df      	bne.n	80088fe <__swbuf_r+0x2e>
 800893e:	4621      	mov	r1, r4
 8008940:	4628      	mov	r0, r5
 8008942:	f7ff fd83 	bl	800844c <_fflush_r>
 8008946:	2800      	cmp	r0, #0
 8008948:	d0d9      	beq.n	80088fe <__swbuf_r+0x2e>
 800894a:	e7d6      	b.n	80088fa <__swbuf_r+0x2a>

0800894c <__swsetup_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4b29      	ldr	r3, [pc, #164]	@ (80089f4 <__swsetup_r+0xa8>)
 8008950:	4605      	mov	r5, r0
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	460c      	mov	r4, r1
 8008956:	b118      	cbz	r0, 8008960 <__swsetup_r+0x14>
 8008958:	6a03      	ldr	r3, [r0, #32]
 800895a:	b90b      	cbnz	r3, 8008960 <__swsetup_r+0x14>
 800895c:	f7fd ff9e 	bl	800689c <__sinit>
 8008960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008964:	0719      	lsls	r1, r3, #28
 8008966:	d422      	bmi.n	80089ae <__swsetup_r+0x62>
 8008968:	06da      	lsls	r2, r3, #27
 800896a:	d407      	bmi.n	800897c <__swsetup_r+0x30>
 800896c:	2209      	movs	r2, #9
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	f04f 30ff 	mov.w	r0, #4294967295
 800897a:	e033      	b.n	80089e4 <__swsetup_r+0x98>
 800897c:	0758      	lsls	r0, r3, #29
 800897e:	d512      	bpl.n	80089a6 <__swsetup_r+0x5a>
 8008980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008982:	b141      	cbz	r1, 8008996 <__swsetup_r+0x4a>
 8008984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008988:	4299      	cmp	r1, r3
 800898a:	d002      	beq.n	8008992 <__swsetup_r+0x46>
 800898c:	4628      	mov	r0, r5
 800898e:	f7fe feff 	bl	8007790 <_free_r>
 8008992:	2300      	movs	r3, #0
 8008994:	6363      	str	r3, [r4, #52]	@ 0x34
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	2300      	movs	r3, #0
 80089a0:	6063      	str	r3, [r4, #4]
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	f043 0308 	orr.w	r3, r3, #8
 80089ac:	81a3      	strh	r3, [r4, #12]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	b94b      	cbnz	r3, 80089c6 <__swsetup_r+0x7a>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d003      	beq.n	80089c6 <__swsetup_r+0x7a>
 80089be:	4621      	mov	r1, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	f000 f883 	bl	8008acc <__smakebuf_r>
 80089c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ca:	f013 0201 	ands.w	r2, r3, #1
 80089ce:	d00a      	beq.n	80089e6 <__swsetup_r+0x9a>
 80089d0:	2200      	movs	r2, #0
 80089d2:	60a2      	str	r2, [r4, #8]
 80089d4:	6962      	ldr	r2, [r4, #20]
 80089d6:	4252      	negs	r2, r2
 80089d8:	61a2      	str	r2, [r4, #24]
 80089da:	6922      	ldr	r2, [r4, #16]
 80089dc:	b942      	cbnz	r2, 80089f0 <__swsetup_r+0xa4>
 80089de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089e2:	d1c5      	bne.n	8008970 <__swsetup_r+0x24>
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	0799      	lsls	r1, r3, #30
 80089e8:	bf58      	it	pl
 80089ea:	6962      	ldrpl	r2, [r4, #20]
 80089ec:	60a2      	str	r2, [r4, #8]
 80089ee:	e7f4      	b.n	80089da <__swsetup_r+0x8e>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7f7      	b.n	80089e4 <__swsetup_r+0x98>
 80089f4:	20000028 	.word	0x20000028

080089f8 <_raise_r>:
 80089f8:	291f      	cmp	r1, #31
 80089fa:	b538      	push	{r3, r4, r5, lr}
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	d904      	bls.n	8008a0c <_raise_r+0x14>
 8008a02:	2316      	movs	r3, #22
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a0e:	b112      	cbz	r2, 8008a16 <_raise_r+0x1e>
 8008a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a14:	b94b      	cbnz	r3, 8008a2a <_raise_r+0x32>
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 f830 	bl	8008a7c <_getpid_r>
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4601      	mov	r1, r0
 8008a20:	4628      	mov	r0, r5
 8008a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a26:	f000 b817 	b.w	8008a58 <_kill_r>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d00a      	beq.n	8008a44 <_raise_r+0x4c>
 8008a2e:	1c59      	adds	r1, r3, #1
 8008a30:	d103      	bne.n	8008a3a <_raise_r+0x42>
 8008a32:	2316      	movs	r3, #22
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	2001      	movs	r0, #1
 8008a38:	e7e7      	b.n	8008a0a <_raise_r+0x12>
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a40:	4620      	mov	r0, r4
 8008a42:	4798      	blx	r3
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7e0      	b.n	8008a0a <_raise_r+0x12>

08008a48 <raise>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	@ (8008a54 <raise+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f7ff bfd3 	b.w	80089f8 <_raise_r>
 8008a52:	bf00      	nop
 8008a54:	20000028 	.word	0x20000028

08008a58 <_kill_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d07      	ldr	r5, [pc, #28]	@ (8008a78 <_kill_r+0x20>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	4611      	mov	r1, r2
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	f7f9 fd79 	bl	800255c <_kill>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d102      	bne.n	8008a74 <_kill_r+0x1c>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	b103      	cbz	r3, 8008a74 <_kill_r+0x1c>
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	bd38      	pop	{r3, r4, r5, pc}
 8008a76:	bf00      	nop
 8008a78:	2000042c 	.word	0x2000042c

08008a7c <_getpid_r>:
 8008a7c:	f7f9 bd66 	b.w	800254c <_getpid>

08008a80 <__swhatbuf_r>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	460c      	mov	r4, r1
 8008a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	b096      	sub	sp, #88	@ 0x58
 8008a8c:	4615      	mov	r5, r2
 8008a8e:	461e      	mov	r6, r3
 8008a90:	da0d      	bge.n	8008aae <__swhatbuf_r+0x2e>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	bf14      	ite	ne
 8008a9e:	2340      	movne	r3, #64	@ 0x40
 8008aa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	6031      	str	r1, [r6, #0]
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	b016      	add	sp, #88	@ 0x58
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
 8008aae:	466a      	mov	r2, sp
 8008ab0:	f000 f848 	bl	8008b44 <_fstat_r>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dbec      	blt.n	8008a92 <__swhatbuf_r+0x12>
 8008ab8:	9901      	ldr	r1, [sp, #4]
 8008aba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008abe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ac2:	4259      	negs	r1, r3
 8008ac4:	4159      	adcs	r1, r3
 8008ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aca:	e7eb      	b.n	8008aa4 <__swhatbuf_r+0x24>

08008acc <__smakebuf_r>:
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad0:	079d      	lsls	r5, r3, #30
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	d507      	bpl.n	8008ae8 <__smakebuf_r+0x1c>
 8008ad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	6163      	str	r3, [r4, #20]
 8008ae4:	b003      	add	sp, #12
 8008ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae8:	ab01      	add	r3, sp, #4
 8008aea:	466a      	mov	r2, sp
 8008aec:	f7ff ffc8 	bl	8008a80 <__swhatbuf_r>
 8008af0:	9f00      	ldr	r7, [sp, #0]
 8008af2:	4605      	mov	r5, r0
 8008af4:	4639      	mov	r1, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7fe febe 	bl	8007878 <_malloc_r>
 8008afc:	b948      	cbnz	r0, 8008b12 <__smakebuf_r+0x46>
 8008afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b02:	059a      	lsls	r2, r3, #22
 8008b04:	d4ee      	bmi.n	8008ae4 <__smakebuf_r+0x18>
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	f043 0302 	orr.w	r3, r3, #2
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	e7e2      	b.n	8008ad8 <__smakebuf_r+0xc>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	6020      	str	r0, [r4, #0]
 8008b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b22:	b15b      	cbz	r3, 8008b3c <__smakebuf_r+0x70>
 8008b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f000 f81d 	bl	8008b68 <_isatty_r>
 8008b2e:	b128      	cbz	r0, 8008b3c <__smakebuf_r+0x70>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	431d      	orrs	r5, r3
 8008b40:	81a5      	strh	r5, [r4, #12]
 8008b42:	e7cf      	b.n	8008ae4 <__smakebuf_r+0x18>

08008b44 <_fstat_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	@ (8008b64 <_fstat_r+0x20>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f7f9 fd63 	bl	800261c <_fstat>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d102      	bne.n	8008b60 <_fstat_r+0x1c>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b103      	cbz	r3, 8008b60 <_fstat_r+0x1c>
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	2000042c 	.word	0x2000042c

08008b68 <_isatty_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d06      	ldr	r5, [pc, #24]	@ (8008b84 <_isatty_r+0x1c>)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f7f9 fd62 	bl	800263c <_isatty>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_isatty_r+0x1a>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_isatty_r+0x1a>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	2000042c 	.word	0x2000042c

08008b88 <acos>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	ed2d 8b02 	vpush	{d8}
 8008b8e:	ec55 4b10 	vmov	r4, r5, d0
 8008b92:	f000 fb71 	bl	8009278 <__ieee754_acos>
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8008ba2:	eef0 8a60 	vmov.f32	s17, s1
 8008ba6:	f7f7 ffe1 	bl	8000b6c <__aeabi_dcmpun>
 8008baa:	b9a8      	cbnz	r0, 8008bd8 <acos+0x50>
 8008bac:	ec45 4b10 	vmov	d0, r4, r5
 8008bb0:	f000 f89e 	bl	8008cf0 <fabs>
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <acos+0x60>)
 8008bb6:	ec51 0b10 	vmov	r0, r1, d0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f7f7 ffcc 	bl	8000b58 <__aeabi_dcmpgt>
 8008bc0:	b150      	cbz	r0, 8008bd8 <acos+0x50>
 8008bc2:	f7fd ff6b 	bl	8006a9c <__errno>
 8008bc6:	ecbd 8b02 	vpop	{d8}
 8008bca:	2321      	movs	r3, #33	@ 0x21
 8008bcc:	6003      	str	r3, [r0, #0]
 8008bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd2:	4806      	ldr	r0, [pc, #24]	@ (8008bec <acos+0x64>)
 8008bd4:	f000 b8e8 	b.w	8008da8 <nan>
 8008bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8008bdc:	eef0 0a68 	vmov.f32	s1, s17
 8008be0:	ecbd 8b02 	vpop	{d8}
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	3ff00000 	.word	0x3ff00000
 8008bec:	0800a686 	.word	0x0800a686

08008bf0 <sqrt>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	ed2d 8b02 	vpush	{d8}
 8008bf6:	ec55 4b10 	vmov	r4, r5, d0
 8008bfa:	f000 f8dd 	bl	8008db8 <__ieee754_sqrt>
 8008bfe:	4622      	mov	r2, r4
 8008c00:	462b      	mov	r3, r5
 8008c02:	4620      	mov	r0, r4
 8008c04:	4629      	mov	r1, r5
 8008c06:	eeb0 8a40 	vmov.f32	s16, s0
 8008c0a:	eef0 8a60 	vmov.f32	s17, s1
 8008c0e:	f7f7 ffad 	bl	8000b6c <__aeabi_dcmpun>
 8008c12:	b990      	cbnz	r0, 8008c3a <sqrt+0x4a>
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 ff7e 	bl	8000b1c <__aeabi_dcmplt>
 8008c20:	b158      	cbz	r0, 8008c3a <sqrt+0x4a>
 8008c22:	f7fd ff3b 	bl	8006a9c <__errno>
 8008c26:	2321      	movs	r3, #33	@ 0x21
 8008c28:	6003      	str	r3, [r0, #0]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4619      	mov	r1, r3
 8008c32:	f7f7 fe2b 	bl	800088c <__aeabi_ddiv>
 8008c36:	ec41 0b18 	vmov	d8, r0, r1
 8008c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8008c3e:	eef0 0a68 	vmov.f32	s1, s17
 8008c42:	ecbd 8b02 	vpop	{d8}
 8008c46:	bd38      	pop	{r3, r4, r5, pc}

08008c48 <cos>:
 8008c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c4a:	ec53 2b10 	vmov	r2, r3, d0
 8008c4e:	4826      	ldr	r0, [pc, #152]	@ (8008ce8 <cos+0xa0>)
 8008c50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c54:	4281      	cmp	r1, r0
 8008c56:	d806      	bhi.n	8008c66 <cos+0x1e>
 8008c58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ce0 <cos+0x98>
 8008c5c:	b005      	add	sp, #20
 8008c5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c62:	f000 b985 	b.w	8008f70 <__kernel_cos>
 8008c66:	4821      	ldr	r0, [pc, #132]	@ (8008cec <cos+0xa4>)
 8008c68:	4281      	cmp	r1, r0
 8008c6a:	d908      	bls.n	8008c7e <cos+0x36>
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	f7f7 fb2a 	bl	80002c8 <__aeabi_dsub>
 8008c74:	ec41 0b10 	vmov	d0, r0, r1
 8008c78:	b005      	add	sp, #20
 8008c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c7e:	4668      	mov	r0, sp
 8008c80:	f000 fd56 	bl	8009730 <__ieee754_rem_pio2>
 8008c84:	f000 0003 	and.w	r0, r0, #3
 8008c88:	2801      	cmp	r0, #1
 8008c8a:	d00b      	beq.n	8008ca4 <cos+0x5c>
 8008c8c:	2802      	cmp	r0, #2
 8008c8e:	d015      	beq.n	8008cbc <cos+0x74>
 8008c90:	b9d8      	cbnz	r0, 8008cca <cos+0x82>
 8008c92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c96:	ed9d 0b00 	vldr	d0, [sp]
 8008c9a:	f000 f969 	bl	8008f70 <__kernel_cos>
 8008c9e:	ec51 0b10 	vmov	r0, r1, d0
 8008ca2:	e7e7      	b.n	8008c74 <cos+0x2c>
 8008ca4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ca8:	ed9d 0b00 	vldr	d0, [sp]
 8008cac:	f000 fa28 	bl	8009100 <__kernel_sin>
 8008cb0:	ec53 2b10 	vmov	r2, r3, d0
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008cba:	e7db      	b.n	8008c74 <cos+0x2c>
 8008cbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cc0:	ed9d 0b00 	vldr	d0, [sp]
 8008cc4:	f000 f954 	bl	8008f70 <__kernel_cos>
 8008cc8:	e7f2      	b.n	8008cb0 <cos+0x68>
 8008cca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cce:	ed9d 0b00 	vldr	d0, [sp]
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	f000 fa14 	bl	8009100 <__kernel_sin>
 8008cd8:	e7e1      	b.n	8008c9e <cos+0x56>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
	...
 8008ce8:	3fe921fb 	.word	0x3fe921fb
 8008cec:	7fefffff 	.word	0x7fefffff

08008cf0 <fabs>:
 8008cf0:	ec51 0b10 	vmov	r0, r1, d0
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008cfa:	ec43 2b10 	vmov	d0, r2, r3
 8008cfe:	4770      	bx	lr

08008d00 <sin>:
 8008d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d02:	ec53 2b10 	vmov	r2, r3, d0
 8008d06:	4826      	ldr	r0, [pc, #152]	@ (8008da0 <sin+0xa0>)
 8008d08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d0c:	4281      	cmp	r1, r0
 8008d0e:	d807      	bhi.n	8008d20 <sin+0x20>
 8008d10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008d98 <sin+0x98>
 8008d14:	2000      	movs	r0, #0
 8008d16:	b005      	add	sp, #20
 8008d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d1c:	f000 b9f0 	b.w	8009100 <__kernel_sin>
 8008d20:	4820      	ldr	r0, [pc, #128]	@ (8008da4 <sin+0xa4>)
 8008d22:	4281      	cmp	r1, r0
 8008d24:	d908      	bls.n	8008d38 <sin+0x38>
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f7f7 facd 	bl	80002c8 <__aeabi_dsub>
 8008d2e:	ec41 0b10 	vmov	d0, r0, r1
 8008d32:	b005      	add	sp, #20
 8008d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d38:	4668      	mov	r0, sp
 8008d3a:	f000 fcf9 	bl	8009730 <__ieee754_rem_pio2>
 8008d3e:	f000 0003 	and.w	r0, r0, #3
 8008d42:	2801      	cmp	r0, #1
 8008d44:	d00c      	beq.n	8008d60 <sin+0x60>
 8008d46:	2802      	cmp	r0, #2
 8008d48:	d011      	beq.n	8008d6e <sin+0x6e>
 8008d4a:	b9e8      	cbnz	r0, 8008d88 <sin+0x88>
 8008d4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d50:	ed9d 0b00 	vldr	d0, [sp]
 8008d54:	2001      	movs	r0, #1
 8008d56:	f000 f9d3 	bl	8009100 <__kernel_sin>
 8008d5a:	ec51 0b10 	vmov	r0, r1, d0
 8008d5e:	e7e6      	b.n	8008d2e <sin+0x2e>
 8008d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d64:	ed9d 0b00 	vldr	d0, [sp]
 8008d68:	f000 f902 	bl	8008f70 <__kernel_cos>
 8008d6c:	e7f5      	b.n	8008d5a <sin+0x5a>
 8008d6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d72:	ed9d 0b00 	vldr	d0, [sp]
 8008d76:	2001      	movs	r0, #1
 8008d78:	f000 f9c2 	bl	8009100 <__kernel_sin>
 8008d7c:	ec53 2b10 	vmov	r2, r3, d0
 8008d80:	4610      	mov	r0, r2
 8008d82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008d86:	e7d2      	b.n	8008d2e <sin+0x2e>
 8008d88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d8c:	ed9d 0b00 	vldr	d0, [sp]
 8008d90:	f000 f8ee 	bl	8008f70 <__kernel_cos>
 8008d94:	e7f2      	b.n	8008d7c <sin+0x7c>
 8008d96:	bf00      	nop
	...
 8008da0:	3fe921fb 	.word	0x3fe921fb
 8008da4:	7fefffff 	.word	0x7fefffff

08008da8 <nan>:
 8008da8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008db0 <nan+0x8>
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	00000000 	.word	0x00000000
 8008db4:	7ff80000 	.word	0x7ff80000

08008db8 <__ieee754_sqrt>:
 8008db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	4a68      	ldr	r2, [pc, #416]	@ (8008f60 <__ieee754_sqrt+0x1a8>)
 8008dbe:	ec55 4b10 	vmov	r4, r5, d0
 8008dc2:	43aa      	bics	r2, r5
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	d110      	bne.n	8008dec <__ieee754_sqrt+0x34>
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fc32 	bl	8000638 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f7f7 fa76 	bl	80002cc <__adddf3>
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	ec45 4b10 	vmov	d0, r4, r5
 8008de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	dc0e      	bgt.n	8008e0e <__ieee754_sqrt+0x56>
 8008df0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008df4:	4322      	orrs	r2, r4
 8008df6:	d0f5      	beq.n	8008de4 <__ieee754_sqrt+0x2c>
 8008df8:	b19d      	cbz	r5, 8008e22 <__ieee754_sqrt+0x6a>
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f7f7 fa62 	bl	80002c8 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	f7f7 fd40 	bl	800088c <__aeabi_ddiv>
 8008e0c:	e7e8      	b.n	8008de0 <__ieee754_sqrt+0x28>
 8008e0e:	152a      	asrs	r2, r5, #20
 8008e10:	d115      	bne.n	8008e3e <__ieee754_sqrt+0x86>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e009      	b.n	8008e2a <__ieee754_sqrt+0x72>
 8008e16:	0acb      	lsrs	r3, r1, #11
 8008e18:	3a15      	subs	r2, #21
 8008e1a:	0549      	lsls	r1, r1, #21
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0fa      	beq.n	8008e16 <__ieee754_sqrt+0x5e>
 8008e20:	e7f7      	b.n	8008e12 <__ieee754_sqrt+0x5a>
 8008e22:	462a      	mov	r2, r5
 8008e24:	e7fa      	b.n	8008e1c <__ieee754_sqrt+0x64>
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	3001      	adds	r0, #1
 8008e2a:	02dc      	lsls	r4, r3, #11
 8008e2c:	d5fb      	bpl.n	8008e26 <__ieee754_sqrt+0x6e>
 8008e2e:	1e44      	subs	r4, r0, #1
 8008e30:	1b12      	subs	r2, r2, r4
 8008e32:	f1c0 0420 	rsb	r4, r0, #32
 8008e36:	fa21 f404 	lsr.w	r4, r1, r4
 8008e3a:	4323      	orrs	r3, r4
 8008e3c:	4081      	lsls	r1, r0
 8008e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e4a:	07d2      	lsls	r2, r2, #31
 8008e4c:	bf5c      	itt	pl
 8008e4e:	005b      	lslpl	r3, r3, #1
 8008e50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008e54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e58:	bf58      	it	pl
 8008e5a:	0049      	lslpl	r1, r1, #1
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008e62:	106d      	asrs	r5, r5, #1
 8008e64:	0049      	lsls	r1, r1, #1
 8008e66:	2016      	movs	r0, #22
 8008e68:	4632      	mov	r2, r6
 8008e6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008e6e:	1917      	adds	r7, r2, r4
 8008e70:	429f      	cmp	r7, r3
 8008e72:	bfde      	ittt	le
 8008e74:	193a      	addle	r2, r7, r4
 8008e76:	1bdb      	suble	r3, r3, r7
 8008e78:	1936      	addle	r6, r6, r4
 8008e7a:	0fcf      	lsrs	r7, r1, #31
 8008e7c:	3801      	subs	r0, #1
 8008e7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008e82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008e8a:	d1f0      	bne.n	8008e6e <__ieee754_sqrt+0xb6>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	2720      	movs	r7, #32
 8008e90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008e94:	429a      	cmp	r2, r3
 8008e96:	eb00 0e0c 	add.w	lr, r0, ip
 8008e9a:	db02      	blt.n	8008ea2 <__ieee754_sqrt+0xea>
 8008e9c:	d113      	bne.n	8008ec6 <__ieee754_sqrt+0x10e>
 8008e9e:	458e      	cmp	lr, r1
 8008ea0:	d811      	bhi.n	8008ec6 <__ieee754_sqrt+0x10e>
 8008ea2:	f1be 0f00 	cmp.w	lr, #0
 8008ea6:	eb0e 000c 	add.w	r0, lr, ip
 8008eaa:	da42      	bge.n	8008f32 <__ieee754_sqrt+0x17a>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db40      	blt.n	8008f32 <__ieee754_sqrt+0x17a>
 8008eb0:	f102 0801 	add.w	r8, r2, #1
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	458e      	cmp	lr, r1
 8008eb8:	bf88      	it	hi
 8008eba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ebe:	eba1 010e 	sub.w	r1, r1, lr
 8008ec2:	4464      	add	r4, ip
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008eca:	3f01      	subs	r7, #1
 8008ecc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008ed0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ed4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008ed8:	d1dc      	bne.n	8008e94 <__ieee754_sqrt+0xdc>
 8008eda:	4319      	orrs	r1, r3
 8008edc:	d01b      	beq.n	8008f16 <__ieee754_sqrt+0x15e>
 8008ede:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008f64 <__ieee754_sqrt+0x1ac>
 8008ee2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008f68 <__ieee754_sqrt+0x1b0>
 8008ee6:	e9da 0100 	ldrd	r0, r1, [sl]
 8008eea:	e9db 2300 	ldrd	r2, r3, [fp]
 8008eee:	f7f7 f9eb 	bl	80002c8 <__aeabi_dsub>
 8008ef2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 fe17 	bl	8000b30 <__aeabi_dcmple>
 8008f02:	b140      	cbz	r0, 8008f16 <__ieee754_sqrt+0x15e>
 8008f04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f08:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f10:	d111      	bne.n	8008f36 <__ieee754_sqrt+0x17e>
 8008f12:	3601      	adds	r6, #1
 8008f14:	463c      	mov	r4, r7
 8008f16:	1072      	asrs	r2, r6, #1
 8008f18:	0863      	lsrs	r3, r4, #1
 8008f1a:	07f1      	lsls	r1, r6, #31
 8008f1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008f20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008f24:	bf48      	it	mi
 8008f26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008f2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008f2e:	4618      	mov	r0, r3
 8008f30:	e756      	b.n	8008de0 <__ieee754_sqrt+0x28>
 8008f32:	4690      	mov	r8, r2
 8008f34:	e7be      	b.n	8008eb4 <__ieee754_sqrt+0xfc>
 8008f36:	f7f7 f9c9 	bl	80002cc <__adddf3>
 8008f3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 fde9 	bl	8000b1c <__aeabi_dcmplt>
 8008f4a:	b120      	cbz	r0, 8008f56 <__ieee754_sqrt+0x19e>
 8008f4c:	1ca0      	adds	r0, r4, #2
 8008f4e:	bf08      	it	eq
 8008f50:	3601      	addeq	r6, #1
 8008f52:	3402      	adds	r4, #2
 8008f54:	e7df      	b.n	8008f16 <__ieee754_sqrt+0x15e>
 8008f56:	1c63      	adds	r3, r4, #1
 8008f58:	f023 0401 	bic.w	r4, r3, #1
 8008f5c:	e7db      	b.n	8008f16 <__ieee754_sqrt+0x15e>
 8008f5e:	bf00      	nop
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	200001f0 	.word	0x200001f0
 8008f68:	200001e8 	.word	0x200001e8
 8008f6c:	00000000 	.word	0x00000000

08008f70 <__kernel_cos>:
 8008f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	ec57 6b10 	vmov	r6, r7, d0
 8008f78:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f7c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008f80:	ed8d 1b00 	vstr	d1, [sp]
 8008f84:	d206      	bcs.n	8008f94 <__kernel_cos+0x24>
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 fe05 	bl	8000b98 <__aeabi_d2iz>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f000 8088 	beq.w	80090a4 <__kernel_cos+0x134>
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fb4c 	bl	8000638 <__aeabi_dmul>
 8008fa0:	4b51      	ldr	r3, [pc, #324]	@ (80090e8 <__kernel_cos+0x178>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	f7f7 fb46 	bl	8000638 <__aeabi_dmul>
 8008fac:	a340      	add	r3, pc, #256	@ (adr r3, 80090b0 <__kernel_cos+0x140>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	4682      	mov	sl, r0
 8008fb4:	468b      	mov	fp, r1
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 fb3d 	bl	8000638 <__aeabi_dmul>
 8008fbe:	a33e      	add	r3, pc, #248	@ (adr r3, 80090b8 <__kernel_cos+0x148>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 f982 	bl	80002cc <__adddf3>
 8008fc8:	4622      	mov	r2, r4
 8008fca:	462b      	mov	r3, r5
 8008fcc:	f7f7 fb34 	bl	8000638 <__aeabi_dmul>
 8008fd0:	a33b      	add	r3, pc, #236	@ (adr r3, 80090c0 <__kernel_cos+0x150>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 f977 	bl	80002c8 <__aeabi_dsub>
 8008fda:	4622      	mov	r2, r4
 8008fdc:	462b      	mov	r3, r5
 8008fde:	f7f7 fb2b 	bl	8000638 <__aeabi_dmul>
 8008fe2:	a339      	add	r3, pc, #228	@ (adr r3, 80090c8 <__kernel_cos+0x158>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 f970 	bl	80002cc <__adddf3>
 8008fec:	4622      	mov	r2, r4
 8008fee:	462b      	mov	r3, r5
 8008ff0:	f7f7 fb22 	bl	8000638 <__aeabi_dmul>
 8008ff4:	a336      	add	r3, pc, #216	@ (adr r3, 80090d0 <__kernel_cos+0x160>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f7f7 f965 	bl	80002c8 <__aeabi_dsub>
 8008ffe:	4622      	mov	r2, r4
 8009000:	462b      	mov	r3, r5
 8009002:	f7f7 fb19 	bl	8000638 <__aeabi_dmul>
 8009006:	a334      	add	r3, pc, #208	@ (adr r3, 80090d8 <__kernel_cos+0x168>)
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f7f7 f95e 	bl	80002cc <__adddf3>
 8009010:	4622      	mov	r2, r4
 8009012:	462b      	mov	r3, r5
 8009014:	f7f7 fb10 	bl	8000638 <__aeabi_dmul>
 8009018:	4622      	mov	r2, r4
 800901a:	462b      	mov	r3, r5
 800901c:	f7f7 fb0c 	bl	8000638 <__aeabi_dmul>
 8009020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	460b      	mov	r3, r1
 8009032:	4602      	mov	r2, r0
 8009034:	4629      	mov	r1, r5
 8009036:	4620      	mov	r0, r4
 8009038:	f7f7 f946 	bl	80002c8 <__aeabi_dsub>
 800903c:	4b2b      	ldr	r3, [pc, #172]	@ (80090ec <__kernel_cos+0x17c>)
 800903e:	4598      	cmp	r8, r3
 8009040:	4606      	mov	r6, r0
 8009042:	460f      	mov	r7, r1
 8009044:	d810      	bhi.n	8009068 <__kernel_cos+0xf8>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4650      	mov	r0, sl
 800904c:	4659      	mov	r1, fp
 800904e:	f7f7 f93b 	bl	80002c8 <__aeabi_dsub>
 8009052:	460b      	mov	r3, r1
 8009054:	4926      	ldr	r1, [pc, #152]	@ (80090f0 <__kernel_cos+0x180>)
 8009056:	4602      	mov	r2, r0
 8009058:	2000      	movs	r0, #0
 800905a:	f7f7 f935 	bl	80002c8 <__aeabi_dsub>
 800905e:	ec41 0b10 	vmov	d0, r0, r1
 8009062:	b003      	add	sp, #12
 8009064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009068:	4b22      	ldr	r3, [pc, #136]	@ (80090f4 <__kernel_cos+0x184>)
 800906a:	4921      	ldr	r1, [pc, #132]	@ (80090f0 <__kernel_cos+0x180>)
 800906c:	4598      	cmp	r8, r3
 800906e:	bf8c      	ite	hi
 8009070:	4d21      	ldrhi	r5, [pc, #132]	@ (80090f8 <__kernel_cos+0x188>)
 8009072:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009076:	2400      	movs	r4, #0
 8009078:	4622      	mov	r2, r4
 800907a:	462b      	mov	r3, r5
 800907c:	2000      	movs	r0, #0
 800907e:	f7f7 f923 	bl	80002c8 <__aeabi_dsub>
 8009082:	4622      	mov	r2, r4
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	462b      	mov	r3, r5
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 f91b 	bl	80002c8 <__aeabi_dsub>
 8009092:	4632      	mov	r2, r6
 8009094:	463b      	mov	r3, r7
 8009096:	f7f7 f917 	bl	80002c8 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	e7da      	b.n	800905a <__kernel_cos+0xea>
 80090a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80090e0 <__kernel_cos+0x170>
 80090a8:	e7db      	b.n	8009062 <__kernel_cos+0xf2>
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w
 80090b0:	be8838d4 	.word	0xbe8838d4
 80090b4:	bda8fae9 	.word	0xbda8fae9
 80090b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80090bc:	3e21ee9e 	.word	0x3e21ee9e
 80090c0:	809c52ad 	.word	0x809c52ad
 80090c4:	3e927e4f 	.word	0x3e927e4f
 80090c8:	19cb1590 	.word	0x19cb1590
 80090cc:	3efa01a0 	.word	0x3efa01a0
 80090d0:	16c15177 	.word	0x16c15177
 80090d4:	3f56c16c 	.word	0x3f56c16c
 80090d8:	5555554c 	.word	0x5555554c
 80090dc:	3fa55555 	.word	0x3fa55555
 80090e0:	00000000 	.word	0x00000000
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	3fe00000 	.word	0x3fe00000
 80090ec:	3fd33332 	.word	0x3fd33332
 80090f0:	3ff00000 	.word	0x3ff00000
 80090f4:	3fe90000 	.word	0x3fe90000
 80090f8:	3fd20000 	.word	0x3fd20000
 80090fc:	00000000 	.word	0x00000000

08009100 <__kernel_sin>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	ec55 4b10 	vmov	r4, r5, d0
 8009108:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800910c:	b085      	sub	sp, #20
 800910e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009112:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009116:	4680      	mov	r8, r0
 8009118:	d205      	bcs.n	8009126 <__kernel_sin+0x26>
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 fd3b 	bl	8000b98 <__aeabi_d2iz>
 8009122:	2800      	cmp	r0, #0
 8009124:	d052      	beq.n	80091cc <__kernel_sin+0xcc>
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 fa83 	bl	8000638 <__aeabi_dmul>
 8009132:	4682      	mov	sl, r0
 8009134:	468b      	mov	fp, r1
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 fa7b 	bl	8000638 <__aeabi_dmul>
 8009142:	a342      	add	r3, pc, #264	@ (adr r3, 800924c <__kernel_sin+0x14c>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	e9cd 0100 	strd	r0, r1, [sp]
 800914c:	4650      	mov	r0, sl
 800914e:	4659      	mov	r1, fp
 8009150:	f7f7 fa72 	bl	8000638 <__aeabi_dmul>
 8009154:	a33f      	add	r3, pc, #252	@ (adr r3, 8009254 <__kernel_sin+0x154>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f8b5 	bl	80002c8 <__aeabi_dsub>
 800915e:	4652      	mov	r2, sl
 8009160:	465b      	mov	r3, fp
 8009162:	f7f7 fa69 	bl	8000638 <__aeabi_dmul>
 8009166:	a33d      	add	r3, pc, #244	@ (adr r3, 800925c <__kernel_sin+0x15c>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 f8ae 	bl	80002cc <__adddf3>
 8009170:	4652      	mov	r2, sl
 8009172:	465b      	mov	r3, fp
 8009174:	f7f7 fa60 	bl	8000638 <__aeabi_dmul>
 8009178:	a33a      	add	r3, pc, #232	@ (adr r3, 8009264 <__kernel_sin+0x164>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 f8a3 	bl	80002c8 <__aeabi_dsub>
 8009182:	4652      	mov	r2, sl
 8009184:	465b      	mov	r3, fp
 8009186:	f7f7 fa57 	bl	8000638 <__aeabi_dmul>
 800918a:	a338      	add	r3, pc, #224	@ (adr r3, 800926c <__kernel_sin+0x16c>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 f89c 	bl	80002cc <__adddf3>
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	f1b8 0f00 	cmp.w	r8, #0
 800919c:	d11b      	bne.n	80091d6 <__kernel_sin+0xd6>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4650      	mov	r0, sl
 80091a4:	4659      	mov	r1, fp
 80091a6:	f7f7 fa47 	bl	8000638 <__aeabi_dmul>
 80091aa:	a325      	add	r3, pc, #148	@ (adr r3, 8009240 <__kernel_sin+0x140>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 f88a 	bl	80002c8 <__aeabi_dsub>
 80091b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091b8:	f7f7 fa3e 	bl	8000638 <__aeabi_dmul>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 f882 	bl	80002cc <__adddf3>
 80091c8:	4604      	mov	r4, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	ec45 4b10 	vmov	d0, r4, r5
 80091d0:	b005      	add	sp, #20
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091da:	4b1b      	ldr	r3, [pc, #108]	@ (8009248 <__kernel_sin+0x148>)
 80091dc:	2200      	movs	r2, #0
 80091de:	f7f7 fa2b 	bl	8000638 <__aeabi_dmul>
 80091e2:	4632      	mov	r2, r6
 80091e4:	4680      	mov	r8, r0
 80091e6:	4689      	mov	r9, r1
 80091e8:	463b      	mov	r3, r7
 80091ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 f865 	bl	80002c8 <__aeabi_dsub>
 80091fe:	4652      	mov	r2, sl
 8009200:	465b      	mov	r3, fp
 8009202:	f7f7 fa19 	bl	8000638 <__aeabi_dmul>
 8009206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920a:	f7f7 f85d 	bl	80002c8 <__aeabi_dsub>
 800920e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009240 <__kernel_sin+0x140>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800921c:	f7f7 fa0c 	bl	8000638 <__aeabi_dmul>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 f850 	bl	80002cc <__adddf3>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 f848 	bl	80002c8 <__aeabi_dsub>
 8009238:	e7c6      	b.n	80091c8 <__kernel_sin+0xc8>
 800923a:	bf00      	nop
 800923c:	f3af 8000 	nop.w
 8009240:	55555549 	.word	0x55555549
 8009244:	3fc55555 	.word	0x3fc55555
 8009248:	3fe00000 	.word	0x3fe00000
 800924c:	5acfd57c 	.word	0x5acfd57c
 8009250:	3de5d93a 	.word	0x3de5d93a
 8009254:	8a2b9ceb 	.word	0x8a2b9ceb
 8009258:	3e5ae5e6 	.word	0x3e5ae5e6
 800925c:	57b1fe7d 	.word	0x57b1fe7d
 8009260:	3ec71de3 	.word	0x3ec71de3
 8009264:	19c161d5 	.word	0x19c161d5
 8009268:	3f2a01a0 	.word	0x3f2a01a0
 800926c:	1110f8a6 	.word	0x1110f8a6
 8009270:	3f811111 	.word	0x3f811111
 8009274:	00000000 	.word	0x00000000

08009278 <__ieee754_acos>:
 8009278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ec55 4b10 	vmov	r4, r5, d0
 8009280:	49b7      	ldr	r1, [pc, #732]	@ (8009560 <__ieee754_acos+0x2e8>)
 8009282:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009286:	428b      	cmp	r3, r1
 8009288:	d919      	bls.n	80092be <__ieee754_acos+0x46>
 800928a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800928e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009292:	4323      	orrs	r3, r4
 8009294:	d106      	bne.n	80092a4 <__ieee754_acos+0x2c>
 8009296:	2d00      	cmp	r5, #0
 8009298:	f340 8210 	ble.w	80096bc <__ieee754_acos+0x444>
 800929c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80094f0 <__ieee754_acos+0x278>
 80092a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a4:	4622      	mov	r2, r4
 80092a6:	462b      	mov	r3, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f7 f80c 	bl	80002c8 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	f7f7 faea 	bl	800088c <__aeabi_ddiv>
 80092b8:	ec41 0b10 	vmov	d0, r0, r1
 80092bc:	e7f0      	b.n	80092a0 <__ieee754_acos+0x28>
 80092be:	49a9      	ldr	r1, [pc, #676]	@ (8009564 <__ieee754_acos+0x2ec>)
 80092c0:	428b      	cmp	r3, r1
 80092c2:	f200 8085 	bhi.w	80093d0 <__ieee754_acos+0x158>
 80092c6:	4aa8      	ldr	r2, [pc, #672]	@ (8009568 <__ieee754_acos+0x2f0>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f240 81fa 	bls.w	80096c2 <__ieee754_acos+0x44a>
 80092ce:	4622      	mov	r2, r4
 80092d0:	462b      	mov	r3, r5
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f7 f9af 	bl	8000638 <__aeabi_dmul>
 80092da:	a387      	add	r3, pc, #540	@ (adr r3, 80094f8 <__ieee754_acos+0x280>)
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	4606      	mov	r6, r0
 80092e2:	460f      	mov	r7, r1
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	a385      	add	r3, pc, #532	@ (adr r3, 8009500 <__ieee754_acos+0x288>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ffed 	bl	80002cc <__adddf3>
 80092f2:	4632      	mov	r2, r6
 80092f4:	463b      	mov	r3, r7
 80092f6:	f7f7 f99f 	bl	8000638 <__aeabi_dmul>
 80092fa:	a383      	add	r3, pc, #524	@ (adr r3, 8009508 <__ieee754_acos+0x290>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f6 ffe2 	bl	80002c8 <__aeabi_dsub>
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	f7f7 f996 	bl	8000638 <__aeabi_dmul>
 800930c:	a380      	add	r3, pc, #512	@ (adr r3, 8009510 <__ieee754_acos+0x298>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f6 ffdb 	bl	80002cc <__adddf3>
 8009316:	4632      	mov	r2, r6
 8009318:	463b      	mov	r3, r7
 800931a:	f7f7 f98d 	bl	8000638 <__aeabi_dmul>
 800931e:	a37e      	add	r3, pc, #504	@ (adr r3, 8009518 <__ieee754_acos+0x2a0>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ffd0 	bl	80002c8 <__aeabi_dsub>
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	f7f7 f984 	bl	8000638 <__aeabi_dmul>
 8009330:	a37b      	add	r3, pc, #492	@ (adr r3, 8009520 <__ieee754_acos+0x2a8>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f6 ffc9 	bl	80002cc <__adddf3>
 800933a:	4632      	mov	r2, r6
 800933c:	463b      	mov	r3, r7
 800933e:	f7f7 f97b 	bl	8000638 <__aeabi_dmul>
 8009342:	a379      	add	r3, pc, #484	@ (adr r3, 8009528 <__ieee754_acos+0x2b0>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	4680      	mov	r8, r0
 800934a:	4689      	mov	r9, r1
 800934c:	4630      	mov	r0, r6
 800934e:	4639      	mov	r1, r7
 8009350:	f7f7 f972 	bl	8000638 <__aeabi_dmul>
 8009354:	a376      	add	r3, pc, #472	@ (adr r3, 8009530 <__ieee754_acos+0x2b8>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f6 ffb5 	bl	80002c8 <__aeabi_dsub>
 800935e:	4632      	mov	r2, r6
 8009360:	463b      	mov	r3, r7
 8009362:	f7f7 f969 	bl	8000638 <__aeabi_dmul>
 8009366:	a374      	add	r3, pc, #464	@ (adr r3, 8009538 <__ieee754_acos+0x2c0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f6 ffae 	bl	80002cc <__adddf3>
 8009370:	4632      	mov	r2, r6
 8009372:	463b      	mov	r3, r7
 8009374:	f7f7 f960 	bl	8000638 <__aeabi_dmul>
 8009378:	a371      	add	r3, pc, #452	@ (adr r3, 8009540 <__ieee754_acos+0x2c8>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f6 ffa3 	bl	80002c8 <__aeabi_dsub>
 8009382:	4632      	mov	r2, r6
 8009384:	463b      	mov	r3, r7
 8009386:	f7f7 f957 	bl	8000638 <__aeabi_dmul>
 800938a:	4b78      	ldr	r3, [pc, #480]	@ (800956c <__ieee754_acos+0x2f4>)
 800938c:	2200      	movs	r2, #0
 800938e:	f7f6 ff9d 	bl	80002cc <__adddf3>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4640      	mov	r0, r8
 8009398:	4649      	mov	r1, r9
 800939a:	f7f7 fa77 	bl	800088c <__aeabi_ddiv>
 800939e:	4622      	mov	r2, r4
 80093a0:	462b      	mov	r3, r5
 80093a2:	f7f7 f949 	bl	8000638 <__aeabi_dmul>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	a167      	add	r1, pc, #412	@ (adr r1, 8009548 <__ieee754_acos+0x2d0>)
 80093ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b0:	f7f6 ff8a 	bl	80002c8 <__aeabi_dsub>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff84 	bl	80002c8 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	a162      	add	r1, pc, #392	@ (adr r1, 8009550 <__ieee754_acos+0x2d8>)
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	f7f6 ff7d 	bl	80002c8 <__aeabi_dsub>
 80093ce:	e773      	b.n	80092b8 <__ieee754_acos+0x40>
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	f280 80cf 	bge.w	8009574 <__ieee754_acos+0x2fc>
 80093d6:	4b65      	ldr	r3, [pc, #404]	@ (800956c <__ieee754_acos+0x2f4>)
 80093d8:	2200      	movs	r2, #0
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f6 ff75 	bl	80002cc <__adddf3>
 80093e2:	4b63      	ldr	r3, [pc, #396]	@ (8009570 <__ieee754_acos+0x2f8>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	f7f7 f927 	bl	8000638 <__aeabi_dmul>
 80093ea:	a343      	add	r3, pc, #268	@ (adr r3, 80094f8 <__ieee754_acos+0x280>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	a341      	add	r3, pc, #260	@ (adr r3, 8009500 <__ieee754_acos+0x288>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 ff65 	bl	80002cc <__adddf3>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	a33f      	add	r3, pc, #252	@ (adr r3, 8009508 <__ieee754_acos+0x290>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 ff5a 	bl	80002c8 <__aeabi_dsub>
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f7f7 f90e 	bl	8000638 <__aeabi_dmul>
 800941c:	a33c      	add	r3, pc, #240	@ (adr r3, 8009510 <__ieee754_acos+0x298>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 ff53 	bl	80002cc <__adddf3>
 8009426:	4622      	mov	r2, r4
 8009428:	462b      	mov	r3, r5
 800942a:	f7f7 f905 	bl	8000638 <__aeabi_dmul>
 800942e:	a33a      	add	r3, pc, #232	@ (adr r3, 8009518 <__ieee754_acos+0x2a0>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f6 ff48 	bl	80002c8 <__aeabi_dsub>
 8009438:	4622      	mov	r2, r4
 800943a:	462b      	mov	r3, r5
 800943c:	f7f7 f8fc 	bl	8000638 <__aeabi_dmul>
 8009440:	a337      	add	r3, pc, #220	@ (adr r3, 8009520 <__ieee754_acos+0x2a8>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f6 ff41 	bl	80002cc <__adddf3>
 800944a:	4622      	mov	r2, r4
 800944c:	462b      	mov	r3, r5
 800944e:	f7f7 f8f3 	bl	8000638 <__aeabi_dmul>
 8009452:	a335      	add	r3, pc, #212	@ (adr r3, 8009528 <__ieee754_acos+0x2b0>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	4606      	mov	r6, r0
 800945a:	460f      	mov	r7, r1
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f7 f8ea 	bl	8000638 <__aeabi_dmul>
 8009464:	a332      	add	r3, pc, #200	@ (adr r3, 8009530 <__ieee754_acos+0x2b8>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f6 ff2d 	bl	80002c8 <__aeabi_dsub>
 800946e:	4622      	mov	r2, r4
 8009470:	462b      	mov	r3, r5
 8009472:	f7f7 f8e1 	bl	8000638 <__aeabi_dmul>
 8009476:	a330      	add	r3, pc, #192	@ (adr r3, 8009538 <__ieee754_acos+0x2c0>)
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f6 ff26 	bl	80002cc <__adddf3>
 8009480:	4622      	mov	r2, r4
 8009482:	462b      	mov	r3, r5
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	a32d      	add	r3, pc, #180	@ (adr r3, 8009540 <__ieee754_acos+0x2c8>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f6 ff1b 	bl	80002c8 <__aeabi_dsub>
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	f7f7 f8cf 	bl	8000638 <__aeabi_dmul>
 800949a:	4b34      	ldr	r3, [pc, #208]	@ (800956c <__ieee754_acos+0x2f4>)
 800949c:	2200      	movs	r2, #0
 800949e:	f7f6 ff15 	bl	80002cc <__adddf3>
 80094a2:	ec45 4b10 	vmov	d0, r4, r5
 80094a6:	4680      	mov	r8, r0
 80094a8:	4689      	mov	r9, r1
 80094aa:	f7ff fc85 	bl	8008db8 <__ieee754_sqrt>
 80094ae:	ec55 4b10 	vmov	r4, r5, d0
 80094b2:	4642      	mov	r2, r8
 80094b4:	464b      	mov	r3, r9
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f7 f9e7 	bl	800088c <__aeabi_ddiv>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	f7f7 f8b9 	bl	8000638 <__aeabi_dmul>
 80094c6:	a320      	add	r3, pc, #128	@ (adr r3, 8009548 <__ieee754_acos+0x2d0>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f6 fefc 	bl	80002c8 <__aeabi_dsub>
 80094d0:	4622      	mov	r2, r4
 80094d2:	462b      	mov	r3, r5
 80094d4:	f7f6 fefa 	bl	80002cc <__adddf3>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	f7f6 fef6 	bl	80002cc <__adddf3>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	a11c      	add	r1, pc, #112	@ (adr r1, 8009558 <__ieee754_acos+0x2e0>)
 80094e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ea:	e76e      	b.n	80093ca <__ieee754_acos+0x152>
 80094ec:	f3af 8000 	nop.w
	...
 80094f8:	0dfdf709 	.word	0x0dfdf709
 80094fc:	3f023de1 	.word	0x3f023de1
 8009500:	7501b288 	.word	0x7501b288
 8009504:	3f49efe0 	.word	0x3f49efe0
 8009508:	b5688f3b 	.word	0xb5688f3b
 800950c:	3fa48228 	.word	0x3fa48228
 8009510:	0e884455 	.word	0x0e884455
 8009514:	3fc9c155 	.word	0x3fc9c155
 8009518:	03eb6f7d 	.word	0x03eb6f7d
 800951c:	3fd4d612 	.word	0x3fd4d612
 8009520:	55555555 	.word	0x55555555
 8009524:	3fc55555 	.word	0x3fc55555
 8009528:	b12e9282 	.word	0xb12e9282
 800952c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009530:	1b8d0159 	.word	0x1b8d0159
 8009534:	3fe6066c 	.word	0x3fe6066c
 8009538:	9c598ac8 	.word	0x9c598ac8
 800953c:	40002ae5 	.word	0x40002ae5
 8009540:	1c8a2d4b 	.word	0x1c8a2d4b
 8009544:	40033a27 	.word	0x40033a27
 8009548:	33145c07 	.word	0x33145c07
 800954c:	3c91a626 	.word	0x3c91a626
 8009550:	54442d18 	.word	0x54442d18
 8009554:	3ff921fb 	.word	0x3ff921fb
 8009558:	54442d18 	.word	0x54442d18
 800955c:	400921fb 	.word	0x400921fb
 8009560:	3fefffff 	.word	0x3fefffff
 8009564:	3fdfffff 	.word	0x3fdfffff
 8009568:	3c600000 	.word	0x3c600000
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	3fe00000 	.word	0x3fe00000
 8009574:	4622      	mov	r2, r4
 8009576:	462b      	mov	r3, r5
 8009578:	496b      	ldr	r1, [pc, #428]	@ (8009728 <__ieee754_acos+0x4b0>)
 800957a:	2000      	movs	r0, #0
 800957c:	f7f6 fea4 	bl	80002c8 <__aeabi_dsub>
 8009580:	4b6a      	ldr	r3, [pc, #424]	@ (800972c <__ieee754_acos+0x4b4>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f7 f858 	bl	8000638 <__aeabi_dmul>
 8009588:	4604      	mov	r4, r0
 800958a:	460d      	mov	r5, r1
 800958c:	ec45 4b10 	vmov	d0, r4, r5
 8009590:	f7ff fc12 	bl	8008db8 <__ieee754_sqrt>
 8009594:	a34c      	add	r3, pc, #304	@ (adr r3, 80096c8 <__ieee754_acos+0x450>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	4620      	mov	r0, r4
 800959c:	4629      	mov	r1, r5
 800959e:	ec59 8b10 	vmov	r8, r9, d0
 80095a2:	f7f7 f849 	bl	8000638 <__aeabi_dmul>
 80095a6:	a34a      	add	r3, pc, #296	@ (adr r3, 80096d0 <__ieee754_acos+0x458>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe8e 	bl	80002cc <__adddf3>
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	f7f7 f840 	bl	8000638 <__aeabi_dmul>
 80095b8:	a347      	add	r3, pc, #284	@ (adr r3, 80096d8 <__ieee754_acos+0x460>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f6 fe83 	bl	80002c8 <__aeabi_dsub>
 80095c2:	4622      	mov	r2, r4
 80095c4:	462b      	mov	r3, r5
 80095c6:	f7f7 f837 	bl	8000638 <__aeabi_dmul>
 80095ca:	a345      	add	r3, pc, #276	@ (adr r3, 80096e0 <__ieee754_acos+0x468>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 fe7c 	bl	80002cc <__adddf3>
 80095d4:	4622      	mov	r2, r4
 80095d6:	462b      	mov	r3, r5
 80095d8:	f7f7 f82e 	bl	8000638 <__aeabi_dmul>
 80095dc:	a342      	add	r3, pc, #264	@ (adr r3, 80096e8 <__ieee754_acos+0x470>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe71 	bl	80002c8 <__aeabi_dsub>
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	f7f7 f825 	bl	8000638 <__aeabi_dmul>
 80095ee:	a340      	add	r3, pc, #256	@ (adr r3, 80096f0 <__ieee754_acos+0x478>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fe6a 	bl	80002cc <__adddf3>
 80095f8:	4622      	mov	r2, r4
 80095fa:	462b      	mov	r3, r5
 80095fc:	f7f7 f81c 	bl	8000638 <__aeabi_dmul>
 8009600:	a33d      	add	r3, pc, #244	@ (adr r3, 80096f8 <__ieee754_acos+0x480>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	4682      	mov	sl, r0
 8009608:	468b      	mov	fp, r1
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f7 f813 	bl	8000638 <__aeabi_dmul>
 8009612:	a33b      	add	r3, pc, #236	@ (adr r3, 8009700 <__ieee754_acos+0x488>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe56 	bl	80002c8 <__aeabi_dsub>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f7 f80a 	bl	8000638 <__aeabi_dmul>
 8009624:	a338      	add	r3, pc, #224	@ (adr r3, 8009708 <__ieee754_acos+0x490>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fe4f 	bl	80002cc <__adddf3>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	f7f7 f801 	bl	8000638 <__aeabi_dmul>
 8009636:	a336      	add	r3, pc, #216	@ (adr r3, 8009710 <__ieee754_acos+0x498>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fe44 	bl	80002c8 <__aeabi_dsub>
 8009640:	4622      	mov	r2, r4
 8009642:	462b      	mov	r3, r5
 8009644:	f7f6 fff8 	bl	8000638 <__aeabi_dmul>
 8009648:	4b37      	ldr	r3, [pc, #220]	@ (8009728 <__ieee754_acos+0x4b0>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 fe3e 	bl	80002cc <__adddf3>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	f7f7 f918 	bl	800088c <__aeabi_ddiv>
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	f7f6 ffea 	bl	8000638 <__aeabi_dmul>
 8009664:	2600      	movs	r6, #0
 8009666:	4682      	mov	sl, r0
 8009668:	468b      	mov	fp, r1
 800966a:	4632      	mov	r2, r6
 800966c:	464b      	mov	r3, r9
 800966e:	4630      	mov	r0, r6
 8009670:	4649      	mov	r1, r9
 8009672:	f7f6 ffe1 	bl	8000638 <__aeabi_dmul>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f6 fe23 	bl	80002c8 <__aeabi_dsub>
 8009682:	4632      	mov	r2, r6
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	464b      	mov	r3, r9
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f6 fe1d 	bl	80002cc <__adddf3>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f7 f8f7 	bl	800088c <__aeabi_ddiv>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4650      	mov	r0, sl
 80096a4:	4659      	mov	r1, fp
 80096a6:	f7f6 fe11 	bl	80002cc <__adddf3>
 80096aa:	4632      	mov	r2, r6
 80096ac:	464b      	mov	r3, r9
 80096ae:	f7f6 fe0d 	bl	80002cc <__adddf3>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	f7f6 fe09 	bl	80002cc <__adddf3>
 80096ba:	e5fd      	b.n	80092b8 <__ieee754_acos+0x40>
 80096bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009718 <__ieee754_acos+0x4a0>
 80096c0:	e5ee      	b.n	80092a0 <__ieee754_acos+0x28>
 80096c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009720 <__ieee754_acos+0x4a8>
 80096c6:	e5eb      	b.n	80092a0 <__ieee754_acos+0x28>
 80096c8:	0dfdf709 	.word	0x0dfdf709
 80096cc:	3f023de1 	.word	0x3f023de1
 80096d0:	7501b288 	.word	0x7501b288
 80096d4:	3f49efe0 	.word	0x3f49efe0
 80096d8:	b5688f3b 	.word	0xb5688f3b
 80096dc:	3fa48228 	.word	0x3fa48228
 80096e0:	0e884455 	.word	0x0e884455
 80096e4:	3fc9c155 	.word	0x3fc9c155
 80096e8:	03eb6f7d 	.word	0x03eb6f7d
 80096ec:	3fd4d612 	.word	0x3fd4d612
 80096f0:	55555555 	.word	0x55555555
 80096f4:	3fc55555 	.word	0x3fc55555
 80096f8:	b12e9282 	.word	0xb12e9282
 80096fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009700:	1b8d0159 	.word	0x1b8d0159
 8009704:	3fe6066c 	.word	0x3fe6066c
 8009708:	9c598ac8 	.word	0x9c598ac8
 800970c:	40002ae5 	.word	0x40002ae5
 8009710:	1c8a2d4b 	.word	0x1c8a2d4b
 8009714:	40033a27 	.word	0x40033a27
 8009718:	54442d18 	.word	0x54442d18
 800971c:	400921fb 	.word	0x400921fb
 8009720:	54442d18 	.word	0x54442d18
 8009724:	3ff921fb 	.word	0x3ff921fb
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	3fe00000 	.word	0x3fe00000

08009730 <__ieee754_rem_pio2>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	ec57 6b10 	vmov	r6, r7, d0
 8009738:	4bc5      	ldr	r3, [pc, #788]	@ (8009a50 <__ieee754_rem_pio2+0x320>)
 800973a:	b08d      	sub	sp, #52	@ 0x34
 800973c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009740:	4598      	cmp	r8, r3
 8009742:	4604      	mov	r4, r0
 8009744:	9704      	str	r7, [sp, #16]
 8009746:	d807      	bhi.n	8009758 <__ieee754_rem_pio2+0x28>
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	ed80 0b00 	vstr	d0, [r0]
 8009750:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009754:	2500      	movs	r5, #0
 8009756:	e028      	b.n	80097aa <__ieee754_rem_pio2+0x7a>
 8009758:	4bbe      	ldr	r3, [pc, #760]	@ (8009a54 <__ieee754_rem_pio2+0x324>)
 800975a:	4598      	cmp	r8, r3
 800975c:	d878      	bhi.n	8009850 <__ieee754_rem_pio2+0x120>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	4dbd      	ldr	r5, [pc, #756]	@ (8009a58 <__ieee754_rem_pio2+0x328>)
 8009762:	2b00      	cmp	r3, #0
 8009764:	4630      	mov	r0, r6
 8009766:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009a18 <__ieee754_rem_pio2+0x2e8>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	4639      	mov	r1, r7
 800976e:	dd38      	ble.n	80097e2 <__ieee754_rem_pio2+0xb2>
 8009770:	f7f6 fdaa 	bl	80002c8 <__aeabi_dsub>
 8009774:	45a8      	cmp	r8, r5
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	d01a      	beq.n	80097b2 <__ieee754_rem_pio2+0x82>
 800977c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009a20 <__ieee754_rem_pio2+0x2f0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fda1 	bl	80002c8 <__aeabi_dsub>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4680      	mov	r8, r0
 800978c:	4689      	mov	r9, r1
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f6 fd99 	bl	80002c8 <__aeabi_dsub>
 8009796:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009a20 <__ieee754_rem_pio2+0x2f0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fd94 	bl	80002c8 <__aeabi_dsub>
 80097a0:	e9c4 8900 	strd	r8, r9, [r4]
 80097a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097a8:	2501      	movs	r5, #1
 80097aa:	4628      	mov	r0, r5
 80097ac:	b00d      	add	sp, #52	@ 0x34
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8009a28 <__ieee754_rem_pio2+0x2f8>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f6 fd86 	bl	80002c8 <__aeabi_dsub>
 80097bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x300>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	f7f6 fd7f 	bl	80002c8 <__aeabi_dsub>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4680      	mov	r8, r0
 80097d0:	4689      	mov	r9, r1
 80097d2:	4630      	mov	r0, r6
 80097d4:	4639      	mov	r1, r7
 80097d6:	f7f6 fd77 	bl	80002c8 <__aeabi_dsub>
 80097da:	a395      	add	r3, pc, #596	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x300>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	e7dc      	b.n	800979c <__ieee754_rem_pio2+0x6c>
 80097e2:	f7f6 fd73 	bl	80002cc <__adddf3>
 80097e6:	45a8      	cmp	r8, r5
 80097e8:	4606      	mov	r6, r0
 80097ea:	460f      	mov	r7, r1
 80097ec:	d018      	beq.n	8009820 <__ieee754_rem_pio2+0xf0>
 80097ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8009a20 <__ieee754_rem_pio2+0x2f0>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f6 fd6a 	bl	80002cc <__adddf3>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4680      	mov	r8, r0
 80097fe:	4689      	mov	r9, r1
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f6 fd60 	bl	80002c8 <__aeabi_dsub>
 8009808:	a385      	add	r3, pc, #532	@ (adr r3, 8009a20 <__ieee754_rem_pio2+0x2f0>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 fd5d 	bl	80002cc <__adddf3>
 8009812:	f04f 35ff 	mov.w	r5, #4294967295
 8009816:	e9c4 8900 	strd	r8, r9, [r4]
 800981a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800981e:	e7c4      	b.n	80097aa <__ieee754_rem_pio2+0x7a>
 8009820:	a381      	add	r3, pc, #516	@ (adr r3, 8009a28 <__ieee754_rem_pio2+0x2f8>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fd51 	bl	80002cc <__adddf3>
 800982a:	a381      	add	r3, pc, #516	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x300>)
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	f7f6 fd4a 	bl	80002cc <__adddf3>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fd40 	bl	80002c8 <__aeabi_dsub>
 8009848:	a379      	add	r3, pc, #484	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x300>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e7de      	b.n	800980e <__ieee754_rem_pio2+0xde>
 8009850:	4b82      	ldr	r3, [pc, #520]	@ (8009a5c <__ieee754_rem_pio2+0x32c>)
 8009852:	4598      	cmp	r8, r3
 8009854:	f200 80d1 	bhi.w	80099fa <__ieee754_rem_pio2+0x2ca>
 8009858:	f7ff fa4a 	bl	8008cf0 <fabs>
 800985c:	ec57 6b10 	vmov	r6, r7, d0
 8009860:	a375      	add	r3, pc, #468	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x308>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fee5 	bl	8000638 <__aeabi_dmul>
 800986e:	4b7c      	ldr	r3, [pc, #496]	@ (8009a60 <__ieee754_rem_pio2+0x330>)
 8009870:	2200      	movs	r2, #0
 8009872:	f7f6 fd2b 	bl	80002cc <__adddf3>
 8009876:	f7f7 f98f 	bl	8000b98 <__aeabi_d2iz>
 800987a:	4605      	mov	r5, r0
 800987c:	f7f6 fe72 	bl	8000564 <__aeabi_i2d>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009888:	a363      	add	r3, pc, #396	@ (adr r3, 8009a18 <__ieee754_rem_pio2+0x2e8>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fed3 	bl	8000638 <__aeabi_dmul>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4630      	mov	r0, r6
 8009898:	4639      	mov	r1, r7
 800989a:	f7f6 fd15 	bl	80002c8 <__aeabi_dsub>
 800989e:	a360      	add	r3, pc, #384	@ (adr r3, 8009a20 <__ieee754_rem_pio2+0x2f0>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	4682      	mov	sl, r0
 80098a6:	468b      	mov	fp, r1
 80098a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ac:	f7f6 fec4 	bl	8000638 <__aeabi_dmul>
 80098b0:	2d1f      	cmp	r5, #31
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	dc0c      	bgt.n	80098d2 <__ieee754_rem_pio2+0x1a2>
 80098b8:	4b6a      	ldr	r3, [pc, #424]	@ (8009a64 <__ieee754_rem_pio2+0x334>)
 80098ba:	1e6a      	subs	r2, r5, #1
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	4543      	cmp	r3, r8
 80098c2:	d006      	beq.n	80098d2 <__ieee754_rem_pio2+0x1a2>
 80098c4:	4632      	mov	r2, r6
 80098c6:	463b      	mov	r3, r7
 80098c8:	4650      	mov	r0, sl
 80098ca:	4659      	mov	r1, fp
 80098cc:	f7f6 fcfc 	bl	80002c8 <__aeabi_dsub>
 80098d0:	e00e      	b.n	80098f0 <__ieee754_rem_pio2+0x1c0>
 80098d2:	463b      	mov	r3, r7
 80098d4:	4632      	mov	r2, r6
 80098d6:	4650      	mov	r0, sl
 80098d8:	4659      	mov	r1, fp
 80098da:	f7f6 fcf5 	bl	80002c8 <__aeabi_dsub>
 80098de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098e2:	9305      	str	r3, [sp, #20]
 80098e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	dc02      	bgt.n	80098f6 <__ieee754_rem_pio2+0x1c6>
 80098f0:	e9c4 0100 	strd	r0, r1, [r4]
 80098f4:	e039      	b.n	800996a <__ieee754_rem_pio2+0x23a>
 80098f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8009a28 <__ieee754_rem_pio2+0x2f8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009900:	f7f6 fe9a 	bl	8000638 <__aeabi_dmul>
 8009904:	4606      	mov	r6, r0
 8009906:	460f      	mov	r7, r1
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4650      	mov	r0, sl
 800990e:	4659      	mov	r1, fp
 8009910:	f7f6 fcda 	bl	80002c8 <__aeabi_dsub>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4680      	mov	r8, r0
 800991a:	4689      	mov	r9, r1
 800991c:	4650      	mov	r0, sl
 800991e:	4659      	mov	r1, fp
 8009920:	f7f6 fcd2 	bl	80002c8 <__aeabi_dsub>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f6 fcce 	bl	80002c8 <__aeabi_dsub>
 800992c:	a340      	add	r3, pc, #256	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x300>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	4606      	mov	r6, r0
 8009934:	460f      	mov	r7, r1
 8009936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993a:	f7f6 fe7d 	bl	8000638 <__aeabi_dmul>
 800993e:	4632      	mov	r2, r6
 8009940:	463b      	mov	r3, r7
 8009942:	f7f6 fcc1 	bl	80002c8 <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f6 fcb9 	bl	80002c8 <__aeabi_dsub>
 8009956:	9a05      	ldr	r2, [sp, #20]
 8009958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b31      	cmp	r3, #49	@ 0x31
 8009960:	dc20      	bgt.n	80099a4 <__ieee754_rem_pio2+0x274>
 8009962:	e9c4 0100 	strd	r0, r1, [r4]
 8009966:	46c2      	mov	sl, r8
 8009968:	46cb      	mov	fp, r9
 800996a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800996e:	4650      	mov	r0, sl
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	4659      	mov	r1, fp
 8009976:	f7f6 fca7 	bl	80002c8 <__aeabi_dsub>
 800997a:	463b      	mov	r3, r7
 800997c:	4632      	mov	r2, r6
 800997e:	f7f6 fca3 	bl	80002c8 <__aeabi_dsub>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800998a:	f6bf af0e 	bge.w	80097aa <__ieee754_rem_pio2+0x7a>
 800998e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009992:	6063      	str	r3, [r4, #4]
 8009994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009998:	f8c4 8000 	str.w	r8, [r4]
 800999c:	60a0      	str	r0, [r4, #8]
 800999e:	60e3      	str	r3, [r4, #12]
 80099a0:	426d      	negs	r5, r5
 80099a2:	e702      	b.n	80097aa <__ieee754_rem_pio2+0x7a>
 80099a4:	a326      	add	r3, pc, #152	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x310>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ae:	f7f6 fe43 	bl	8000638 <__aeabi_dmul>
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fc83 	bl	80002c8 <__aeabi_dsub>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4682      	mov	sl, r0
 80099c8:	468b      	mov	fp, r1
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f6 fc7b 	bl	80002c8 <__aeabi_dsub>
 80099d2:	4632      	mov	r2, r6
 80099d4:	463b      	mov	r3, r7
 80099d6:	f7f6 fc77 	bl	80002c8 <__aeabi_dsub>
 80099da:	a31b      	add	r3, pc, #108	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x318>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4606      	mov	r6, r0
 80099e2:	460f      	mov	r7, r1
 80099e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	f7f6 fc6a 	bl	80002c8 <__aeabi_dsub>
 80099f4:	4606      	mov	r6, r0
 80099f6:	460f      	mov	r7, r1
 80099f8:	e764      	b.n	80098c4 <__ieee754_rem_pio2+0x194>
 80099fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <__ieee754_rem_pio2+0x338>)
 80099fc:	4598      	cmp	r8, r3
 80099fe:	d935      	bls.n	8009a6c <__ieee754_rem_pio2+0x33c>
 8009a00:	4632      	mov	r2, r6
 8009a02:	463b      	mov	r3, r7
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f6 fc5e 	bl	80002c8 <__aeabi_dsub>
 8009a0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a10:	e9c4 0100 	strd	r0, r1, [r4]
 8009a14:	e69e      	b.n	8009754 <__ieee754_rem_pio2+0x24>
 8009a16:	bf00      	nop
 8009a18:	54400000 	.word	0x54400000
 8009a1c:	3ff921fb 	.word	0x3ff921fb
 8009a20:	1a626331 	.word	0x1a626331
 8009a24:	3dd0b461 	.word	0x3dd0b461
 8009a28:	1a600000 	.word	0x1a600000
 8009a2c:	3dd0b461 	.word	0x3dd0b461
 8009a30:	2e037073 	.word	0x2e037073
 8009a34:	3ba3198a 	.word	0x3ba3198a
 8009a38:	6dc9c883 	.word	0x6dc9c883
 8009a3c:	3fe45f30 	.word	0x3fe45f30
 8009a40:	2e000000 	.word	0x2e000000
 8009a44:	3ba3198a 	.word	0x3ba3198a
 8009a48:	252049c1 	.word	0x252049c1
 8009a4c:	397b839a 	.word	0x397b839a
 8009a50:	3fe921fb 	.word	0x3fe921fb
 8009a54:	4002d97b 	.word	0x4002d97b
 8009a58:	3ff921fb 	.word	0x3ff921fb
 8009a5c:	413921fb 	.word	0x413921fb
 8009a60:	3fe00000 	.word	0x3fe00000
 8009a64:	0800a788 	.word	0x0800a788
 8009a68:	7fefffff 	.word	0x7fefffff
 8009a6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009a70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009a74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009a78:	4630      	mov	r0, r6
 8009a7a:	460f      	mov	r7, r1
 8009a7c:	f7f7 f88c 	bl	8000b98 <__aeabi_d2iz>
 8009a80:	f7f6 fd70 	bl	8000564 <__aeabi_i2d>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a90:	f7f6 fc1a 	bl	80002c8 <__aeabi_dsub>
 8009a94:	4b22      	ldr	r3, [pc, #136]	@ (8009b20 <__ieee754_rem_pio2+0x3f0>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	f7f6 fdce 	bl	8000638 <__aeabi_dmul>
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	f7f7 f87a 	bl	8000b98 <__aeabi_d2iz>
 8009aa4:	f7f6 fd5e 	bl	8000564 <__aeabi_i2d>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ab4:	f7f6 fc08 	bl	80002c8 <__aeabi_dsub>
 8009ab8:	4b19      	ldr	r3, [pc, #100]	@ (8009b20 <__ieee754_rem_pio2+0x3f0>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	f7f6 fdbc 	bl	8000638 <__aeabi_dmul>
 8009ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009ac4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009ac8:	f04f 0803 	mov.w	r8, #3
 8009acc:	2600      	movs	r6, #0
 8009ace:	2700      	movs	r7, #0
 8009ad0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	46c2      	mov	sl, r8
 8009ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ade:	f7f7 f813 	bl	8000b08 <__aeabi_dcmpeq>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d1f4      	bne.n	8009ad0 <__ieee754_rem_pio2+0x3a0>
 8009ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b24 <__ieee754_rem_pio2+0x3f4>)
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	2302      	movs	r3, #2
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	462a      	mov	r2, r5
 8009af0:	4653      	mov	r3, sl
 8009af2:	4621      	mov	r1, r4
 8009af4:	a806      	add	r0, sp, #24
 8009af6:	f000 f817 	bl	8009b28 <__kernel_rem_pio2>
 8009afa:	9b04      	ldr	r3, [sp, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	4605      	mov	r5, r0
 8009b00:	f6bf ae53 	bge.w	80097aa <__ieee754_rem_pio2+0x7a>
 8009b04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009b08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8009b10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b1c:	e740      	b.n	80099a0 <__ieee754_rem_pio2+0x270>
 8009b1e:	bf00      	nop
 8009b20:	41700000 	.word	0x41700000
 8009b24:	0800a808 	.word	0x0800a808

08009b28 <__kernel_rem_pio2>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	ed2d 8b02 	vpush	{d8}
 8009b30:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009b34:	f112 0f14 	cmn.w	r2, #20
 8009b38:	9306      	str	r3, [sp, #24]
 8009b3a:	9104      	str	r1, [sp, #16]
 8009b3c:	4bbe      	ldr	r3, [pc, #760]	@ (8009e38 <__kernel_rem_pio2+0x310>)
 8009b3e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009b40:	9008      	str	r0, [sp, #32]
 8009b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	9b06      	ldr	r3, [sp, #24]
 8009b4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b4e:	bfa8      	it	ge
 8009b50:	1ed4      	subge	r4, r2, #3
 8009b52:	9305      	str	r3, [sp, #20]
 8009b54:	bfb2      	itee	lt
 8009b56:	2400      	movlt	r4, #0
 8009b58:	2318      	movge	r3, #24
 8009b5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009b5e:	f06f 0317 	mvn.w	r3, #23
 8009b62:	fb04 3303 	mla	r3, r4, r3, r3
 8009b66:	eb03 0b02 	add.w	fp, r3, r2
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	9a05      	ldr	r2, [sp, #20]
 8009b6e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009e28 <__kernel_rem_pio2+0x300>
 8009b72:	eb03 0802 	add.w	r8, r3, r2
 8009b76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009b78:	1aa7      	subs	r7, r4, r2
 8009b7a:	ae20      	add	r6, sp, #128	@ 0x80
 8009b7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009b80:	2500      	movs	r5, #0
 8009b82:	4545      	cmp	r5, r8
 8009b84:	dd13      	ble.n	8009bae <__kernel_rem_pio2+0x86>
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	aa20      	add	r2, sp, #128	@ 0x80
 8009b8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009b8e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009b92:	f04f 0800 	mov.w	r8, #0
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	4598      	cmp	r8, r3
 8009b9a:	dc31      	bgt.n	8009c00 <__kernel_rem_pio2+0xd8>
 8009b9c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009e28 <__kernel_rem_pio2+0x300>
 8009ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ba8:	462f      	mov	r7, r5
 8009baa:	2600      	movs	r6, #0
 8009bac:	e01b      	b.n	8009be6 <__kernel_rem_pio2+0xbe>
 8009bae:	42ef      	cmn	r7, r5
 8009bb0:	d407      	bmi.n	8009bc2 <__kernel_rem_pio2+0x9a>
 8009bb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009bb6:	f7f6 fcd5 	bl	8000564 <__aeabi_i2d>
 8009bba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009bbe:	3501      	adds	r5, #1
 8009bc0:	e7df      	b.n	8009b82 <__kernel_rem_pio2+0x5a>
 8009bc2:	ec51 0b18 	vmov	r0, r1, d8
 8009bc6:	e7f8      	b.n	8009bba <__kernel_rem_pio2+0x92>
 8009bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009bd0:	f7f6 fd32 	bl	8000638 <__aeabi_dmul>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bdc:	f7f6 fb76 	bl	80002cc <__adddf3>
 8009be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be4:	3601      	adds	r6, #1
 8009be6:	9b05      	ldr	r3, [sp, #20]
 8009be8:	429e      	cmp	r6, r3
 8009bea:	f1a7 0708 	sub.w	r7, r7, #8
 8009bee:	ddeb      	ble.n	8009bc8 <__kernel_rem_pio2+0xa0>
 8009bf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bf4:	f108 0801 	add.w	r8, r8, #1
 8009bf8:	ecaa 7b02 	vstmia	sl!, {d7}
 8009bfc:	3508      	adds	r5, #8
 8009bfe:	e7ca      	b.n	8009b96 <__kernel_rem_pio2+0x6e>
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	f8dd 8000 	ldr.w	r8, [sp]
 8009c06:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c16:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c1c:	ab98      	add	r3, sp, #608	@ 0x260
 8009c1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c22:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009c26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c2a:	ac0c      	add	r4, sp, #48	@ 0x30
 8009c2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c2e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009c32:	46a1      	mov	r9, r4
 8009c34:	46c2      	mov	sl, r8
 8009c36:	f1ba 0f00 	cmp.w	sl, #0
 8009c3a:	f1a5 0508 	sub.w	r5, r5, #8
 8009c3e:	dc77      	bgt.n	8009d30 <__kernel_rem_pio2+0x208>
 8009c40:	4658      	mov	r0, fp
 8009c42:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c46:	f000 fac7 	bl	800a1d8 <scalbn>
 8009c4a:	ec57 6b10 	vmov	r6, r7, d0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	f7f6 fcee 	bl	8000638 <__aeabi_dmul>
 8009c5c:	ec41 0b10 	vmov	d0, r0, r1
 8009c60:	f000 fb3a 	bl	800a2d8 <floor>
 8009c64:	4b75      	ldr	r3, [pc, #468]	@ (8009e3c <__kernel_rem_pio2+0x314>)
 8009c66:	ec51 0b10 	vmov	r0, r1, d0
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f7f6 fce4 	bl	8000638 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 fb26 	bl	80002c8 <__aeabi_dsub>
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4606      	mov	r6, r0
 8009c80:	f7f6 ff8a 	bl	8000b98 <__aeabi_d2iz>
 8009c84:	9002      	str	r0, [sp, #8]
 8009c86:	f7f6 fc6d 	bl	8000564 <__aeabi_i2d>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fb19 	bl	80002c8 <__aeabi_dsub>
 8009c96:	f1bb 0f00 	cmp.w	fp, #0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	dd6c      	ble.n	8009d7a <__kernel_rem_pio2+0x252>
 8009ca0:	f108 31ff 	add.w	r1, r8, #4294967295
 8009ca4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ca6:	9d02      	ldr	r5, [sp, #8]
 8009ca8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cac:	f1cb 0018 	rsb	r0, fp, #24
 8009cb0:	fa43 f200 	asr.w	r2, r3, r0
 8009cb4:	4415      	add	r5, r2
 8009cb6:	4082      	lsls	r2, r0
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	aa0c      	add	r2, sp, #48	@ 0x30
 8009cbc:	9502      	str	r5, [sp, #8]
 8009cbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009cc2:	f1cb 0217 	rsb	r2, fp, #23
 8009cc6:	fa43 f902 	asr.w	r9, r3, r2
 8009cca:	f1b9 0f00 	cmp.w	r9, #0
 8009cce:	dd64      	ble.n	8009d9a <__kernel_rem_pio2+0x272>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	9302      	str	r3, [sp, #8]
 8009cd8:	4615      	mov	r5, r2
 8009cda:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009cde:	4590      	cmp	r8, r2
 8009ce0:	f300 80b8 	bgt.w	8009e54 <__kernel_rem_pio2+0x32c>
 8009ce4:	f1bb 0f00 	cmp.w	fp, #0
 8009ce8:	dd07      	ble.n	8009cfa <__kernel_rem_pio2+0x1d2>
 8009cea:	f1bb 0f01 	cmp.w	fp, #1
 8009cee:	f000 80bf 	beq.w	8009e70 <__kernel_rem_pio2+0x348>
 8009cf2:	f1bb 0f02 	cmp.w	fp, #2
 8009cf6:	f000 80c6 	beq.w	8009e86 <__kernel_rem_pio2+0x35e>
 8009cfa:	f1b9 0f02 	cmp.w	r9, #2
 8009cfe:	d14c      	bne.n	8009d9a <__kernel_rem_pio2+0x272>
 8009d00:	4632      	mov	r2, r6
 8009d02:	463b      	mov	r3, r7
 8009d04:	494e      	ldr	r1, [pc, #312]	@ (8009e40 <__kernel_rem_pio2+0x318>)
 8009d06:	2000      	movs	r0, #0
 8009d08:	f7f6 fade 	bl	80002c8 <__aeabi_dsub>
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	d042      	beq.n	8009d9a <__kernel_rem_pio2+0x272>
 8009d14:	4658      	mov	r0, fp
 8009d16:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009e30 <__kernel_rem_pio2+0x308>
 8009d1a:	f000 fa5d 	bl	800a1d8 <scalbn>
 8009d1e:	4630      	mov	r0, r6
 8009d20:	4639      	mov	r1, r7
 8009d22:	ec53 2b10 	vmov	r2, r3, d0
 8009d26:	f7f6 facf 	bl	80002c8 <__aeabi_dsub>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460f      	mov	r7, r1
 8009d2e:	e034      	b.n	8009d9a <__kernel_rem_pio2+0x272>
 8009d30:	4b44      	ldr	r3, [pc, #272]	@ (8009e44 <__kernel_rem_pio2+0x31c>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d38:	f7f6 fc7e 	bl	8000638 <__aeabi_dmul>
 8009d3c:	f7f6 ff2c 	bl	8000b98 <__aeabi_d2iz>
 8009d40:	f7f6 fc10 	bl	8000564 <__aeabi_i2d>
 8009d44:	4b40      	ldr	r3, [pc, #256]	@ (8009e48 <__kernel_rem_pio2+0x320>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	4606      	mov	r6, r0
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	f7f6 fc74 	bl	8000638 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d58:	f7f6 fab6 	bl	80002c8 <__aeabi_dsub>
 8009d5c:	f7f6 ff1c 	bl	8000b98 <__aeabi_d2iz>
 8009d60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d64:	f849 0b04 	str.w	r0, [r9], #4
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7f6 faae 	bl	80002cc <__adddf3>
 8009d70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d78:	e75d      	b.n	8009c36 <__kernel_rem_pio2+0x10e>
 8009d7a:	d107      	bne.n	8009d8c <__kernel_rem_pio2+0x264>
 8009d7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d80:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d86:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009d8a:	e79e      	b.n	8009cca <__kernel_rem_pio2+0x1a2>
 8009d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8009e4c <__kernel_rem_pio2+0x324>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 fed8 	bl	8000b44 <__aeabi_dcmpge>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d143      	bne.n	8009e20 <__kernel_rem_pio2+0x2f8>
 8009d98:	4681      	mov	r9, r0
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 feb1 	bl	8000b08 <__aeabi_dcmpeq>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f000 80bf 	beq.w	8009f2a <__kernel_rem_pio2+0x402>
 8009dac:	f108 33ff 	add.w	r3, r8, #4294967295
 8009db0:	2200      	movs	r2, #0
 8009db2:	9900      	ldr	r1, [sp, #0]
 8009db4:	428b      	cmp	r3, r1
 8009db6:	da6e      	bge.n	8009e96 <__kernel_rem_pio2+0x36e>
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	f000 8089 	beq.w	8009ed0 <__kernel_rem_pio2+0x3a8>
 8009dbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009dc4:	f1ab 0b18 	sub.w	fp, fp, #24
 8009dc8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0f6      	beq.n	8009dbe <__kernel_rem_pio2+0x296>
 8009dd0:	4658      	mov	r0, fp
 8009dd2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009e30 <__kernel_rem_pio2+0x308>
 8009dd6:	f000 f9ff 	bl	800a1d8 <scalbn>
 8009dda:	f108 0301 	add.w	r3, r8, #1
 8009dde:	00da      	lsls	r2, r3, #3
 8009de0:	9205      	str	r2, [sp, #20]
 8009de2:	ec55 4b10 	vmov	r4, r5, d0
 8009de6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009de8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009e44 <__kernel_rem_pio2+0x31c>
 8009dec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009df0:	4646      	mov	r6, r8
 8009df2:	f04f 0a00 	mov.w	sl, #0
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	f280 80cf 	bge.w	8009f9a <__kernel_rem_pio2+0x472>
 8009dfc:	4644      	mov	r4, r8
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	f2c0 80fd 	blt.w	8009ffe <__kernel_rem_pio2+0x4d6>
 8009e04:	4b12      	ldr	r3, [pc, #72]	@ (8009e50 <__kernel_rem_pio2+0x328>)
 8009e06:	461f      	mov	r7, r3
 8009e08:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009e0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e0e:	9306      	str	r3, [sp, #24]
 8009e10:	f04f 0a00 	mov.w	sl, #0
 8009e14:	f04f 0b00 	mov.w	fp, #0
 8009e18:	2600      	movs	r6, #0
 8009e1a:	eba8 0504 	sub.w	r5, r8, r4
 8009e1e:	e0e2      	b.n	8009fe6 <__kernel_rem_pio2+0x4be>
 8009e20:	f04f 0902 	mov.w	r9, #2
 8009e24:	e754      	b.n	8009cd0 <__kernel_rem_pio2+0x1a8>
 8009e26:	bf00      	nop
	...
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	0800a950 	.word	0x0800a950
 8009e3c:	40200000 	.word	0x40200000
 8009e40:	3ff00000 	.word	0x3ff00000
 8009e44:	3e700000 	.word	0x3e700000
 8009e48:	41700000 	.word	0x41700000
 8009e4c:	3fe00000 	.word	0x3fe00000
 8009e50:	0800a910 	.word	0x0800a910
 8009e54:	f854 3b04 	ldr.w	r3, [r4], #4
 8009e58:	b945      	cbnz	r5, 8009e6c <__kernel_rem_pio2+0x344>
 8009e5a:	b123      	cbz	r3, 8009e66 <__kernel_rem_pio2+0x33e>
 8009e5c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009e60:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e64:	2301      	movs	r3, #1
 8009e66:	3201      	adds	r2, #1
 8009e68:	461d      	mov	r5, r3
 8009e6a:	e738      	b.n	8009cde <__kernel_rem_pio2+0x1b6>
 8009e6c:	1acb      	subs	r3, r1, r3
 8009e6e:	e7f7      	b.n	8009e60 <__kernel_rem_pio2+0x338>
 8009e70:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e74:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e7e:	a90c      	add	r1, sp, #48	@ 0x30
 8009e80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e84:	e739      	b.n	8009cfa <__kernel_rem_pio2+0x1d2>
 8009e86:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e94:	e7f3      	b.n	8009e7e <__kernel_rem_pio2+0x356>
 8009e96:	a90c      	add	r1, sp, #48	@ 0x30
 8009e98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	e787      	b.n	8009db2 <__kernel_rem_pio2+0x28a>
 8009ea2:	3401      	adds	r4, #1
 8009ea4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	d0fa      	beq.n	8009ea2 <__kernel_rem_pio2+0x37a>
 8009eac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009eb2:	eb0d 0503 	add.w	r5, sp, r3
 8009eb6:	9b06      	ldr	r3, [sp, #24]
 8009eb8:	aa20      	add	r2, sp, #128	@ 0x80
 8009eba:	4443      	add	r3, r8
 8009ebc:	f108 0701 	add.w	r7, r8, #1
 8009ec0:	3d98      	subs	r5, #152	@ 0x98
 8009ec2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009ec6:	4444      	add	r4, r8
 8009ec8:	42bc      	cmp	r4, r7
 8009eca:	da04      	bge.n	8009ed6 <__kernel_rem_pio2+0x3ae>
 8009ecc:	46a0      	mov	r8, r4
 8009ece:	e6a2      	b.n	8009c16 <__kernel_rem_pio2+0xee>
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed2:	2401      	movs	r4, #1
 8009ed4:	e7e6      	b.n	8009ea4 <__kernel_rem_pio2+0x37c>
 8009ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009edc:	f7f6 fb42 	bl	8000564 <__aeabi_i2d>
 8009ee0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a1a8 <__kernel_rem_pio2+0x680>
 8009ee4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ef0:	46b2      	mov	sl, r6
 8009ef2:	f04f 0800 	mov.w	r8, #0
 8009ef6:	9b05      	ldr	r3, [sp, #20]
 8009ef8:	4598      	cmp	r8, r3
 8009efa:	dd05      	ble.n	8009f08 <__kernel_rem_pio2+0x3e0>
 8009efc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f00:	3701      	adds	r7, #1
 8009f02:	eca5 7b02 	vstmia	r5!, {d7}
 8009f06:	e7df      	b.n	8009ec8 <__kernel_rem_pio2+0x3a0>
 8009f08:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009f0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f10:	f7f6 fb92 	bl	8000638 <__aeabi_dmul>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f1c:	f7f6 f9d6 	bl	80002cc <__adddf3>
 8009f20:	f108 0801 	add.w	r8, r8, #1
 8009f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f28:	e7e5      	b.n	8009ef6 <__kernel_rem_pio2+0x3ce>
 8009f2a:	f1cb 0000 	rsb	r0, fp, #0
 8009f2e:	ec47 6b10 	vmov	d0, r6, r7
 8009f32:	f000 f951 	bl	800a1d8 <scalbn>
 8009f36:	ec55 4b10 	vmov	r4, r5, d0
 8009f3a:	4b9d      	ldr	r3, [pc, #628]	@ (800a1b0 <__kernel_rem_pio2+0x688>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fdff 	bl	8000b44 <__aeabi_dcmpge>
 8009f46:	b300      	cbz	r0, 8009f8a <__kernel_rem_pio2+0x462>
 8009f48:	4b9a      	ldr	r3, [pc, #616]	@ (800a1b4 <__kernel_rem_pio2+0x68c>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fb72 	bl	8000638 <__aeabi_dmul>
 8009f54:	f7f6 fe20 	bl	8000b98 <__aeabi_d2iz>
 8009f58:	4606      	mov	r6, r0
 8009f5a:	f7f6 fb03 	bl	8000564 <__aeabi_i2d>
 8009f5e:	4b94      	ldr	r3, [pc, #592]	@ (800a1b0 <__kernel_rem_pio2+0x688>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	f7f6 fb69 	bl	8000638 <__aeabi_dmul>
 8009f66:	460b      	mov	r3, r1
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7f6 f9ab 	bl	80002c8 <__aeabi_dsub>
 8009f72:	f7f6 fe11 	bl	8000b98 <__aeabi_d2iz>
 8009f76:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f78:	f10b 0b18 	add.w	fp, fp, #24
 8009f7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f80:	f108 0801 	add.w	r8, r8, #1
 8009f84:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009f88:	e722      	b.n	8009dd0 <__kernel_rem_pio2+0x2a8>
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 fe03 	bl	8000b98 <__aeabi_d2iz>
 8009f92:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f94:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f98:	e71a      	b.n	8009dd0 <__kernel_rem_pio2+0x2a8>
 8009f9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009fa0:	f7f6 fae0 	bl	8000564 <__aeabi_i2d>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	f7f6 fb46 	bl	8000638 <__aeabi_dmul>
 8009fac:	4652      	mov	r2, sl
 8009fae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009fb2:	465b      	mov	r3, fp
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 fb3e 	bl	8000638 <__aeabi_dmul>
 8009fbc:	3e01      	subs	r6, #1
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	e718      	b.n	8009df6 <__kernel_rem_pio2+0x2ce>
 8009fc4:	9906      	ldr	r1, [sp, #24]
 8009fc6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009fca:	9106      	str	r1, [sp, #24]
 8009fcc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4650      	mov	r0, sl
 8009fda:	4659      	mov	r1, fp
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	4682      	mov	sl, r0
 8009fe4:	468b      	mov	fp, r1
 8009fe6:	9b00      	ldr	r3, [sp, #0]
 8009fe8:	429e      	cmp	r6, r3
 8009fea:	dc01      	bgt.n	8009ff0 <__kernel_rem_pio2+0x4c8>
 8009fec:	42b5      	cmp	r5, r6
 8009fee:	dae9      	bge.n	8009fc4 <__kernel_rem_pio2+0x49c>
 8009ff0:	ab48      	add	r3, sp, #288	@ 0x120
 8009ff2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009ff6:	e9c5 ab00 	strd	sl, fp, [r5]
 8009ffa:	3c01      	subs	r4, #1
 8009ffc:	e6ff      	b.n	8009dfe <__kernel_rem_pio2+0x2d6>
 8009ffe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a000:	2b02      	cmp	r3, #2
 800a002:	dc0b      	bgt.n	800a01c <__kernel_rem_pio2+0x4f4>
 800a004:	2b00      	cmp	r3, #0
 800a006:	dc39      	bgt.n	800a07c <__kernel_rem_pio2+0x554>
 800a008:	d05d      	beq.n	800a0c6 <__kernel_rem_pio2+0x59e>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	f003 0007 	and.w	r0, r3, #7
 800a010:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a014:	ecbd 8b02 	vpop	{d8}
 800a018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d1f3      	bne.n	800a00a <__kernel_rem_pio2+0x4e2>
 800a022:	9b05      	ldr	r3, [sp, #20]
 800a024:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a028:	eb0d 0403 	add.w	r4, sp, r3
 800a02c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a030:	4625      	mov	r5, r4
 800a032:	46c2      	mov	sl, r8
 800a034:	f1ba 0f00 	cmp.w	sl, #0
 800a038:	f1a5 0508 	sub.w	r5, r5, #8
 800a03c:	dc6b      	bgt.n	800a116 <__kernel_rem_pio2+0x5ee>
 800a03e:	4645      	mov	r5, r8
 800a040:	2d01      	cmp	r5, #1
 800a042:	f1a4 0408 	sub.w	r4, r4, #8
 800a046:	f300 8087 	bgt.w	800a158 <__kernel_rem_pio2+0x630>
 800a04a:	9c05      	ldr	r4, [sp, #20]
 800a04c:	ab48      	add	r3, sp, #288	@ 0x120
 800a04e:	441c      	add	r4, r3
 800a050:	2000      	movs	r0, #0
 800a052:	2100      	movs	r1, #0
 800a054:	f1b8 0f01 	cmp.w	r8, #1
 800a058:	f300 809c 	bgt.w	800a194 <__kernel_rem_pio2+0x66c>
 800a05c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a060:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a064:	f1b9 0f00 	cmp.w	r9, #0
 800a068:	f040 80a6 	bne.w	800a1b8 <__kernel_rem_pio2+0x690>
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	e9c3 7800 	strd	r7, r8, [r3]
 800a072:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a076:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a07a:	e7c6      	b.n	800a00a <__kernel_rem_pio2+0x4e2>
 800a07c:	9d05      	ldr	r5, [sp, #20]
 800a07e:	ab48      	add	r3, sp, #288	@ 0x120
 800a080:	441d      	add	r5, r3
 800a082:	4644      	mov	r4, r8
 800a084:	2000      	movs	r0, #0
 800a086:	2100      	movs	r1, #0
 800a088:	2c00      	cmp	r4, #0
 800a08a:	da35      	bge.n	800a0f8 <__kernel_rem_pio2+0x5d0>
 800a08c:	f1b9 0f00 	cmp.w	r9, #0
 800a090:	d038      	beq.n	800a104 <__kernel_rem_pio2+0x5dc>
 800a092:	4602      	mov	r2, r0
 800a094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a098:	9c04      	ldr	r4, [sp, #16]
 800a09a:	e9c4 2300 	strd	r2, r3, [r4]
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a0a6:	f7f6 f90f 	bl	80002c8 <__aeabi_dsub>
 800a0aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800a0ac:	2401      	movs	r4, #1
 800a0ae:	45a0      	cmp	r8, r4
 800a0b0:	da2b      	bge.n	800a10a <__kernel_rem_pio2+0x5e2>
 800a0b2:	f1b9 0f00 	cmp.w	r9, #0
 800a0b6:	d002      	beq.n	800a0be <__kernel_rem_pio2+0x596>
 800a0b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0bc:	4619      	mov	r1, r3
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a0c4:	e7a1      	b.n	800a00a <__kernel_rem_pio2+0x4e2>
 800a0c6:	9c05      	ldr	r4, [sp, #20]
 800a0c8:	ab48      	add	r3, sp, #288	@ 0x120
 800a0ca:	441c      	add	r4, r3
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f1b8 0f00 	cmp.w	r8, #0
 800a0d4:	da09      	bge.n	800a0ea <__kernel_rem_pio2+0x5c2>
 800a0d6:	f1b9 0f00 	cmp.w	r9, #0
 800a0da:	d002      	beq.n	800a0e2 <__kernel_rem_pio2+0x5ba>
 800a0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	e9c3 0100 	strd	r0, r1, [r3]
 800a0e8:	e78f      	b.n	800a00a <__kernel_rem_pio2+0x4e2>
 800a0ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a0ee:	f7f6 f8ed 	bl	80002cc <__adddf3>
 800a0f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0f6:	e7eb      	b.n	800a0d0 <__kernel_rem_pio2+0x5a8>
 800a0f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a0fc:	f7f6 f8e6 	bl	80002cc <__adddf3>
 800a100:	3c01      	subs	r4, #1
 800a102:	e7c1      	b.n	800a088 <__kernel_rem_pio2+0x560>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	e7c6      	b.n	800a098 <__kernel_rem_pio2+0x570>
 800a10a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a10e:	f7f6 f8dd 	bl	80002cc <__adddf3>
 800a112:	3401      	adds	r4, #1
 800a114:	e7cb      	b.n	800a0ae <__kernel_rem_pio2+0x586>
 800a116:	ed95 7b00 	vldr	d7, [r5]
 800a11a:	ed8d 7b00 	vstr	d7, [sp]
 800a11e:	ed95 7b02 	vldr	d7, [r5, #8]
 800a122:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a126:	ec53 2b17 	vmov	r2, r3, d7
 800a12a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a12e:	f7f6 f8cd 	bl	80002cc <__adddf3>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a13e:	f7f6 f8c3 	bl	80002c8 <__aeabi_dsub>
 800a142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a146:	f7f6 f8c1 	bl	80002cc <__adddf3>
 800a14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a14e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a152:	e9c5 6700 	strd	r6, r7, [r5]
 800a156:	e76d      	b.n	800a034 <__kernel_rem_pio2+0x50c>
 800a158:	ed94 7b00 	vldr	d7, [r4]
 800a15c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a160:	ec51 0b17 	vmov	r0, r1, d7
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	ed8d 7b00 	vstr	d7, [sp]
 800a16c:	f7f6 f8ae 	bl	80002cc <__adddf3>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4606      	mov	r6, r0
 800a176:	460f      	mov	r7, r1
 800a178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a17c:	f7f6 f8a4 	bl	80002c8 <__aeabi_dsub>
 800a180:	4652      	mov	r2, sl
 800a182:	465b      	mov	r3, fp
 800a184:	f7f6 f8a2 	bl	80002cc <__adddf3>
 800a188:	3d01      	subs	r5, #1
 800a18a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a18e:	e9c4 6700 	strd	r6, r7, [r4]
 800a192:	e755      	b.n	800a040 <__kernel_rem_pio2+0x518>
 800a194:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a198:	f7f6 f898 	bl	80002cc <__adddf3>
 800a19c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1a0:	e758      	b.n	800a054 <__kernel_rem_pio2+0x52c>
 800a1a2:	bf00      	nop
 800a1a4:	f3af 8000 	nop.w
	...
 800a1b0:	41700000 	.word	0x41700000
 800a1b4:	3e700000 	.word	0x3e700000
 800a1b8:	9b04      	ldr	r3, [sp, #16]
 800a1ba:	9a04      	ldr	r2, [sp, #16]
 800a1bc:	601f      	str	r7, [r3, #0]
 800a1be:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a1c2:	605c      	str	r4, [r3, #4]
 800a1c4:	609d      	str	r5, [r3, #8]
 800a1c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1ca:	60d3      	str	r3, [r2, #12]
 800a1cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1d0:	6110      	str	r0, [r2, #16]
 800a1d2:	6153      	str	r3, [r2, #20]
 800a1d4:	e719      	b.n	800a00a <__kernel_rem_pio2+0x4e2>
 800a1d6:	bf00      	nop

0800a1d8 <scalbn>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	ec55 4b10 	vmov	r4, r5, d0
 800a1de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	b991      	cbnz	r1, 800a20e <scalbn+0x36>
 800a1e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a1ec:	4323      	orrs	r3, r4
 800a1ee:	d03d      	beq.n	800a26c <scalbn+0x94>
 800a1f0:	4b35      	ldr	r3, [pc, #212]	@ (800a2c8 <scalbn+0xf0>)
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f7f6 fa1e 	bl	8000638 <__aeabi_dmul>
 800a1fc:	4b33      	ldr	r3, [pc, #204]	@ (800a2cc <scalbn+0xf4>)
 800a1fe:	429e      	cmp	r6, r3
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	da0f      	bge.n	800a226 <scalbn+0x4e>
 800a206:	a328      	add	r3, pc, #160	@ (adr r3, 800a2a8 <scalbn+0xd0>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	e01e      	b.n	800a24c <scalbn+0x74>
 800a20e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a212:	4291      	cmp	r1, r2
 800a214:	d10b      	bne.n	800a22e <scalbn+0x56>
 800a216:	4622      	mov	r2, r4
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	f7f6 f856 	bl	80002cc <__adddf3>
 800a220:	4604      	mov	r4, r0
 800a222:	460d      	mov	r5, r1
 800a224:	e022      	b.n	800a26c <scalbn+0x94>
 800a226:	460b      	mov	r3, r1
 800a228:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a22c:	3936      	subs	r1, #54	@ 0x36
 800a22e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a232:	4296      	cmp	r6, r2
 800a234:	dd0d      	ble.n	800a252 <scalbn+0x7a>
 800a236:	2d00      	cmp	r5, #0
 800a238:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2b0 <scalbn+0xd8>)
 800a23a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a23e:	da02      	bge.n	800a246 <scalbn+0x6e>
 800a240:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2b8 <scalbn+0xe0>)
 800a242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a246:	a31a      	add	r3, pc, #104	@ (adr r3, 800a2b0 <scalbn+0xd8>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 f9f4 	bl	8000638 <__aeabi_dmul>
 800a250:	e7e6      	b.n	800a220 <scalbn+0x48>
 800a252:	1872      	adds	r2, r6, r1
 800a254:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a258:	428a      	cmp	r2, r1
 800a25a:	dcec      	bgt.n	800a236 <scalbn+0x5e>
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	dd08      	ble.n	800a272 <scalbn+0x9a>
 800a260:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a264:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a268:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a26c:	ec45 4b10 	vmov	d0, r4, r5
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a276:	da08      	bge.n	800a28a <scalbn+0xb2>
 800a278:	2d00      	cmp	r5, #0
 800a27a:	a10b      	add	r1, pc, #44	@ (adr r1, 800a2a8 <scalbn+0xd0>)
 800a27c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a280:	dac1      	bge.n	800a206 <scalbn+0x2e>
 800a282:	a10f      	add	r1, pc, #60	@ (adr r1, 800a2c0 <scalbn+0xe8>)
 800a284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a288:	e7bd      	b.n	800a206 <scalbn+0x2e>
 800a28a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a28e:	3236      	adds	r2, #54	@ 0x36
 800a290:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a298:	4620      	mov	r0, r4
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <scalbn+0xf8>)
 800a29c:	4629      	mov	r1, r5
 800a29e:	2200      	movs	r2, #0
 800a2a0:	e7d4      	b.n	800a24c <scalbn+0x74>
 800a2a2:	bf00      	nop
 800a2a4:	f3af 8000 	nop.w
 800a2a8:	c2f8f359 	.word	0xc2f8f359
 800a2ac:	01a56e1f 	.word	0x01a56e1f
 800a2b0:	8800759c 	.word	0x8800759c
 800a2b4:	7e37e43c 	.word	0x7e37e43c
 800a2b8:	8800759c 	.word	0x8800759c
 800a2bc:	fe37e43c 	.word	0xfe37e43c
 800a2c0:	c2f8f359 	.word	0xc2f8f359
 800a2c4:	81a56e1f 	.word	0x81a56e1f
 800a2c8:	43500000 	.word	0x43500000
 800a2cc:	ffff3cb0 	.word	0xffff3cb0
 800a2d0:	3c900000 	.word	0x3c900000
 800a2d4:	00000000 	.word	0x00000000

0800a2d8 <floor>:
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a2e8:	2e13      	cmp	r6, #19
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	dc34      	bgt.n	800a35c <floor+0x84>
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	da17      	bge.n	800a326 <floor+0x4e>
 800a2f6:	a332      	add	r3, pc, #200	@ (adr r3, 800a3c0 <floor+0xe8>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ffe6 	bl	80002cc <__adddf3>
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	f7f6 fc28 	bl	8000b58 <__aeabi_dcmpgt>
 800a308:	b150      	cbz	r0, 800a320 <floor+0x48>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	da55      	bge.n	800a3ba <floor+0xe2>
 800a30e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a312:	432c      	orrs	r4, r5
 800a314:	2500      	movs	r5, #0
 800a316:	42ac      	cmp	r4, r5
 800a318:	4c2b      	ldr	r4, [pc, #172]	@ (800a3c8 <floor+0xf0>)
 800a31a:	bf08      	it	eq
 800a31c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a320:	4621      	mov	r1, r4
 800a322:	4628      	mov	r0, r5
 800a324:	e023      	b.n	800a36e <floor+0x96>
 800a326:	4f29      	ldr	r7, [pc, #164]	@ (800a3cc <floor+0xf4>)
 800a328:	4137      	asrs	r7, r6
 800a32a:	ea01 0307 	and.w	r3, r1, r7
 800a32e:	4303      	orrs	r3, r0
 800a330:	d01d      	beq.n	800a36e <floor+0x96>
 800a332:	a323      	add	r3, pc, #140	@ (adr r3, 800a3c0 <floor+0xe8>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ffc8 	bl	80002cc <__adddf3>
 800a33c:	2200      	movs	r2, #0
 800a33e:	2300      	movs	r3, #0
 800a340:	f7f6 fc0a 	bl	8000b58 <__aeabi_dcmpgt>
 800a344:	2800      	cmp	r0, #0
 800a346:	d0eb      	beq.n	800a320 <floor+0x48>
 800a348:	2c00      	cmp	r4, #0
 800a34a:	bfbe      	ittt	lt
 800a34c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a350:	4133      	asrlt	r3, r6
 800a352:	18e4      	addlt	r4, r4, r3
 800a354:	ea24 0407 	bic.w	r4, r4, r7
 800a358:	2500      	movs	r5, #0
 800a35a:	e7e1      	b.n	800a320 <floor+0x48>
 800a35c:	2e33      	cmp	r6, #51	@ 0x33
 800a35e:	dd0a      	ble.n	800a376 <floor+0x9e>
 800a360:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a364:	d103      	bne.n	800a36e <floor+0x96>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	f7f5 ffaf 	bl	80002cc <__adddf3>
 800a36e:	ec41 0b10 	vmov	d0, r0, r1
 800a372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a376:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a37a:	f04f 37ff 	mov.w	r7, #4294967295
 800a37e:	40df      	lsrs	r7, r3
 800a380:	4207      	tst	r7, r0
 800a382:	d0f4      	beq.n	800a36e <floor+0x96>
 800a384:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3c0 <floor+0xe8>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff9f 	bl	80002cc <__adddf3>
 800a38e:	2200      	movs	r2, #0
 800a390:	2300      	movs	r3, #0
 800a392:	f7f6 fbe1 	bl	8000b58 <__aeabi_dcmpgt>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0c2      	beq.n	800a320 <floor+0x48>
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	da0a      	bge.n	800a3b4 <floor+0xdc>
 800a39e:	2e14      	cmp	r6, #20
 800a3a0:	d101      	bne.n	800a3a6 <floor+0xce>
 800a3a2:	3401      	adds	r4, #1
 800a3a4:	e006      	b.n	800a3b4 <floor+0xdc>
 800a3a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	40b3      	lsls	r3, r6
 800a3ae:	441d      	add	r5, r3
 800a3b0:	4545      	cmp	r5, r8
 800a3b2:	d3f6      	bcc.n	800a3a2 <floor+0xca>
 800a3b4:	ea25 0507 	bic.w	r5, r5, r7
 800a3b8:	e7b2      	b.n	800a320 <floor+0x48>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	462c      	mov	r4, r5
 800a3be:	e7af      	b.n	800a320 <floor+0x48>
 800a3c0:	8800759c 	.word	0x8800759c
 800a3c4:	7e37e43c 	.word	0x7e37e43c
 800a3c8:	bff00000 	.word	0xbff00000
 800a3cc:	000fffff 	.word	0x000fffff

0800a3d0 <_init>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	bf00      	nop
 800a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d6:	bc08      	pop	{r3}
 800a3d8:	469e      	mov	lr, r3
 800a3da:	4770      	bx	lr

0800a3dc <_fini>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	bf00      	nop
 800a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e2:	bc08      	pop	{r3}
 800a3e4:	469e      	mov	lr, r3
 800a3e6:	4770      	bx	lr
